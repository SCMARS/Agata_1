#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import subprocess
import sys
import time
from datetime import datetime

def log_monitor(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def monitor_api_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ API"""
    log_monitor("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ API...")
    try:
        process = subprocess.Popen(
            ["tail", "-f", "api.log"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        for line in iter(process.stdout.readline, ''):
            if line.strip():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–æ–≥–∏
                if any(keyword in line.lower() for keyword in [
                    'openai', 'short_msg', 'splitter', 'living_chat', 
                    'analyzer', 'connector', 'question', 'emotion'
                ]):
                    print(f"üìä API: {line.strip()}")
        
    except KeyboardInterrupt:
        log_monitor("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        log_monitor(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API: {e}", "ERROR")

def monitor_bot_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
    log_monitor("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞...")
    try:
        process = subprocess.Popen(
            ["tail", "-f", "bot.log"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        for line in iter(process.stdout.readline, ''):
            if line.strip():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–æ–≥–∏
                if any(keyword in line.lower() for keyword in [
                    'openai', 'short_msg', 'splitter', 'living_chat',
                    'analyzer', 'connector', 'question', 'emotion'
                ]):
                    print(f"ü§ñ BOT: {line.strip()}")
        
    except KeyboardInterrupt:
        log_monitor("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        log_monitor(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞: {e}", "ERROR")

def monitor_all_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    log_monitor("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤...")
    log_monitor("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        import threading
        
        api_thread = threading.Thread(target=monitor_api_logs)
        bot_thread = threading.Thread(target=monitor_bot_logs)
        
        api_thread.daemon = True
        bot_thread.daemon = True
        
        api_thread.start()
        bot_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        log_monitor("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        log_monitor(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", "ERROR")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "api":
            monitor_api_logs()
        elif sys.argv[1] == "bot":
            monitor_bot_logs()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python monitor_logs.py [api|bot]")
    else:
        monitor_all_logs()

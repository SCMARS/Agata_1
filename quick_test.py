#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å —Å–∏—Å—Ç–µ–º–∏ –ê–≥–∞—Ç–∏
"""

import requests
import json

API_BASE = "http://localhost:8000"

def test(user_id, messages, description):
    """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç"""
    print(f"\nüß™ {description}")
    print("=" * 50)
    
    try:
        response = requests.post(
            f"{API_BASE}/api/chat",
            json={"user_id": user_id, "messages": messages},
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {parts}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            full_response = " ".join(parts)
            if "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" in full_response.lower():
                print("‚ùå –ú—ñ—Å—Ç–∏—Ç—å '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'")
            else:
                print("‚úÖ –ù–µ–º–∞—î '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —á–∞—Å—Ç–∏–Ω
            for i, part in enumerate(parts, 1):
                length = len(part)
                status = "‚úÖ" if length <= 80 else "‚ùå"
                print(f"{status} –ß–∞—Å—Ç–∏–Ω–∞ {i}: {length} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            return result
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def main():
    print("üöÄ –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ –ü–û–ö–†–ê–©–ï–ù–¨ –ê–ì–ê–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è
    test("test1", [{"role": "user", "content": "–û—Ç–∫—É–¥–∞ —Ç—ã?"}], 
         "–ü—Ä—è–º–µ –ø–∏—Ç–∞–Ω–Ω—è")
    
    # –¢–µ—Å—Ç 2: –†–æ–∑–±–∏—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    test("test2", [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫"}, 
        {"role": "user", "content": "–¥–µ–ª–∞?"}
    ], "–†–æ–∑–±–∏—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    # –¢–µ—Å—Ç 3: –ö—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å
    test("test3", [
        {"role": "user", "content": "–ö–∞–∫ –¥–µ–ª–∞?"}, 
        {"role": "user", "content": "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?"}, 
        {"role": "user", "content": "–û—Ç–∫—É–¥–∞ —Ç—ã?"}
    ], "–ö—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å –ø—ñ–¥—Ä—è–¥")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–±–ª–µ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
    test("test4", [{"role": "user", "content": "–ß—Ç–æ?"}], 
         "–ö–æ—Ä–æ—Ç–∫–µ –ø–∏—Ç–∞–Ω–Ω—è '–ß—Ç–æ?'")
    
    # –¢–µ—Å—Ç 5: –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ
    test("test5", [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–¥—Ä–µ–π"}], 
         "–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —ñ–º'—è–º")

if __name__ == "__main__":
    main()

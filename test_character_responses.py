#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏
"""
import requests
import json
import time

API_URL = "http://localhost:8000/api/chat"

def test_character_responses():
    print("üé≠ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–´–• –û–¢–í–ï–¢–û–í –° –•–ê–†–ê–ö–¢–ï–†–û–ú –ò –≠–ú–û–¶–ò–Ø–ú–ò")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —ç–º–æ—Ü–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–±–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑")
    print("=" * 60)
    
    user_id = "test_character_responses"
    messages = []
    
    test_cases = [
        "–ø—Ä–∏–≤–µ—Ç",
        "–∫–∞–∫ –¥–µ–ª–∞? –∏–∑ –∫–∏–µ–≤–∞",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º —Ä–∞–±–æ—Ç–∞—é",
        "–ª—é–±–ª—é –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –ª—ã–∂–∞—Ö",
        "–∞ —Ç—ã —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤ –≤–∞—Ä—à–∞–≤–µ?",
        "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "–∫—Ä—É—Ç–æ, —É –º–µ–Ω—è —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "—á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "–ª—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏",
        "–∞ –∫–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?"
    ]
    
    for i, user_message in enumerate(test_cases, 1):
        print(f"\nüì® –°–û–û–ë–©–ï–ù–ò–ï {i}: '{user_message}'")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        try:
            response = requests.post(
                API_URL,
                json={
                    "user_id": user_id,
                    "messages": messages
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                messages.append({"role": "assistant", "content": bot_response})
                
                print(f"   –û—Ç–≤–µ—Ç: {bot_response}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                has_question = "?" in bot_response
                starts_with_hello = bot_response.startswith("–ü—Ä–∏–≤–µ—Ç")
                has_robotic_phrases = any(phrase in bot_response.lower() for phrase in [
                    "–ø—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å", "—É —Ç–µ–±—è, –Ω–∞–≤–µ—Ä–Ω–æ–µ", "–æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–ø–∞—Å–∏–±–æ"
                ])
                has_emotions = any(word in bot_response.lower() for word in [
                    "–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–æ–≥–æ", "–≤–∞—É", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ª—é–±–æ–ø—ã—Ç–Ω–æ"
                ])
                has_personal = any(word in bot_response.lower() for word in [
                    "—É –º–µ–Ω—è", "–º–Ω–µ", "—è", "—á—É–≤—Å—Ç–≤—É—é", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
                ])
                
                # –°—Ç–∞—Ç—É—Å
                question_status = "‚úÖ –í–û–ü–†–û–°" if has_question else "‚ùå –ù–ï–¢ –í–û–ü–†–û–°–ê"
                hello_status = "‚ùå –ù–ê–ß–ò–ù–ê–ï–¢ –° –ü–†–ò–í–ï–¢" if starts_with_hello else "‚úÖ –ù–ï –ù–ê–ß–ò–ù–ê–ï–¢ –° –ü–†–ò–í–ï–¢"
                robotic_status = "‚ùå –†–û–ë–û–¢–ò–ß–ï–°–ö–ò–ï –§–†–ê–ó–´" if has_robotic_phrases else "‚úÖ –ù–ï–¢ –†–û–ë–û–¢–ò–ß–ï–°–ö–ò–• –§–†–ê–ó"
                emotion_status = "‚úÖ –ï–°–¢–¨ –≠–ú–û–¶–ò–ò" if has_emotions else "‚ùå –ù–ï–¢ –≠–ú–û–¶–ò–ô"
                personal_status = "‚úÖ –õ–ò–ß–ù–û–ï" if has_personal else "‚ùå –ù–ï–¢ –õ–ò–ß–ù–û–ì–û"
                
                print(f"   {question_status} | {hello_status} | {robotic_status}")
                print(f"   {emotion_status} | {personal_status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                expected_question = (i % 2) == 0 and i >= 2
                question_correct = has_question == expected_question
                print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {'‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' if question_correct else '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_question})")
                
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
    print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã —ç–º–æ—Ü–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä")
    print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–±–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑")
    print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)

if __name__ == "__main__":
    test_character_responses()

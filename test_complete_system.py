

import requests
import json
import time
import sys
from datetime import datetime

def test_emotional_analysis():

    print("üß† –¢–ï–°–¢ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    test_cases = [
        {
            "name": "–ì—Ä—É–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message": "–¢—ã –¥—É—Ä–∞!",
            "expected_emotion": "rude",
            "expected_strategy": "reserved"
        },
        {
            "name": "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
            "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            "expected_emotion": "positive",
            "expected_strategy": "playful"
        },
        {
            "name": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message": "–ö–∞–∫ –¥–µ–ª–∞?",
            "expected_emotion": "neutral", 
            "expected_strategy": "mysterious"
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test_case['message']}'")
        
        try:
            response = requests.post(
                "http://localhost:8000/api/chat",
                json={
                    "user_id": f"test_emotional_{i}",
                    "message": test_case['message'],
                    "messages": [{"role": "user", "content": test_case['message']}]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                behavioral_analysis = data.get('behavioral_analysis', {})
                
                emotion = behavioral_analysis.get('dominant_emotion', 'unknown')
                strategy = behavioral_analysis.get('recommended_strategy', 'unknown')
                
                print(f"   ‚úÖ –≠–º–æ—Ü–∏—è: {emotion} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected_emotion']})")
                print(f"   ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected_strategy']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                emotion_match = emotion == test_case['expected_emotion']
                strategy_match = strategy == test_case['expected_strategy']
                
                if emotion_match and strategy_match:
                    print(f"   üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –£–°–ü–ï–•")
                    results.append(True)
                else:
                    print(f"   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –û–®–ò–ë–ö–ê")
                    results.append(False)
                    
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                results.append(False)
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append(False)
    
    print(f"\nüìä –ò–¢–û–ì–ò –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {sum(results)}/{len(results)}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {sum(results)/len(results)*100:.1f}%")
    
    return sum(results) == len(results)

def test_response_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
    print("\n\nüé≠ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–û–í")
    print("=" * 50)
    
    test_cases = [
        {
            "name": "–ì—Ä—É–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reserved strategy)",
            "message": "–¢—ã —Ç—É–ø–∞—è!",
            "should_be_reserved": True
        },
        {
            "name": "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (playful strategy)", 
            "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            "should_be_playful": True
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        
        try:
            response = requests.post(
                "http://localhost:8000/api/chat",
                json={
                    "user_id": f"test_response_{i}",
                    "message": test_case['message'],
                    "messages": [{"role": "user", "content": test_case['message']}]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                model_response = data.get('response', '')
                
                print(f"   –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: '{model_response[:100]}...'")
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                if len(model_response) > 10 and len(model_response) < 1000:
                    print(f"   ‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(model_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    results.append(True)
                else:
                    print(f"   ‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(model_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    results.append(False)
                    
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                results.append(False)
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append(False)
    
    print(f"\nüìä –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–û–í:")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {sum(results)}/{len(results)}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {sum(results)/len(results)*100:.1f}%")
    
    return sum(results) == len(results)

def test_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n\nüìù –¢–ï–°–¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    import os
    
    log_files = [
        "telegram_bot.log",
        "logs/api.log"
    ]
    
    results = []
    
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            print(f"   ‚úÖ {log_file}: {size} –±–∞–π—Ç")
            results.append(True)
        else:
            print(f"   ‚ùå {log_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append(False)
    
    print(f"\nüìä –ò–¢–û–ì–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sum(results)}/{len(results)}")
    
    return sum(results) > 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ AGATHA")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code == 404:  # –û–∂–∏–¥–∞–µ–º 404 –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_results = []
    
    # –¢–µ—Å—Ç 1: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    test_results.append(test_emotional_analysis())
    
    # –¢–µ—Å—Ç 2: –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    test_results.append(test_response_quality())
    
    # –¢–µ—Å—Ç 3: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_results.append(test_logging())
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    test_names = [
        "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤", 
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, test_results), 1):
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{i}. {name}: {status}")
    
    overall_success = sum(test_results) == len(test_results)
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if overall_success:
        print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return overall_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

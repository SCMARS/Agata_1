
import os
import json

import psycopg2
import psycopg2.extras
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from .base import MemoryAdapter, Message, MemoryContext

# Quiet mode setting
QUIET_MODE = os.getenv('AGATHA_QUIET', 'false').lower() == 'true'

def log_info(message: str):
    """–£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ quiet mode"""
    if not QUIET_MODE:
        print(message)
from ..config.settings import settings

class VectorMemory(MemoryAdapter):
    """
    –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –ë–î (pgvector) –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    
    def __init__(self, user_id: str, max_memories: int = 1000):
        self.user_id = user_id
        self.max_memories = max_memories
        self.db_pool = None
        self.connection_error = False
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç memories –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.memories = []
        
    def _get_db_pool(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        print("‚ö†Ô∏è _get_db_pool —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _get_db_conn")
        return None

    def _get_db_conn(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î PostgreSQL"""
        try:
            if self.connection_error:
                print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Ä–∞–Ω–µ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None

            conn = psycopg2.connect(
                host=settings.DATABASE_HOST,
                port=settings.DATABASE_PORT,
                user=settings.DATABASE_USER,
                password=settings.DATABASE_PASSWORD,
                database=settings.DATABASE_NAME
            )
            conn.autocommit = False
            return conn

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            print(f"üìç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {settings.DATABASE_HOST}:{settings.DATABASE_PORT}/{settings.DATABASE_NAME}")
            self.connection_error = True
            return None
    
    def _ensure_tables(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if hasattr(self, '_tables_created') and self._tables_created:
            return True
            
        conn = self._get_db_conn()
        if not conn:
            print("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
            return False
            
        try:
            with conn.cursor() as cursor:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS vector_memories (
                        id SERIAL PRIMARY KEY,
                        user_id VARCHAR(255) NOT NULL,
                        content TEXT NOT NULL,
                        role VARCHAR(50) NOT NULL,
                        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
                        day_number INTEGER NOT NULL,
                        importance_score FLOAT NOT NULL,
                        topics JSONB,
                        emotions JSONB,
                        metadata JSONB,
                        embedding VECTOR(1536),
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                """)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_vector_memories_user_id ON vector_memories(user_id);
                    CREATE INDEX IF NOT EXISTS idx_vector_memories_timestamp ON vector_memories(timestamp);
                    CREATE INDEX IF NOT EXISTS idx_vector_memories_importance ON vector_memories(importance_score);
                """)
                
                # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                try:
                    cursor.execute("""
                        CREATE INDEX IF NOT EXISTS idx_vector_memories_embedding 
                        ON vector_memories 
                        USING ivfflat (embedding vector_cosine_ops) 
                        WITH (lists = 100);
                    """)
                except Exception as e:
                    print(f"‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ pgvector –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω): {e}")
                
                conn.commit()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                self._tables_created = True  # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def _generate_embedding(self, text: str) -> List[float]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI embeddings –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            import openai
            if not settings.OPENAI_API_KEY:
                print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ config.env —Ñ–∞–π–ª")
                raise Exception("OpenAI API key required")
                
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –∫–ª—é—á: {settings.OPENAI_API_KEY[:20]}...")
            
            # –ù–û–í–´–ô API –¥–ª—è OpenAI 1.0.0+
            client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.embeddings.create(
                input=text,
                model="text-embedding-ada-002"
            )
            
            embedding = response.data[0].embedding
            print(f"‚úÖ –ù–∞—Å—Ç–æ—è—â–∏–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {len(embedding)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return embedding
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            print("üí° –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ OpenAI API")
            raise Exception(f"Embedding generation failed: {e}")
    
    def add_message(self, message: Message, context: MemoryContext) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_db_available'):
                self._db_available = self._ensure_tables()
            
            if not self._db_available:
                print("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
            is_important = self._is_important_message(message, context)
            print(f"üß† VectorMemory: –°–æ–æ–±—â–µ–Ω–∏–µ '{message.content[:50]}...' –≤–∞–∂–Ω–æ–µ: {is_important}")
            
            if is_important:
                importance_score = self._calculate_importance(message, context)
                topics = self._extract_topics(message.content)
                emotions = self._detect_emotions(message.content)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                embedding = self._generate_embedding(message.content)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                conn = self._get_db_conn()
                if conn:
                    with conn.cursor() as cursor:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PostgreSQL
                        embedding_str = f"[{','.join(map(str, embedding))}]"
                        
                        cursor.execute("""
                            INSERT INTO vector_memories 
                            (user_id, content, role, timestamp, day_number, importance_score, 
                             topics, emotions, metadata, embedding)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s::vector)
                        """, 
                        (self.user_id, message.content, message.role, 
                         message.timestamp, context.day_number, importance_score,
                         json.dumps(topics), json.dumps(emotions),
                         json.dumps({
                             'message_length': len(message.content),
                             'has_question': '?' in message.content,
                             'day_context': context.day_number
                         }),
                         embedding_str)
                        )
                    
                    conn.commit()
                    print(f"üß† VectorMemory: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance_score:.2f})")
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                    self._cleanup_old_memories()
                else:
                    print("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            else:
                print(f"üß† VectorMemory: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–∞–∂–Ω–æ–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ VectorMemory: {e}")
    
    def _cleanup_old_memories(self):
        """–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
        try:
            conn = self._get_db_conn()
            if not conn:
                return
                
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute(
                    "SELECT COUNT(*) FROM vector_memories WHERE user_id = %s",
                    (self.user_id,)
                )
                count = cursor.fetchone()[0]
                
                if count > self.max_memories:
                    # –£–¥–∞–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    cursor.execute("""
                        DELETE FROM vector_memories 
                        WHERE user_id = %s 
                        AND id NOT IN (
                            SELECT id FROM vector_memories 
                            WHERE user_id = %s 
                            ORDER BY importance_score DESC 
                            LIMIT %s
                        )
                    """, (self.user_id, self.user_id, self.max_memories))
                    
                    conn.commit()
                    print(f"üß† VectorMemory: –û—á–∏—â–µ–Ω–æ {count - self.max_memories} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def get_context(self, context: MemoryContext, query: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_db_available'):
                self._db_available = self._ensure_tables()
            
            if not self._db_available:
                return "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."
            
            conn = self._get_db_conn()
            if not conn:
                return "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."
            
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                cursor.execute(
                    "SELECT COUNT(*) FROM vector_memories WHERE user_id = %s",
                    (self.user_id,)
                )
                total_count = cursor.fetchone()[0]
                
                print(f"üß† VectorMemory: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –í—Å–µ–≥–æ –≤ –ë–î: {total_count}")
                
                if total_count == 0:
                    return "–≠—Ç–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ."
                
                # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å
                if query:
                    query_embedding = self._generate_embedding(query)
                    cursor.execute("""
                        SELECT content, importance_score, topics, emotions
                        FROM vector_memories
                        WHERE user_id = %s
                        ORDER BY embedding <=> %s, importance_score DESC
                        LIMIT 5
                    """, (self.user_id, query_embedding))
                    relevant_memories = cursor.fetchall()
                else:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    cursor.execute("""
                        SELECT content, importance_score, topics, emotions
                        FROM vector_memories
                        WHERE user_id = %s
                        ORDER BY importance_score DESC
                        LIMIT 5
                    """, (self.user_id,))
                    relevant_memories = cursor.fetchall()
                
                if not relevant_memories:
                    return f"–£ –Ω–∞—Å —É–∂–µ –±—ã–ª–æ {total_count} –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_parts = [f"–ú—ã –æ–±—â–∞–µ–º—Å—è —É–∂–µ {total_count} –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."]
                
                for memory in relevant_memories:
                    if memory[1] > 0.5:  # importance_score
                        content_preview = memory[0][:100] + "..." if len(memory[0]) > 100 else memory[0]  # content
                        context_parts.append(f"–ü–æ–º–Ω—é: {content_preview}")
                
                print(f"üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {' | '.join(context_parts)}")
                return " | ".join(context_parts)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–£ –Ω–∞—Å —É–∂–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."
    
    def _search_memories(self, query: str, context: MemoryContext, limit: int = 5) -> List[Dict[str, Any]]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î"""
        try:
            if not self._ensure_tables():
                return []
            
            if not query:
                return []
            
            query_embedding = self._generate_embedding(query)
            
            conn = self._get_db_conn()
            if not conn:
                return []
                
            with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PostgreSQL
                query_embedding_str = f"[{','.join(map(str, query_embedding))}]"
                
                # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
                cursor.execute("""
                    SELECT 
                        content, role, timestamp, day_number, importance_score,
                        topics, emotions, metadata,
                        (embedding <=> %s::vector) as similarity_score
                    FROM vector_memories 
                    WHERE user_id = %s
                    ORDER BY (embedding <=> %s::vector) + (1 - importance_score)
                    LIMIT %s
                """, (query_embedding_str, self.user_id, query_embedding_str, limit))
                
                results = cursor.fetchall()
                memories = []
                for row in results:
                    memory = {
                        'content': row['content'],
                        'role': row['role'],
                        'timestamp': row['timestamp'],
                        'day_number': row['day_number'],
                        'importance_score': row['importance_score'],
                        'topics': row['topics'] or [],
                        'emotions': row['emotions'] or [],
                        'metadata': row['metadata'] or {},
                        'similarity_score': row['similarity_score']
                    }
                    memories.append(memory)
                
                return memories
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _is_important_message(self, message: Message, context: MemoryContext) -> bool:
        
        content = message.content.lower()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –º–∞—Ä–∫–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        importance_score = 0
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏–Ω–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if len(message.content) > 50:
            importance_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
        if any(pronoun in content for pronoun in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–æ–∏ ', '–º–µ–Ω—è ']):
            importance_score += 1
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—á–∞—Å—Ç–æ –≤–∞–∂–Ω—ã–µ)
        if '?' in message.content:
            importance_score += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        is_detailed = len(message.content) > 50  #
        has_questions = '?' in message.content
        is_first_person = any(pronoun in content for pronoun in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–æ–∏ ', '–º–µ–Ω—è '])
        
        final_score = importance_score
        if is_detailed: final_score += 0.5
        if has_questions: final_score += 0.3
        if is_first_person: final_score += 0.4
        
        print(f"üß† –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏: '{content[:30]}...' = {final_score:.1f} –±–∞–ª–ª–æ–≤")
        

        if final_score >= 0.5:  
            try:

                test_embedding = self._generate_embedding("test")
                print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                return True
            except Exception as e:
                print(f"‚ùå –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
                print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ OpenAI API")
                return False
        
        return False
    
    def _calculate_importance(self, message: Message, context: MemoryContext) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (0.0 - 1.0)"""
        score = 0.0
        content = message.content.lower()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (+0.4)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ö–∞—Ä–¥–∫–æ–¥ –º–∞—Ä–∫–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
        if any(pronoun in content for pronoun in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–æ–∏ ', '–º–µ–Ω—è ']):
            score += 0.4
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏ –¥–ª–∏–Ω—É
        if '!' in content or len(content) > 100:
            score += 0.3
        
        # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (+0.2)
        if len(message.content) > 100:
            score += 0.2
        
        # –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ –æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ (+0.2)
        if context.day_number <= 3:
            score += 0.2
        
        # –í–æ–ø—Ä–æ—Å—ã (+0.1)
        if '?' in message.content:
            score += 0.1
        
        return min(score, 1.0)
    
    def _extract_topics(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        content_lower = content.lower()
        topics = []
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ö–∞—Ä–¥–∫–æ–¥ —Ç–µ–º—ã
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ–∫—Å—Ç–∞
        topics = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –ø–æ –¥–ª–∏–Ω–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(content) > 50:
            topics.append("–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–∞–∑–≥–æ–≤–æ—Ä")
        if '?' in content:
            topics.append("–≤–æ–ø—Ä–æ—Å")
        if '!' in content:
            topics.append("—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ")
        
        return topics
    
    def _detect_emotions(self, content: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        content_lower = content.lower()
        emotions = []
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ —ç–º–æ—Ü–∏–π
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–∏ –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        emotions = []
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ - –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏, —Å–º–∞–π–ª–∏–∫–∏
        if '!' in content or ':)' in content or 'üòä' in content:
            emotions.append('–ø–æ–∑–∏—Ç–∏–≤')
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ - –≥—Ä—É—Å—Ç–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏
        if ':(' in content or 'üò¢' in content:
            emotions.append('–Ω–µ–≥–∞—Ç–∏–≤')
        
        # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ - –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if '?' in content:
            emotions.append('–≤–æ–ø—Ä–æ—Å')
            
        return emotions
    
    def get_user_profile(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î"""
        try:
            if not self._ensure_tables():
                return {}
            
            conn = self._get_db_conn()
            if not conn:
                return {}
                
            with conn.cursor() as cursor:
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute(
                    "SELECT COUNT(*) FROM vector_memories WHERE user_id = %s",
                    (self.user_id,)
                )
                total_count = cursor.fetchone()[0]
                
                if total_count == 0:
                    return {}
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
                cursor.execute("""
                    SELECT topics FROM vector_memories 
                    WHERE user_id = %s AND topics IS NOT NULL
                """, (self.user_id,))
                topics_result = cursor.fetchall()
                
                all_topics = []
                for row in topics_result:
                    if row['topics']:
                        all_topics.extend(row['topics'])
                
                topic_counts = {}
                for topic in all_topics:
                    topic_counts[topic] = topic_counts.get(topic, 0) + 1
                
                # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                cursor.execute("""
                    SELECT emotions FROM vector_memories 
                    WHERE user_id = %s AND emotions IS NOT NULL
                """, (self.user_id,))
                emotions_result = cursor.fetchall()
                
                all_emotions = []
                for row in emotions_result:
                    if row[0]:  # emotions
                        all_emotions.extend(row[0])
                
                emotion_counts = {}
                for emotion in all_emotions:
                    emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
                
                # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                cursor.execute("""
                    SELECT content FROM vector_memories 
                    WHERE user_id = %s AND importance_score > 0.7
                    ORDER BY importance_score DESC
                    LIMIT 10
                """, (self.user_id,))
                personal_memories = cursor.fetchall()
                
                profile = {
                    'user_id': self.user_id,
                    'total_messages': total_count,
                    'favorite_topics': sorted(topic_counts.items(), key=lambda x: x[1], reverse=True)[:5],
                    'emotional_profile': emotion_counts,
                    'personal_info': {
                        'has_name': any('—è ' in m['content'].lower() for m in personal_memories),
                        'has_profession': any('—Ä–∞–±–æ—Ç' in m['content'].lower() for m in personal_memories),
                        'details_shared': len(personal_memories)
                    }
                }
                
                return profile
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {}
    
    def search_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        context = MemoryContext(user_id=self.user_id)
        return self._search_memories(query, context, limit)
    
    def summarize_conversation(self, messages: List[Message]) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not messages:
            return "–†–∞–∑–≥–æ–≤–æ—Ä –ø—É—Å—Ç."
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if not self._ensure_tables():
                return f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π."
            
            conn = self._get_db_conn()
            if not conn:
                return f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π."
                
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("""
                    SELECT content, topics, emotions
                    FROM vector_memories 
                    WHERE user_id = %s AND importance_score > 0.6
                    ORDER BY importance_score DESC
                    LIMIT 5
                """, (self.user_id,))
                important_memories = cursor.fetchall()
                
                if not important_memories:
                    return f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π."
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ —ç–º–æ—Ü–∏–∏
                all_topics = []
                all_emotions = []
                
                for memory in important_memories:
                    if memory['topics']:
                        all_topics.extend(memory['topics'])
                    if memory['emotions']:
                        all_emotions.extend(memory['emotions'])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
                topic_counts = {}
                for topic in all_topics:
                    topic_counts[topic] = topic_counts.get(topic, 0) + 1
                
                emotion_counts = {}
                for emotion in all_emotions:
                    emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                summary_parts = [f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"]
                
                if topic_counts:
                    top_topics = sorted(topic_counts.items(), key=lambda x: x[1], reverse=True)[:3]
                    summary_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join([topic for topic, _ in top_topics])}")
                
                if emotion_counts:
                    top_emotions = sorted(emotion_counts.items(), key=lambda x: x[1], reverse=True)[:3]
                    summary_parts.append(f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏: {', '.join([emotion for emotion, _ in top_emotions])}")
                
                return ". ".join(summary_parts)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π."
    
    def clear_memory(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self._ensure_tables():
                return
                
            conn = self._get_db_conn()
            if not conn:
                return
                
            with conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM vector_memories WHERE user_id = %s",
                    (self.user_id,)
                )
                conn.commit()
                print(f"üß† VectorMemory: –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id} –æ—á–∏—â–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if hasattr(self, '_db_conn') and self._db_conn and not self._db_conn.closed:
            self._db_conn.close() 
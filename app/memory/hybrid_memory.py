
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from .base import MemoryAdapter, Message, MemoryContext
from .enhanced_buffer_memory import EnhancedBufferMemory
from .vector_memory import VectorMemory
from .langchain_memory import LangChainMemory

class HybridMemory(MemoryAdapter):
 
    
    def __init__(self, user_id: str, short_memory_size: int = 15, long_memory_size: int = 1000):
        self.user_id = user_id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            from ..config.settings import settings
            memory_type = getattr(settings, 'LONG_MEMORY_TYPE', 'intelligent')
        except ImportError:
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            memory_type = 'intelligent'
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
        self.short_memory = EnhancedBufferMemory(user_id, max_messages=short_memory_size)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if memory_type == 'intelligent':
            try:
                self.long_memory = LangChainMemory(user_id, max_memories=long_memory_size)
                self.is_intelligent = True
                print(f"üß† HybridMemory: Using LangChain Memory for {user_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to initialize LangChain Memory: {e}")
                print(f"üß† HybridMemory: Falling back to VectorMemory for {user_id}")
                self.long_memory = VectorMemory(user_id, max_memories=long_memory_size)
                self.is_intelligent = False
        else:
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏
            self.long_memory = VectorMemory(user_id, max_memories=long_memory_size)
            self.is_intelligent = False
            print(f"üß† HybridMemory: Using VectorMemory for {user_id}")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.total_messages = 0
        self.conversation_start = datetime.utcnow()
        
    def add_message(self, message: Message, context: MemoryContext) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        self.total_messages += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        self.short_memory.add_message(message, context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)
        self.long_memory.add_message(message, context)
    
    def get_context(self, context: MemoryContext, query: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º –ø–∞–º—è—Ç–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        short_context = self.short_memory.get_context(context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        if self.is_intelligent and query:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
            long_context = self.long_memory.get_context_with_search(query, context)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            long_context = self.long_memory.get_context(context, query)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—â–µ–Ω–∏—è
        days_communicating = (datetime.utcnow() - self.conversation_start).days + 1
        communication_stats = f"–î–µ–Ω—å –æ–±—â–µ–Ω–∏—è: {context.day_number} | –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        context_parts = [communication_stats]
        
        if long_context and long_context != "–≠—Ç–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ.":
            context_parts.append(f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {long_context}")
        
        if short_context:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ BufferMemory
            if "\n" in short_context:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                lines = short_context.split('\n')
                key_info_line = None
                for line in lines:
                    if line.startswith("–ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"):
                        key_info_line = line
                        break
                
                if key_info_line:
                    context_parts.append(key_info_line)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                recent_messages = self.short_memory.messages[-5:] if self.short_memory.messages else []
                if recent_messages:
                    recent_content = [f"{msg.role}: {msg.content}" for msg in recent_messages]
                    context_parts.append(f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {' | '.join(recent_content)}")
                else:
                    context_parts.append("–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–∫–∞ –Ω–µ—Ç")
            else:
                context_parts.append(f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {short_context}")
        
        return " | ".join(context_parts)
    
    def get_user_profile(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
            'name': 'Test User',
            'age': 25,
            'interests': [],
            'recent_mood': 'neutral',
            'activity_level': 'moderate',
            'relationship_stage': 'introduction',
            'favorite_topics': [],
            'communication_style': 'casual'
        }
    
    def _analyze_recent_mood(self, recent_text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        if '!' in recent_text or ':)' in recent_text:
            return 'positive'
        elif ':(' in recent_text or 'üò¢' in recent_text:
            return 'negative'
        else:
            return 'neutral'

    
    def _calculate_activity_level(self) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.total_messages < 5:
            return 'new'
        elif self.total_messages < 20:
            return 'moderate'
        elif self.total_messages < 50:
            return 'active'
        else:
            return 'very_active'
    
    def get_conversation_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
            'relationship_stage': 'introduction',
            'communication_patterns': {'style': 'casual', 'frequency': 'regular'},
            'suggested_topics': [],
            'emotional_journey': {'current_mood': 'neutral', 'trend': 'stable'},
            'personalization_level': 0.5
        }
    
    def _determine_relationship_stage(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–¥–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        profile = self.long_memory.get_user_profile()
        
        if not profile:
            return 'introduction'
        
        personal_info = profile.get('personal_info', {})
        total_messages = profile.get('total_messages', 0)
        communication_days = profile.get('communication_days', 1)
        
        if total_messages < 5:
            return 'introduction'
        elif not personal_info.get('has_name', False) and total_messages < 10:
            return 'getting_acquainted'
        elif personal_info.get('has_name', False) and total_messages < 30:
            return 'building_trust'
        elif personal_info.get('has_profession', False) and communication_days > 3:
            return 'close_friend'
        else:
            return 'confidant'
    
    def _analyze_communication_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—â–µ–Ω–∏—è"""
        recent_messages = self.short_memory.messages
        
        if len(recent_messages) < 3:
            return {'pattern': 'insufficient_data'}
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        user_messages = [msg for msg in recent_messages if msg.role == 'user']
        avg_length = sum(len(msg.content) for msg in user_messages) / len(user_messages) if user_messages else 0
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_count = sum(1 for msg in user_messages if '?' in msg.content)
        question_ratio = questions_count / len(user_messages) if user_messages else 0
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        emotional_indicators = ['!', 'üòä', 'üò¢', '?']
        emotional_messages = sum(1 for msg in user_messages 
                               if any(indicator in msg.content for indicator in emotional_indicators))
        emotional_ratio = emotional_messages / len(user_messages) if user_messages else 0
        
        return {
            'message_length': 'long' if avg_length > 100 else 'short' if avg_length < 30 else 'medium',
            'question_frequency': 'high' if question_ratio > 0.5 else 'low' if question_ratio < 0.2 else 'medium',
            'emotional_expression': 'high' if emotional_ratio > 0.6 else 'low' if emotional_ratio < 0.3 else 'medium',
            'communication_style': self._determine_communication_style(avg_length, question_ratio, emotional_ratio)
        }
    
    def _determine_communication_style(self, avg_length: float, question_ratio: float, emotional_ratio: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if avg_length > 100 and emotional_ratio > 0.5:
            return 'expressive_storyteller'
        elif question_ratio > 0.6:
            return 'curious_questioner'
        elif avg_length < 30 and question_ratio < 0.2:
            return 'laconic_responder'
        elif emotional_ratio > 0.7:
            return 'emotional_sharer'
        else:
            return 'balanced_conversationalist'
    
    def _suggest_topics(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = self.long_memory.get_user_profile()
        
        if not profile or not profile.get('favorite_topics'):
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        favorite_topics = [topic[0] for topic in profile['favorite_topics']]
        
        related_topics = {}
        
        suggestions = []
        for topic in favorite_topics:
            suggestions.extend(related_topics.get(topic, []))
        
        return list(set(suggestions))[:5]
    
    def _track_emotional_journey(self) -> List[Dict[str, Any]]:
        """–û—Ç—Å–ª–µ–¥–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        long_term_memories = self.long_memory.memories
        
        if not long_term_memories:
            return []
        
        emotional_timeline = []
        for memory in sorted(long_term_memories, key=lambda x: x['timestamp']):
            emotions = memory.get('emotions', [])
            if emotions and emotions[0] != '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ':
                emotional_timeline.append({
                    'day': memory['day_number'],
                    'emotion': emotions[0],
                    'context': memory['content'][:50] + '...',
                    'importance': memory['importance_score']
                })
        
        return emotional_timeline[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    
    def _calculate_personalization_level(self) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (0.0 - 1.0)"""
        profile = self.long_memory.get_user_profile()
        
        if not profile:
            return 0.0
        
        score = 0.0
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        personal_info = profile.get('personal_info', {})
        if personal_info.get('has_name'):
            score += 0.3
        if personal_info.get('has_profession'):
            score += 0.2
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è
        total_messages = profile.get('total_messages', 0)
        if total_messages > 10:
            score += 0.2
        if total_messages > 50:
            score += 0.1
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å
        emotional_profile = profile.get('emotional_profile', {})
        if len(emotional_profile) > 3:
            score += 0.1
        
        # –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã
        favorite_topics = profile.get('favorite_topics', [])
        if len(favorite_topics) > 2:
            score += 0.1
        
        return min(score, 1.0)
    
    def search_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        return self.long_memory.search_memory(query, limit)
    
    def generate_intelligent_answer(self, question: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏)
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –û—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        if self.is_intelligent and hasattr(self.long_memory, 'generate_answer_with_context'):
            return self.long_memory.generate_answer_with_context(question)
        else:
            return {
                "question": question,
                "answer": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏.",
                "context_found": False,
                "error": "intelligent_memory_not_available"
            }
    
    def add_document_to_memory(self, content: str, metadata: Optional[Dict[str, Any]] = None) -> Optional[str]:
        """
        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏)
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            str: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        if self.is_intelligent and hasattr(self.long_memory, 'add_document'):
            return self.long_memory.add_document(content, metadata)
        else:
            print("‚ö†Ô∏è Document storage not supported in current memory configuration")
            return None
    
    def summarize_conversation(self, messages: List[Message]) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        return self.long_memory.summarize_conversation(messages)
    
    def clear_memory(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.short_memory.clear_memory()
        self.long_memory.clear_memory()
        self.total_messages = 0
        self.conversation_start = datetime.utcnow()
    
    def get_user_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MemoryLevelsManager)"""
        days_since_start = (datetime.utcnow() - self.conversation_start).days + 1
        return {
            'days_since_start': days_since_start,
            'total_messages': self.total_messages,
            'conversation_start': self.conversation_start,
            'activity_level': self._calculate_activity_level()
        } 
"""
–£—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç 4-—É—Ä–æ–≤–Ω–µ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–∞–º—è—Ç–∏: Short-Term, Episodic, Long-Term, Summary
–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞ - –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import logging
import asyncio
from typing import List, Dict, Any, Optional, Union
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞–º—è—Ç–∏
from .short_memory import ShortMemory
from .intelligent_vector_memory import IntelligentVectorMemory
from .enhanced_buffer_memory import EnhancedBufferMemory
from .base import Message, MemoryContext, MemoryAdapter

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from ..config.production_config_manager import get_config
    CONFIG_MANAGER_AVAILABLE = True
except ImportError:
    CONFIG_MANAGER_AVAILABLE = False


class MemoryLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    SHORT_TERM = "short_term"      
    EPISODIC = "episodic"          
    LONG_TERM = "long_term"        
    SUMMARY = "summary"           


@dataclass
class MemorySearchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏"""
    content: str
    source_level: MemoryLevel
    relevance_score: float
    metadata: Dict[str, Any]
    created_at: datetime


@dataclass
class MemoryEpisode:
    """–≠–ø–∏–∑–æ–¥ –ø–∞–º—è—Ç–∏ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    episode_id: str
    user_id: str
    start_time: datetime
    end_time: datetime
    messages_count: int
    summary: str
    emotions: List[str]
    topics: List[str]
    importance_score: float
    key_facts: List[str]


class MemoryLevelsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–∞–º—è—Ç–∏
    –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    
    def __init__(self, user_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.user_id = user_id
        self.logger = logging.getLogger(f"{__name__}.{user_id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏
        self.short_term: Optional[ShortMemory] = None
        self.long_term: Optional[IntelligentVectorMemory] = None
        self.episodic_storage: List[MemoryEpisode] = []
        self.summary_storage: List[Dict[str, Any]] = []
        
        self._initialize_memory_levels()
        
        self.logger.info(f"MemoryLevelsManager initialized for user {user_id}")
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞"""
        if CONFIG_MANAGER_AVAILABLE:
            try:
                return {
                    **get_config('memory_levels_config', self.user_id, {}),
                    **get_config('enhanced_memory_config', self.user_id, {}).get('features', {})
                }
            except Exception as e:
                self.logger.warning(f"Failed to load config: {e}")
        
        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return {
            'short_term': {
                'max_messages': 15,
                'enabled': True
            },
            'episodic': {
                'auto_save_threshold': 20,  # —Å–æ–æ–±—â–µ–Ω–∏–π
                'min_session_duration': 300,  # —Å–µ–∫—É–Ω–¥
                'enabled': True
            },
            'long_term': {
                'min_importance': 0.6,
                'max_documents': 1000,
                'enabled': True
            },
            'summary': {
                'trigger_threshold': 10,  # —Å–æ–æ–±—â–µ–Ω–∏–π
                'max_summaries': 50,
                'enabled': True
            },
            'search_strategy': {
                'check_short_term_first': True,
                'fallback_to_long_term': True,
                'combine_results': True,
                'max_results_per_level': 5
            }
        }
    
    def _initialize_memory_levels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏"""
        try:
            # Short-Term Memory
            if self.config.get('short_term', {}).get('enabled', True):
                max_messages = self.config.get('short_term', {}).get('max_messages', 15)
                self.short_term = ShortMemory(self.user_id, max_messages)
                self.logger.debug("Short-term memory initialized")
            
            # Long-Term Memory (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è)
            if self.config.get('long_term', {}).get('enabled', True):
                self.long_term = IntelligentVectorMemory(self.user_id)
                self.logger.debug("Long-term memory initialized")
            
            self.logger.info("Memory levels initialized successfully")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize memory levels: {e}")
    
    def add_message(self, message: Message, context: MemoryContext) -> Dict[str, bool]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        """
        results = {}
        
        print(f"üß† [MEMORY-{context.user_id}] –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –ø–∞–º—è—Ç—å...")
        print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: '{message.content[:50]}...'")
        print(f"   –†–æ–ª—å: {message.role}")
        
        try:
            # 1. Short-Term Memory (–≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º)
            print(f"üìù [MEMORY-{context.user_id}] –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å...")
            if self.short_term:
                self.short_term.add_message(message.role, message.content, message.metadata)
                results['short_term'] = True
                print(f"‚úÖ [MEMORY-{context.user_id}] –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å")
                self.logger.debug("Message added to short-term memory")
            else:
                print(f"‚ùå [MEMORY-{context.user_id}] –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
                results['short_term'] = False
            
            # 2. –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
            print(f"üóÑÔ∏è [MEMORY-{context.user_id}] –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ø–µ—Ä–µ–Ω–æ—Å –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î...")
            if self.long_term:
                # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                min_importance = self.config.get('long_term', {}).get('min_importance', 0.1)
                print(f"üìä [MEMORY-{context.user_id}] –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {min_importance}")
                
                added_to_long_term = self.long_term.add_message_to_memory(
                    message, context, min_importance
                )
                results['long_term'] = added_to_long_term
                if added_to_long_term:
                    print(f"‚úÖ [MEMORY-{context.user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
                else:
                    print(f"‚ö†Ô∏è [MEMORY-{context.user_id}] –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
            else:
                print(f"‚ùå [MEMORY-{context.user_id}] –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
                results['long_term'] = False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞
            if self._should_create_episode():
                episode = self._create_episode_from_short_term()
                if episode:
                    self.episodic_storage.append(episode)
                    results['episodic'] = True
                    self.logger.debug("Episode created and stored")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if self._should_create_summary():
                summary = self._create_summary_from_short_term()
                if summary:
                    self.summary_storage.append(summary)
                    results['summary'] = True
                    self.logger.debug("Summary created and stored")
            
            return results
            
        except Exception as e:
            self.logger.error(f"Failed to add message to memory levels: {e}")
            return {}
    
    def search_memory(self, query: str, levels: List[MemoryLevel] = None,
                     max_results: int = None) -> List[MemorySearchResult]:
        """
        –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º –ø–∞–º—è—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            levels: –£—Ä–æ–≤–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ None - –≤—Å–µ)
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        """
        try:
            if levels is None:
                levels = [MemoryLevel.SHORT_TERM, MemoryLevel.LONG_TERM, 
                         MemoryLevel.EPISODIC, MemoryLevel.SUMMARY]
            
            all_results = []
            search_config = self.config.get('search_strategy', {})
            max_per_level = search_config.get('max_results_per_level', 5)
            
            # 1. Short-Term Memory –ø–æ–∏—Å–∫
            if MemoryLevel.SHORT_TERM in levels and self.short_term:
                short_results = self._search_short_term(query, max_per_level)
                all_results.extend(short_results)
            
            # 2. Long-Term Memory –ø–æ–∏—Å–∫ (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π)
            if MemoryLevel.LONG_TERM in levels and self.long_term:
                long_results = self._search_long_term(query, max_per_level)
                all_results.extend(long_results)
            
            # 3. Episodic Memory –ø–æ–∏—Å–∫
            if MemoryLevel.EPISODIC in levels:
                episodic_results = self._search_episodic(query, max_per_level)
                all_results.extend(episodic_results)
            
            # 4. Summary Memory –ø–æ–∏—Å–∫
            if MemoryLevel.SUMMARY in levels:
                summary_results = self._search_summary(query, max_per_level)
                all_results.extend(summary_results)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            all_results.sort(key=lambda x: x.relevance_score, reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            max_results = max_results or search_config.get('max_total_results', 15)
            return all_results[:max_results]
            
        except Exception as e:
            self.logger.error(f"Failed to search memory: {e}")
            return []
    
    def _search_short_term(self, query: str, max_results: int) -> List[MemorySearchResult]:
        """–ü–æ–∏—Å–∫ –≤ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏"""
        results = []
        
        try:
            if not self.short_term:
                return results
            
            messages = self.short_term.get_context()
            query_lower = query.lower()
            
            for msg in messages:
                content = msg.get('text', '')
                if query_lower in content.lower():
                    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    relevance = len([w for w in query_lower.split() 
                                   if w in content.lower()]) / len(query.split())
                    
                    results.append(MemorySearchResult(
                        content=content,
                        source_level=MemoryLevel.SHORT_TERM,
                        relevance_score=relevance,
                        metadata=msg,
                        created_at=datetime.fromisoformat(msg.get('timestamp', datetime.utcnow().isoformat()))
                    ))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            results.sort(key=lambda x: x.relevance_score, reverse=True)
            return results[:max_results]
            
        except Exception as e:
            self.logger.error(f"Failed to search short-term memory: {e}")
            return []
    
    def _search_long_term(self, query: str, max_results: int) -> List[MemorySearchResult]:
        """–ü–æ–∏—Å–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        results = []
        
        try:
            if not self.long_term:
                return results
            
            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
            print(f"üîç [MEMORY-LEVELS-{self.user_id}] –ü–æ–∏—Å–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: '{query}'")
            search_results = self.long_term.search_similar(query, max_results)
            print(f"üîç [MEMORY-LEVELS-{self.user_id}] search_similar –≤–µ—Ä–Ω—É–ª {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            for i, result in enumerate(search_results):
                print(f"üîç [MEMORY-LEVELS-{self.user_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: similarity_score={result.get('similarity_score')}, content='{result.get('content', '')[:50]}...'")
                
                results.append(MemorySearchResult(
                    content=result['content'],
                    source_level=MemoryLevel.LONG_TERM,
                    relevance_score=result['similarity_score'],
                    metadata=result['metadata'],
                    created_at=datetime.fromisoformat(
                        result['metadata'].get('created_at', datetime.utcnow().isoformat())
                    )
                ))
            
            return results
            
        except Exception as e:
            self.logger.error(f"Failed to search long-term memory: {e}")
            return []
    
    def _search_episodic(self, query: str, max_results: int) -> List[MemorySearchResult]:
        """–ü–æ–∏—Å–∫ –≤ —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏"""
        results = []
        
        try:
            query_lower = query.lower()
            
            for episode in self.episodic_storage:
                # –ü–æ–∏—Å–∫ –≤ —Ä–µ–∑—é–º–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–∞—Ö
                relevance = 0.0
                search_text = f"{episode.summary} {' '.join(episode.key_facts)}".lower()
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                for word in query_lower.split():
                    if word in search_text:
                        relevance += 0.2
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—ã
                for topic in episode.topics:
                    if topic.lower() in query_lower:
                        relevance += 0.3
                
                if relevance > 0:
                    results.append(MemorySearchResult(
                        content=episode.summary,
                        source_level=MemoryLevel.EPISODIC,
                        relevance_score=relevance,
                        metadata={
                            'episode_id': episode.episode_id,
                            'messages_count': episode.messages_count,
                            'topics': episode.topics,
                            'emotions': episode.emotions,
                            'key_facts': episode.key_facts
                        },
                        created_at=episode.start_time
                    ))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            results.sort(key=lambda x: x.relevance_score, reverse=True)
            return results[:max_results]
            
        except Exception as e:
            self.logger.error(f"Failed to search episodic memory: {e}")
            return []
    
    def _search_summary(self, query: str, max_results: int) -> List[MemorySearchResult]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ —Ä–µ–∑—é–º–µ"""
        results = []
        
        try:
            query_lower = query.lower()
            
            for summary in self.summary_storage:
                content = summary.get('summary_text', '')
                if query_lower in content.lower():
                    relevance = len([w for w in query_lower.split() 
                                   if w in content.lower()]) / len(query.split())
                    
                    results.append(MemorySearchResult(
                        content=content,
                        source_level=MemoryLevel.SUMMARY,
                        relevance_score=relevance,
                        metadata=summary,
                        created_at=datetime.fromisoformat(
                            summary.get('created_at', datetime.utcnow().isoformat())
                        )
                    ))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            results.sort(key=lambda x: x.relevance_score, reverse=True)
            return results[:max_results]
            
        except Exception as e:
            self.logger.error(f"Failed to search summary memory: {e}")
            return []
    
    def _should_create_episode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥"""
        if not self.short_term:
            return False
        
        config = self.config.get('episodic', {})
        if not config.get('enabled', True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        stats = self.short_term.get_stats()
        buffer_size = stats.get('buffer_size', 0)
        threshold = config.get('auto_save_threshold', 20)
        
        return buffer_size >= threshold
    
    def _should_create_summary(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ"""
        if not self.short_term:
            return False
        
        config = self.config.get('summary', {})
        if not config.get('enabled', True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        stats = self.short_term.get_stats()
        buffer_size = stats.get('buffer_size', 0)
        threshold = config.get('trigger_threshold', 10)
        
        return buffer_size >= threshold
    
    def _create_episode_from_short_term(self) -> Optional[MemoryEpisode]:
        """–°–æ–∑–¥–∞–µ—Ç —ç–ø–∏–∑–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            if not self.short_term:
                return None
            
            stats = self.short_term.get_stats()
            messages = self.short_term.get_context()
            
            if not messages:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–ø–∏–∑–æ–¥–∞
            episode_id = f"ep_{self.user_id}_{int(datetime.utcnow().timestamp())}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
            start_time = datetime.fromisoformat(messages[0]['timestamp'])
            end_time = datetime.fromisoformat(messages[-1]['timestamp'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ —ç–ø–∏–∑–æ–¥–∞
            summary = self._generate_episode_summary(messages)
            
            episode = MemoryEpisode(
                episode_id=episode_id,
                user_id=self.user_id,
                start_time=start_time,
                end_time=end_time,
                messages_count=len(messages),
                summary=summary,
                emotions=stats.get('detected_emotions', []),
                topics=stats.get('detected_topics', []),
                importance_score=stats.get('avg_importance', 0.5),
                key_facts=self._extract_key_facts(messages)
            )
            
            return episode
            
        except Exception as e:
            self.logger.error(f"Failed to create episode: {e}")
            return None
    
    def _create_summary_from_short_term(self) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            if not self.short_term:
                return None
            
            messages = self.short_term.get_context()
            if not messages:
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            summary_text = self._generate_conversation_summary(messages)
            
            return {
                'summary_text': summary_text,
                'created_at': datetime.utcnow().isoformat(),
                'messages_count': len(messages),
                'user_id': self.user_id
            }
            
        except Exception as e:
            self.logger.error(f"Failed to create summary: {e}")
            return None
    
    def _generate_episode_summary(self, messages: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ —ç–ø–∏–∑–æ–¥–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ LLM)
        user_messages = [m for m in messages if m.get('role') == 'user']
        assistant_messages = [m for m in messages if m.get('role') == 'assistant']
        
        topics = set()
        emotions = set()
        
        for msg in messages:
            topics.update(msg.get('topics', []))
            emotion = msg.get('emotion_tag')
            if emotion and emotion != '–Ω–µ—Ç':
                emotions.add(emotion)
        
        summary = f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π. "
        summary += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª {len(user_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, "
        summary += f"–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª {len(assistant_messages)} —Ä–∞–∑. "
        
        if topics:
            summary += f"–û–±—Å—É–∂–¥–∞–ª–∏—Å—å —Ç–µ–º—ã: {', '.join(topics)}. "
        
        if emotions:
            summary += f"–≠–º–æ—Ü–∏–∏: {', '.join(emotions)}."
        
        return summary
    
    def _generate_conversation_summary(self, messages: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ LLM
        return f"–†–µ–∑—é–º–µ –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {datetime.utcnow().strftime('%Y-%m-%d %H:%M')}"
    
    def _extract_key_facts(self, messages: List[Dict[str, Any]]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        facts = []
        
 
        has_personal_info = any(pronoun in content.lower() for pronoun in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–µ–Ω—è '])
        
        for msg in messages:
            content = msg.get('text', '').lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
            if any(pronoun in content for pronoun in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–µ–Ω—è ']):
                if len(content) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    facts.append(msg.get('text', ''))
        
        return facts
    
    def get_memory_overview(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±–∑–æ—Ä –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
        """
        try:
            overview = {
                'user_id': self.user_id,
                'levels': {}
            }
            
            # Short-Term Memory
            if self.short_term:
                stats = self.short_term.get_stats()
                overview['levels']['short_term'] = {
                    'status': 'active',
                    **stats
                }
            else:
                overview['levels']['short_term'] = {'status': 'disabled'}
            
            # Long-Term Memory
            if self.long_term:
                stats = self.long_term.get_memory_stats()
                overview['levels']['long_term'] = stats
            else:
                overview['levels']['long_term'] = {'status': 'disabled'}
            
            # Episodic Memory
            overview['levels']['episodic'] = {
                'status': 'active',
                'total_episodes': len(self.episodic_storage),
                'recent_episodes': len([e for e in self.episodic_storage 
                                      if e.end_time > datetime.utcnow() - timedelta(days=7)])
            }
            
            # Summary Memory
            overview['levels']['summary'] = {
                'status': 'active',
                'total_summaries': len(self.summary_storage),
                'recent_summaries': len([s for s in self.summary_storage 
                                       if datetime.fromisoformat(s['created_at']) > datetime.utcnow() - timedelta(days=7)])
            }
            
            return overview
            
        except Exception as e:
            self.logger.error(f"Failed to get memory overview: {e}")
            return {'error': str(e)}
    
    def get_user_profile(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å HybridMemory)"""
        try:
            if self.long_term and hasattr(self.long_term, 'get_user_profile'):
                return self.long_term.get_user_profile()
            else:
                # Fallback –ø—Ä–æ—Ñ–∏–ª—å
                return {
                    'name': 'Test User',
                    'age': 25,
                    'interests': [],
                    'recent_mood': 'neutral',
                    'activity_level': 'moderate',
                    'relationship_stage': 'introduction',
                    'favorite_topics': [],
                    'communication_style': 'casual'
                }
        except Exception as e:
            self.logger.warning(f"Failed to get user profile: {e}")
            return {}
    
    def get_conversation_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å HybridMemory)"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return {
                'relationship_stage': 'introduction',
                'communication_patterns': {'style': 'casual', 'frequency': 'regular'},
                'suggested_topics': [],
                'emotional_journey': {'current_mood': 'neutral', 'trend': 'stable'},
                'personalization_level': 0.5,
                'recent_mood': 'neutral',
                'activity_level': 'moderate'
            }
        except Exception as e:
            self.logger.warning(f"Failed to get conversation insights: {e}")
            return {}
    
    def get_user_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å HybridMemory)"""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_messages = 0
            if self.short_term and hasattr(self.short_term, 'messages'):
                total_messages = len(self.short_term.messages)
            
            return {
                'days_since_start': 1,  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                'total_messages': total_messages,
                'conversation_start': datetime.utcnow(),
                'activity_level': 'moderate'
            }
        except Exception as e:
            self.logger.warning(f"Failed to get user stats: {e}")
            return {'days_since_start': 1, 'total_messages': 0}


# –§—É–Ω–∫—Ü–∏—è-—Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
def create_memory_levels_manager(user_id: str) -> MemoryLevelsManager:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
    """
    return MemoryLevelsManager(user_id)

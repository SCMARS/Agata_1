"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–∞–º—è—Ç–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedMemoryManager –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from typing import Dict, Optional

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–∞–º—è—Ç–∏
_memory_instances: Dict[str, 'UnifiedMemoryManager'] = {}

def get_unified_memory(user_id: str) -> Optional['UnifiedMemoryManager']:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedMemoryManager –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        UnifiedMemoryManager instance –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    global _memory_instances
    
    if user_id not in _memory_instances:
        try:
            from .unified_memory import UnifiedMemoryManager
            _memory_instances[user_id] = UnifiedMemoryManager(user_id)
            logger.info(f"‚úÖ [GLOBAL] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π UnifiedMemoryManager –¥–ª—è {user_id}")
            print(f"‚úÖ [GLOBAL] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π UnifiedMemoryManager –¥–ª—è {user_id}")
        except Exception as e:
            logger.error(f"‚ùå [GLOBAL] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UnifiedMemoryManager –¥–ª—è {user_id}: {e}")
            print(f"‚ùå [GLOBAL] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UnifiedMemoryManager –¥–ª—è {user_id}: {e}")
            return None
    else:
        logger.debug(f"üîÑ [GLOBAL] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UnifiedMemoryManager –¥–ª—è {user_id}")
        print(f"üîÑ [GLOBAL] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UnifiedMemoryManager –¥–ª—è {user_id}")
    
    return _memory_instances[user_id]

def clear_memory_cache(user_id: Optional[str] = None):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –∏–ª–∏ None –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö
    """
    global _memory_instances
    
    if user_id:
        if user_id in _memory_instances:
            del _memory_instances[user_id]
            logger.info(f"üóëÔ∏è [GLOBAL] –û—á–∏—â–µ–Ω –∫—ç—à –ø–∞–º—è—Ç–∏ –¥–ª—è {user_id}")
            print(f"üóëÔ∏è [GLOBAL] –û—á–∏—â–µ–Ω –∫—ç—à –ø–∞–º—è—Ç–∏ –¥–ª—è {user_id}")
    else:
        _memory_instances.clear()
        logger.info(f"üóëÔ∏è [GLOBAL] –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à –ø–∞–º—è—Ç–∏")
        print(f"üóëÔ∏è [GLOBAL] –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à –ø–∞–º—è—Ç–∏")

def get_memory_stats() -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ø–∞–º—è—Ç–∏"""
    return {
        "cached_users": len(_memory_instances),
        "user_ids": list(_memory_instances.keys())
    }

"""
Message Controller - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —á–∞—Å—Ç–æ—Ç–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import re
import random
from typing import List, Dict, Any, Tuple
from datetime import datetime

class MessageController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ß–∞—Å—Ç–æ—Ç–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤
    - –†–∞–∑–±–∏–µ–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞—É–∑ –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π
    """
    
    def __init__(self, max_message_length: int = 150, question_frequency: int = 3):
        self.max_message_length = max_message_length
        self.question_frequency = question_frequency  
        self.question_counter = 0
        self.conversation_topics = []  
        self.last_questions = []  
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.split_patterns = [
            r'[.!?]+\s+',  # –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            r',\s+(?=\w+)',  # –ü–æ –∑–∞–ø—è—Ç—ã–º –ø–µ—Ä–µ–¥ –∑–Ω–∞—á–∏–º—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            r'\s+(?=–Ω–æ|–æ–¥–Ω–∞–∫–æ|–ø—Ä–∏ —ç—Ç–æ–º|–∫—Ä–æ–º–µ —Ç–æ–≥–æ|–∫—Å—Ç–∞—Ç–∏)',  # –ü–æ —Å–æ—é–∑–∞–º
            r'\s+(?=\d+\.)',  # –ü–µ—Ä–µ–¥ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
        ]
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–∞—É–∑
        self.pause_triggers = {
            '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ': ['—Ö–º', '–¥—É–º–∞—é', '—Ä–∞–∑–º—ã—à–ª—è—é', '–∫–∞–∂–µ—Ç—Å—è'],
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['–æ–≥–æ', '–≤–∞—É', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ'],
            '—ç–º–æ—Ü–∏—è': ['!', '–æ—á–µ–Ω—å', '—Å–∏–ª—å–Ω–æ', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ'],
            '–≤–æ–ø—Ä–æ—Å': ['?', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–∞ —á—Ç–æ –µ—Å–ª–∏', '–º–æ–∂–µ—Ç –±—ã—Ç—å']
        }
    
    def process_message(self, content: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            'parts': List[str],  # –†–∞–∑–±–∏—Ç—ã–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            'has_question': bool,  # –ï—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            'delays_ms': List[int]  # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –≤ –º—Å
        }
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_topics = self._extract_conversation_topics(content)
        for topic in current_topics:
            if topic not in self.conversation_topics:
                self.conversation_topics.append(topic)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–µ–º
        if len(self.conversation_topics) > 10:
            self.conversation_topics = self.conversation_topics[-10:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        has_existing_question = '?' in content
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
        should_add_question = self._should_add_question(context)
        
        final_content = content
        final_has_question = has_existing_question
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫—É
        # 2. –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞
        if should_add_question and not has_existing_question:
            contextual_question = self._generate_contextual_question(context)
            final_content = f"{content} {contextual_question}"
            final_has_question = True
            print(f"üîç MessageController: –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: {contextual_question}")
        elif has_existing_question:
            print(f"üîç MessageController: –í–æ–ø—Ä–æ—Å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ")
        else:
            print(f"üîç MessageController: –í–æ–ø—Ä–æ—Å –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω (—Å—á–µ—Ç—á–∏–∫: {self.question_counter})")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(final_content) > self.max_message_length:
            print(f"üîÑ –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(final_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            parts = self._split_long_message(final_content)
            print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(parts)} —á–∞—Å—Ç–µ–π")
        else:
            parts = [final_content]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
        delays = self._calculate_delays(parts, context)
        
        return {
            'parts': parts,
            'has_question': final_has_question,
            'delays_ms': delays
        }
    
    def _extract_conversation_topics(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        topics = []
        content_lower = content.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
        topic_keywords = {
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∫–∞—Ä—å–µ—Ä–∞', '–∫–æ–ª–ª–µ–≥–∏', '–ø—Ä–æ–µ–∫—Ç', '–æ—Ñ–∏—Å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫'],
            '—Å–µ–º—å—è': ['—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–º–∞–º–∞', '–ø–∞–ø–∞', '–∂–µ–Ω–∞', '–º—É–∂', '–¥–µ—Ç–∏', '—Å—ã–Ω', '–¥–æ—á—å'],
            '—Ö–æ–±–±–∏': ['—Ö–æ–±–±–∏', '—É–≤–ª–µ—á–µ–Ω–∏—è', '—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä—ã', '—á—Ç–µ–Ω–∏–µ', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ', '–±–æ–ª–µ–∑–Ω—å', '–≤—Ä–∞—á', '–ª–µ—á–µ–Ω–∏–µ', '—Å–ø–æ—Ä—Ç'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–æ—Ç–ø—É—Å–∫', '—Å—Ç—Ä–∞–Ω–∞', '–≥–æ—Ä–æ–¥', '–ø–æ–µ–∑–¥–∫–∞', '–æ—Ç–¥—ã—Ö'],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['—É—á–µ–±–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∫—É—Ä—Å—ã', '–∏–∑—É—á–µ–Ω–∏–µ', '–∑–Ω–∞–Ω–∏—è', '—ç–∫–∑–∞–º–µ–Ω'],
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–¥—Ä—É–∑—å—è', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '—Å–≤–∏–¥–∞–Ω–∏–µ', '–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ'],
            '–ø–ª–∞–Ω—ã': ['–ø–ª–∞–Ω—ã', '—Ü–µ–ª–∏', '–º–µ—á—Ç—ã', '–±—É–¥—É—â–µ–µ', '—Ö–æ—á—É', '—Å–æ–±–∏—Ä–∞—é—Å—å']
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in content_lower for keyword in keywords):
                topics.append(topic)
        
        return topics

    def _should_add_question(self, context: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–æ—Ç—ã"""
        self.question_counter += 1
        
        print(f"üîç MessageController: –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {self.question_counter}/{self.question_frequency}")
        
        # –°–¢–†–û–ì–û–ï –ü–†–ê–í–ò–õ–û: —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.question_counter >= self.question_frequency:
            self.question_counter = 0
            print(f"üîç MessageController: –í–†–ï–ú–Ø –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (—Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞)")
            return True
        
        print(f"üîç MessageController: –ù–ï –≤—Ä–µ–º—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (—Å—á–µ—Ç—á–∏–∫: {self.question_counter})")
        return False

    def _generate_contextual_question(self, context: Dict[str, Any]) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        recent_topics = self.conversation_topics[-3:] if self.conversation_topics else []
        user_mood = context.get('recent_mood', 'neutral')
        
        # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        available_questions = []
        
        # –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç–µ–º
        if '—Ä–∞–±–æ—Ç–∞' in recent_topics:
            questions = [
                "–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?",
                "–ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–µ–π—á–∞—Å?",
                "–ö–∞–∫ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏?"
            ]
            available_questions.extend([q for q in questions if q not in self.last_questions])
        
        if '—Å–µ–º—å—è' in recent_topics:
            questions = [
                "–ö–∞–∫ –¥–µ–ª–∞ —É –±–ª–∏–∑–∫–∏—Ö?",
                "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Å–µ–º—å–µ?",
                "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ?"
            ]
            available_questions.extend([q for q in questions if q not in self.last_questions])
        
        if '—Ö–æ–±–±–∏' in recent_topics:
            questions = [
                "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                "–ï—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è?",
                "–£–¥–∞–µ—Ç—Å—è –ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Ö–æ–±–±–∏?"
            ]
            available_questions.extend([q for q in questions if q not in self.last_questions])
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
        if not available_questions:
            general_questions = [
                "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?",
                "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
                "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?",
                "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?",
                "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?"
            ]
            available_questions.extend([q for q in general_questions if q not in self.last_questions])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if available_questions:
            selected_question = random.choice(available_questions)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é (–Ω–µ –±–æ–ª–µ–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
            self.last_questions.append(selected_question)
            if len(self.last_questions) > 5:
                self.last_questions.pop(0)
            
            return selected_question
        
        return "–ö–∞–∫ –¥–µ–ª–∞?"
    
    async def _add_contextual_question(self, content: str, context: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        user_mood = context.get('recent_mood', 'neutral')
        relationship_stage = context.get('relationship_stage', 'introduction')
        favorite_topics = context.get('favorite_topics', [])
        
        # –í–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_questions = {
            'positive': [
                "–ê —á—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ?",
                "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø–æ–¥–Ω—è–ª–æ —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –≤ —Ç–∞–∫–æ–º —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏?"
            ],
            'negative': [
                "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
                "–ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å?"
            ],
            'stressed': [
                "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è?",
                "–•–æ—á–µ—à—å –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º?",
                "–ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç –∑–∞–±–æ—Ç?"
            ],
            'excited': [
                "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!",
                "–ß—Ç–æ —Ç–µ–±—è —Ç–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ?",
                "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏!"
            ]
        }
        
        # –í–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        stage_questions = {
            'introduction': [
                "–ê —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ?",
                "–ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞ —Å–µ–≥–æ–¥–Ω—è?"
            ],
            'getting_acquainted': [
                "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –≤ –∂–∏–∑–Ω–∏?",
                "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è?",
                "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?"
            ],
            'building_trust': [
                "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏?",
                "–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ?",
                "–û —á–µ–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å?"
            ],
            'close_friend': [
                "–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
                "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á–µ–º —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?",
                "–ö–∞–∫ –¥–µ–ª–∞ —Å —Ç–µ–º, –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω—å—à–µ?"
            ]
        }
        
        # –í–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±–∏–º—ã–º —Ç–µ–º–∞–º
        topic_questions = {
            '—Ä–∞–±–æ—Ç–∞': ["–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?", "–ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã?"],
            '—Å–µ–º—å—è': ["–ö–∞–∫ —Ç–≤–æ–∏ –±–ª–∏–∑–∫–∏–µ?", "–ö–∞–∫ –¥–µ–ª–∞ –≤ —Å–µ–º—å–µ?"],
            '—Ö–æ–±–±–∏': ["–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?", "–ï—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è?"],
            '–ø–ª–∞–Ω—ã': ["–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã?", "–ö —á–µ–º—É —Å—Ç—Ä–µ–º–∏—à—å—Å—è?"]
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å
        questions = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if user_mood in mood_questions:
            questions.extend(mood_questions[user_mood])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞–¥–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if relationship_stage in stage_questions:
            questions.extend(stage_questions[relationship_stage])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º
        for topic_data in favorite_topics[:2]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-2 —Ç–µ–º—ã
            topic = topic_data[0] if isinstance(topic_data, tuple) else topic_data
            if topic in topic_questions:
                questions.extend(topic_questions[topic])
        
        if questions:
            question = random.choice(questions)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω–µ—Ü —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑–æ–π
            content += f" {question}"
        
        return content
    
    def _split_long_message(self, content: str) -> List[str]:
        """–£–º–Ω–æ —Ä–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(content) <= self.max_message_length:
            return [content]
        
        print(f"üîÑ –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–µ–Ω–æ)
        parts = []
        remaining = content
        
        while remaining and len(remaining) > self.max_message_length:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            best_split = self._find_best_split_point(remaining, self.max_message_length)
            
            if best_split > 0:
                part = remaining[:best_split].strip()
                remaining = remaining[best_split:].strip()
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
                part = remaining[:self.max_message_length].strip()
                remaining = remaining[self.max_message_length:].strip()
            
            if part:
                parts.append(part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
        if remaining:
            parts.append(remaining.strip())
        
        print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(parts)} —á–∞—Å—Ç–µ–π")
        return parts
    
    async def _split_by_semantic_blocks(self, content: str) -> List[str]:
        """–†–∞–∑–±–∏—Ç—å –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            blocks = []
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
            paragraphs = content.split('\n\n')
            
            for paragraph in paragraphs:
                paragraph = paragraph.strip()
                if not paragraph:
                    continue
                    
                # –ï—Å–ª–∏ –∞–±–∑–∞—Ü –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
                if len(paragraph) <= self.max_message_length:
                    blocks.append(paragraph)
                else:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                    sentences = self._split_into_sentences(paragraph)
                    current_block = ""
                    
                    for sentence in sentences:
                        if len(current_block + " " + sentence) <= self.max_message_length:
                            current_block += (" " + sentence if current_block else sentence)
                        else:
                            if current_block:
                                blocks.append(current_block.strip())
                            current_block = sentence
                    
                    if current_block:
                        blocks.append(current_block.strip())
            
            return blocks if blocks else [content]  # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–æ–≤
        except Exception as e:
            print(f"üîÑ –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è: {e}")
            return [content]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _split_into_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            import re
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–∞–º
            sentences = re.split(r'[.!?]+', text)
            
            result = []
            for sentence in sentences:
                sentence = sentence.strip()
                if sentence:
                    result.append(sentence)
            
            return result if result else [text]
        except Exception as e:
            print(f"üîÑ –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return [text]
    
    async def _split_long_block(self, content: str) -> List[str]:
        """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π –±–ª–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"""
        parts = []
        remaining = content
        
        while remaining and len(remaining) > self.max_message_length:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            best_split = self._find_best_split_point(remaining, self.max_message_length)
            
            if best_split > 0:
                part = remaining[:best_split].strip()
                remaining = remaining[best_split:].strip()
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
                part = remaining[:self.max_message_length].strip()
                remaining = remaining[self.max_message_length:].strip()
            
            if part:
                parts.append(part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
        if remaining:
            parts.append(remaining.strip())
        
        return parts
    
    def _find_best_split_point(self, text: str, max_length: int) -> int:
        """–ù–∞–π—Ç–∏ –ª—É—á—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        # –ò—â–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç max_length
        search_window = min(max_length, len(text))
        search_start = max(0, search_window - 50)  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–∏–º–≤–æ–ª–∞—Ö
        
        search_text = text[search_start:search_window]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in self.split_patterns:
            matches = list(re.finditer(pattern, search_text))
            if matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                last_match = matches[-1]
                return search_start + last_match.end()
        
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø—Ä–æ–±–µ–ª
        last_space = text.rfind(' ', search_start, search_window)
        if last_space > search_start:
            return last_space
        
        return 0  # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
    
    def _calculate_delays(self, parts: List[str], context: Dict[str, Any]) -> List[int]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        delays = []
        
        for i, part in enumerate(parts):
            if i == 0:
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–ø–µ—á–∞—Ç–∞–Ω–∏—è"
                base_typing_delay = min(len(part) * 30, 2000)  # 30–º—Å –Ω–∞ —Å–∏–º–≤–æ–ª, –º–∞–∫—Å 2 —Å–µ–∫
                delays.append(base_typing_delay)
                continue
            
            # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            base_delay = 1000  # 1 —Å–µ–∫—É–Ω–¥–∞
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            delay_multiplier = 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            part_lower = part.lower()
            for trigger_type, triggers in self.pause_triggers.items():
                if any(trigger in part_lower for trigger in triggers):
                    if trigger_type == '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ':
                        delay_multiplier += 0.5
                    elif trigger_type == '—É–¥–∏–≤–ª–µ–Ω–∏–µ':
                        delay_multiplier += 0.3
                    elif trigger_type == '—ç–º–æ—Ü–∏—è':
                        delay_multiplier += 0.4
                    elif trigger_type == '–≤–æ–ø—Ä–æ—Å':
                        delay_multiplier += 0.6
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —á–∞—Å—Ç–∏
            if len(part) > 100:
                delay_multiplier += 0.3
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if part.endswith('...'):
                delay_multiplier += 0.8
            elif part.endswith('!'):
                delay_multiplier += 0.2
            elif part.endswith('?'):
                delay_multiplier += 0.4
            
            # –°–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è ¬±20%
            random_factor = random.uniform(0.8, 1.2)
            
            final_delay = int(base_delay * delay_multiplier * random_factor)
            delays.append(final_delay)
        
        return delays
    
    def add_emotional_coloring(self, content: str, strategy: str, mood: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_emojis = {
            'caring': ['üòä', 'ü§ó', 'üíï', '‚ò∫Ô∏è'],
            'playful': ['üòÑ', 'üòâ', 'üôÉ', 'üòã'],
            'mysterious': ['ü§î', 'üòè', 'üëÄ', '‚ú®'],
            'reserved': ['üôÇ', 'üòå', 'ü§ç']
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        mood_emojis = {
            'positive': ['üòä', 'üòÑ', 'üåü', '‚ú®'],
            'negative': ['ü§ó', 'üíô', 'üå∏', '‚òÅÔ∏è'],
            'excited': ['üéâ', 'üòç', 'üî•', '‚≠ê'],
            'neutral': ['üôÇ', 'üòå', 'ü§ç']
        }
        
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        # if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
        #     emojis = strategy_emojis.get(strategy, ['üòä'])
        #     if mood in mood_emojis:
        #         emojis.extend(mood_emojis[mood])
        #     
        #     emoji = random.choice(emojis)
        #     
        #     # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü –∏–ª–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É
        #     if random.random() < 0.7:  # 70% –≤ –∫–æ–Ω–µ—Ü
        #         content += f" {emoji}"
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        # else:  # 30% –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        #     sentences = content.split('. ')
        #     if len(sentences) > 1:
        #         insert_pos = random.randint(0, len(sentences) - 1)
        #         sentences[insert_pos] += f" {emoji}"
        #         content = '. '.join(sentences)
        
        return content 
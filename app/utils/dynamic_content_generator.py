"""
–î–∏–Ω–∞–º—ñ—á–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞–º—ñ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—É
"""
import logging
import random
from typing import List, Dict, Any, Optional
from datetime import datetime
import openai
import os

logger = logging.getLogger(__name__)

class DynamicContentGenerator:
    """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∏–Ω–∞–º—ñ—á–Ω–æ —á–µ—Ä–µ–∑ OpenAI –∑–∞–º—ñ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—É"""
    
    def __init__(self):
        self.client = openai.OpenAI(
            api_key=os.getenv("OPENAI_API_KEY")
        )
        
    def generate_questions_for_time(self, time_of_day: str, context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É –¥–Ω—è —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        try:
            prompt = f"""
            –ó–≥–µ–Ω–µ—Ä—É–π 3-5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è {time_of_day} —á–∞—Å—É –¥–Ω—è.
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:
            - –î–µ–Ω—å —Ç–∏–∂–Ω—è: {context.get('day_of_week', '–Ω–µ –≤—ñ–¥–æ–º–æ')}
            - –°—Ç–µ–π–¥–∂ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: {context.get('stage', '–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ')}
            - –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç–µ–º–∏: {context.get('previous_topics', [])}
            
            –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏:
            - –ü—Ä–∏—Ä–æ–¥–Ω–∏–º–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ —á–∞—Å—É
            - –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Å—Ç–µ–π–¥–∂—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
            - –ö–æ—Ä–æ—Ç–∫–∏–º–∏ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤)
            - –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏–º–∏
            
            –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON: ["–ø–∏—Ç–∞–Ω–Ω—è1", "–ø–∏—Ç–∞–Ω–Ω—è2", ...]
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.8,
                max_tokens=200
            )
            
            import json
            questions = json.loads(response.choices[0].message.content)
            logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å –¥–ª—è {time_of_day}")
            return questions
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω—å: {e}")
            # Fallback –¥–æ –ø—Ä–æ—Å—Ç–∏—Ö –ø–∏—Ç–∞–Ω—å
            fallback = {
                "morning": ["—è–∫ —Å–ø–∞–≤?", "—è–∫ –ø–ª–∞–Ω—ñ–≤ –Ω–∞ –¥–µ–Ω—å?", "—â–æ —Ä–æ–±–∏—Ç–∏–º–µ—à?"],
                "day": ["—è–∫ —Å–ø—Ä–∞–≤–∏?", "—â–æ —Ä–æ–±–∏—à?", "—è–∫ –Ω–∞—Å—Ç—Ä—ñ–π?"],
                "evening": ["—è–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?", "—â–æ —Ü—ñ–∫–∞–≤–æ–≥–æ?", "—è–∫ –Ω–∞—Å—Ç—Ä—ñ–π?"],
                "night": ["—è–∫ —Å–ø—Ä–∞–≤–∏?", "—â–æ —Ä–æ–±–∏—à —Ç–∞–∫ –ø—ñ–∑–Ω–æ?", "—è–∫ –¥–µ–Ω—å?"]
            }
            return fallback.get(time_of_day, ["—è–∫ —Å–ø—Ä–∞–≤–∏?"])
    
    def generate_emotional_response(self, user_message: str, emotion_context: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –µ–º–æ—Ü—ñ–π–Ω—É —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            prompt = f"""
            –ó–≥–µ–Ω–µ—Ä—É–π –∫–æ—Ä–æ—Ç–∫—É –µ–º–æ—Ü—ñ–π–Ω—É —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{user_message}"
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            - –ü–æ—Ç–æ—á–Ω–∞ –µ–º–æ—Ü—ñ—è –ê–≥–∞—Ç–∏: {emotion_context.get('current_emotion', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞')}
            - –°—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: {emotion_context.get('communication_style', '–¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π')}
            - –†—ñ–≤–µ–Ω—å –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ: {emotion_context.get('intimacy_level', '–ø–æ—á–∞—Ç–∫–æ–≤–∏–π')}
            
            –†–µ–∞–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞:
            - –ë—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é (–¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤)
            - –í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –µ–º–æ—Ü—ñ—é
            - –ë—É—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é
            - –ú—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 1 –µ–º–æ–¥–∑—ñ
            
            –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∞–∫—Ü—ñ—ó.
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.9,
                max_tokens=50
            )
            
            reaction = response.choices[0].message.content.strip()
            logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —Ä–µ–∞–∫—Ü—ñ—è: {reaction}")
            return reaction
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –µ–º–æ—Ü—ñ–π–Ω–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó: {e}")
            # Fallback —Ä–µ–∞–∫—Ü—ñ—ó
            fallbacks = ["—Ü—ñ–∫–∞–≤–æ!", "—Ä–æ–∑—É–º—ñ—é", "–æ–≥–æ!", "–∫–ª–∞—Å–Ω–æ", "–∑—Ä–æ–∑—É–º—ñ–ª–æ"]
            return random.choice(fallbacks)
    
    def generate_conversation_connectors(self, message1: str, message2: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∑'—î–¥–Ω—É–≤–∞—á –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            prompt = f"""
            –Ø–∫ –ø—Ä–∏—Ä–æ–¥–Ω–æ –æ–±'—î–¥–Ω–∞—Ç–∏ —Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
            1. "{message1}"
            2. "{message2}"
            
            –î–∞–π –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –∑'—î–¥–Ω—É–≤–∞—á (1-2 —Å–ª–æ–≤–∞) —è–∫–∏–π –∑–≤—É—á–∏—Ç—å –ø—Ä–∏—Ä–æ–¥–Ω–æ –≤ —Ä–æ–∑–º–æ–≤—ñ:
            - "–∞ —Ç–∞–∫–æ–∂"
            - "—ñ —â–µ"
            - "–∫—Å—Ç–∞—Ç—ñ"
            - "—Ç–∞"
            - "—ñ"
            - "–ø–ª—é—Å"
            
            –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –∑'—î–¥–Ω—É–≤–∞—á –±–µ–∑ –∫–æ–º–∏.
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.9,
                max_tokens=10
            )
            
            connector = response.choices[0].message.content.strip().replace(",", "").replace(".", "")
            logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∑'—î–¥–Ω—É–≤–∞—á: {connector}")
            return connector
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑'—î–¥–Ω—É–≤–∞—á–∞: {e}")
            return "—ñ"  # Fallback
    
    def analyze_message_emotions(self, messages: List[str]) -> Dict[str, Any]:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –µ–º–æ—Ü—ñ–π –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –ê–≥–∞—Ç–∏"""
        try:
            messages_text = " ".join(messages)
            

            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Ç–æ–Ω —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ü–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: "{messages_text}"
            
            –í–∏–∑–Ω–∞—á–∏ –î–ï–¢–ê–õ–¨–ù–û:
            1. –û—Å–Ω–æ–≤–Ω—É –µ–º–æ—Ü—ñ—é: positive/negative/neutral/excited/sad/angry/frustrated/anxious/playful/intellectual/rude
            2. –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –µ–º–æ—Ü—ñ—ó (0.0-1.0): 0.1-0.3=—Å–ª–∞–±–æ, 0.4-0.6=–ø–æ–º—ñ—Ä–Ω–æ, 0.7-0.9=—Å–∏–ª—å–Ω–æ, 1.0=–¥—É–∂–µ —Å–∏–ª—å–Ω–æ
            3. –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: question/statement/greeting/story/complaint/joke/flirt/insult
            4. –°—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: friendly/formal/casual/aggressive/analytical/emotional/playful/rude
            5. –ü–æ—Ç—Ä–µ–±—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: support/information/entertainment/argument/flirt/casual_chat
            6. –†—ñ–≤–µ–Ω—å –ø–æ–≤–∞–≥–∏: respectful/neutral/disrespectful/rude
            
            –û–°–û–ë–õ–ò–í–ê –£–í–ê–ì–ê –¥–æ:
            - –ì—Ä—É–±–æ—Å—Ç—ñ, –æ–±—Ä–∞–∑, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—ó –ª–µ–∫—Å–∏–∫–∏
            - –ê–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤—É  
            - –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
            - –ï–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
            –ü–æ–≤–µ—Ä–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
            {{
                "emotion": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞_–µ–º–æ—Ü—ñ—è",
                "intensity": —á–∏—Å–ª–æ_–≤—ñ–¥_0_–¥–æ_1,
                "message_type": "—Ç–∏–ø_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                "communication_style": "—Å—Ç–∏–ª—å_—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
                "response_need": "–ø–æ—Ç—Ä–µ–±–∞_—É_–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
                "respect_level": "—Ä—ñ–≤–µ–Ω—å_–ø–æ–≤–∞–≥–∏",
                "requires_boundaries": true/false,
                "can_be_playful": true/false
            }}
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,  # –ú–µ–Ω—à–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±—ñ–ª—å—à —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                max_tokens=150
            )
            
            import json
            import re
            
            content = response.choices[0].message.content.strip()
            logger.info(f"üîç [EMOTION_ANALYSIS] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI: '{content}'")
            
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º JSON
            content = re.sub(r'```json\s*', '', content)
            content = re.sub(r'```\s*$', '', content)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', content, re.DOTALL)
            if json_match:
                content = json_match.group()
            
            analysis = json.loads(content)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            logger.info(f"üîç [EMOTION_ANALYSIS] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{messages_text[:50]}...'")
            logger.info(f"üîç [EMOTION_ANALYSIS] –ï–º–æ—Ü—ñ—è: {analysis.get('emotion')} (—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {analysis.get('intensity')})")
            logger.info(f"üîç [EMOTION_ANALYSIS] –°—Ç–∏–ª—å: {analysis.get('communication_style')}, –ü–æ–≤–∞–≥–∞: {analysis.get('respect_level')}")
            logger.info(f"üîç [EMOTION_ANALYSIS] –ü–æ—Ç—Ä–µ–±—É—î –≥—Ä–∞–Ω–∏—Ü—å: {analysis.get('requires_boundaries')}, –ú–æ–∂–Ω–∞ –≥—Ä–∞—Ç–∏: {analysis.get('can_be_playful')}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå [EMOTION_ANALYSIS] –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –µ–º–æ—Ü—ñ–π: {e}")
            return {
                "emotion": "neutral",
                "intensity": 0.5,
                "message_type": "statement",
                "communication_style": "casual",
                "response_need": "casual_chat",
                "respect_level": "neutral",
                "requires_boundaries": False,
                "can_be_playful": True
            }
    
    def generate_stage_appropriate_questions(self, stage: str, covered_topics: List[str], user_context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–µ–π–¥–∂—É"""
        try:
            prompt = f"""
            –ó–≥–µ–Ω–µ—Ä—É–π 3-5 –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å—Ç–µ–π–¥–∂—É "{stage}" —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
            
            –í–∂–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω—ñ —Ç–µ–º–∏: {covered_topics}
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_context}
            
            –°—Ç–µ–π–¥–∂—ñ:
            - stage_1 (–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ): –±–∞–∑–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∂–∏—Ç—Ç—è, —Ä–æ–±–æ—Ç—É, —Ö–æ–±—ñ
            - stage_2 (–¥—Ä—É–∂–±–∞): –±—ñ–ª—å—à –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è, —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ, –º—Ä—ñ—ó
            - stage_3 (–±–ª–∏–∑—å–∫—ñ—Å—Ç—å): –≥–ª–∏–±–æ–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—á—É—Ç—Ç—è, —Å—Ç–æ—Å—É–Ω–∫–∏
            
            –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ:
            - –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä—ñ–≤–Ω—é –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ
            - –ù–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –≤–∂–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω—ñ —Ç–µ–º–∏
            - –ë—É—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º–∏ —Ç–∞ —Ü—ñ–∫–∞–≤–∏–º–∏
            - –ë—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (–¥–æ 60 —Å–∏–º–≤–æ–ª—ñ–≤)
            
            –ü–æ–≤–µ—Ä–Ω–∏ JSON: ["–ø–∏—Ç–∞–Ω–Ω—è1", "–ø–∏—Ç–∞–Ω–Ω—è2", ...]
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.8,
                max_tokens=300
            )
            
            import json
            questions = json.loads(response.choices[0].message.content)
            logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å—Ç–µ–π–¥–∂—É {stage}")
            return questions
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å—Ç–µ–π–¥–∂—É: {e}")
            # Fallback –ø–∏—Ç–∞–Ω–Ω—è –ø–æ —Å—Ç–µ–π–¥–∂–∞—Ö
            fallback = {
                "stage_1": ["–∑–≤—ñ–¥–∫–∏ —Ç–∏?", "–∫–∏–º –ø—Ä–∞—Ü—é—î—à?", "—â–æ –ª—é–±–∏—à —Ä–æ–±–∏—Ç–∏?"],
                "stage_2": ["—â–æ –¥–ª—è —Ç–µ–±–µ –≤–∞–∂–ª–∏–≤–æ?", "—è–∫—ñ —É —Ç–µ–±–µ –º—Ä—ñ—ó?", "—è–∫ –ø—Ä–æ–≤–æ–¥–∏—à —á–∞—Å?"],
                "stage_3": ["—â–æ —Ç–µ–±–µ –Ω–∞–¥–∏—Ö–∞—î?", "—è–∫—ñ —É —Ç–µ–±–µ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ?", "—â–æ —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–∞—Å–ª–∏–≤–∏–º?"]
            }
            return fallback.get(stage, ["—è–∫ —Å–ø—Ä–∞–≤–∏?"])

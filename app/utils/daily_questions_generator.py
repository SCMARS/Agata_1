"""
Daily Questions Generator - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
"""
import random
import logging
from typing import List, Dict, Any
from datetime import datetime
from .living_chat_config_loader import living_chat_config

logger = logging.getLogger(__name__)

class DailyQuestionsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config = living_chat_config
        self.time_greetings = self.config.get_time_greetings()
        self.time_ranges = self.config.get_time_ranges()
        self.communication_style = self.config.get_communication_style()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        import os
        from .openai_text_analyzer import OpenAITextAnalyzer
        
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            self.openai_analyzer = OpenAITextAnalyzer(api_key)
            logger.info("OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.openai_analyzer = None
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
    
    def get_time_based_question(self, stage: int, conversation_context: Dict[str, Any] = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ —ç—Ç–∞–ø–∞"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.openai_analyzer and conversation_context:
            try:
                logger.info(f"ü§ñ [OPENAI] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–∞–ø–∞ {stage}")
                logger.info(f"   üé≠ –¢–æ–Ω –±–µ—Å–µ–¥—ã: {conversation_context.get('conversation_tone', 'unknown')}")
                logger.info(f"   üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {conversation_context.get('user_mood', 'unknown')}")
                question = self.openai_analyzer.suggest_question(conversation_context, stage)
                logger.info(f"   üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                return question
            except Exception as e:
                logger.error(f"‚ùå [OPENAI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        # Fallback –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        current_hour = datetime.now().hour
        current_weekday = datetime.now().weekday()  # 0 = Monday, 6 = Sunday
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        time_of_day = self._get_time_of_day(current_hour)
        
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_hour}:xx ({time_of_day})")
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_weekday} (0=–ü–Ω, 6=–í—Å)")
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –≠—Ç–∞–ø: {stage}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–∞–ø–∞
        stage_questions = self.config.get_daily_questions(stage)
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ {stage}: {len(stage_questions)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        contextual_questions = self._get_contextual_questions(time_of_day, current_weekday)
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {time_of_day}: {len(contextual_questions)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        all_questions = stage_questions + contextual_questions
        logger.info(f"‚è∞ [DAILY_QUESTIONS] –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if all_questions:
            selected_question = random.choice(all_questions)
            logger.info(f"‚è∞ [DAILY_QUESTIONS] –í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å: '{selected_question}'")
            return selected_question
        else:
            logger.warning(f"‚è∞ [DAILY_QUESTIONS] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return "–∫–∞–∫ –¥–µ–ª–∞?"
    
    def _get_time_of_day(self, hour: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for time_name, (start, end) in self.time_ranges.items():
            if start <= end:  # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-12)
                if start <= hour < end:
                    return time_name
            else:  # –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22-6)
                if hour >= start or hour < end:
                    return time_name
        return "day"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _get_contextual_questions(self, time_of_day: str, weekday: int) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        questions = []
        
        # –í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        time_questions = self.config.get_emotions(f"{time_of_day}_questions")
        if time_questions:
            questions.extend(time_questions)
        
        # –í–æ–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        weekday_names = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        weekday_name = weekday_names[weekday]
        weekday_questions = self.config.get_emotions(f"{weekday_name}_questions")
        if weekday_questions:
            questions.extend(weekday_questions)
        
        return questions
    
    def get_greeting(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        current_hour = datetime.now().hour
        time_of_day = self._get_time_of_day(current_hour)
        return self.time_greetings.get(time_of_day, "–ø—Ä–∏–≤–µ—Ç")
    
    def get_emotional_expression(self, emotion_type: str = "positive") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        emotions = self.config.get_emotions(emotion_type)
        if emotions:
            return random.choice(emotions)
        return "–∫—Ä—É—Ç–æ!"
    
    def should_use_emoji(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏"""
        return self.communication_style.get("use_emojis", True)
    
    def should_use_parentheses(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏"""
        return self.communication_style.get("use_parentheses", True)
    
    def should_use_contractions(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"""
        return self.communication_style.get("use_contractions", True)
    
    def get_max_emoji_per_message(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.communication_style.get("max_emoji_per_message", 2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
daily_questions_generator = DailyQuestionsGenerator()

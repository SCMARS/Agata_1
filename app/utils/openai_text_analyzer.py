"""
OpenAI Text Analyzer - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API
"""
import openai
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class OpenAITextAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API"""
    
    def __init__(self, api_key: str):
        self.client = openai.OpenAI(api_key=api_key)
        self.model = "gpt-3.5-turbo"
    
    def analyze_message_type(self, text: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        
        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{{
    "message_type": "greeting|question|emotion|short_response|statement|other",
    "sentiment": "positive|neutral|negative",
    "emotion": "happy|sad|excited|calm|surprised|thinking|other",
    "intent": "ask_question|share_info|express_feeling|greet|respond|other",
    "urgency": "low|medium|high",
    "formality": "casual|neutral|formal",
    "needs_response": true/false,
    "suggested_connector": "–ê|–ö—Å—Ç–∞—Ç–∏|–∏|–ö—Ä–æ–º–µ —Ç–æ–≥–æ|–ù–æ|–û–¥–Ω–∞–∫–æ",
    "is_short": true/false,
    "confidence": 0.0-1.0
}}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —ç–º–æ—Ü–∏–∏.
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            result = json.loads(response.choices[0].message.content)
            logger.info(f"üîç [OPENAI] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text[:50]}...'")
            logger.info(f"   üìä –¢–∏–ø: {result['message_type']}")
            logger.info(f"   üòä –≠–º–æ—Ü–∏—è: {result['emotion']}")
            logger.info(f"   üí≠ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {result['intent']}")
            logger.info(f"   üîó –°–≤—è–∑–∫–∞: {result['suggested_connector']}")
            logger.info(f"   üìè –ö–æ—Ä–æ—Ç–∫–æ–µ: {result['is_short']}")
            logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return self._get_fallback_analysis(text)
    
    def analyze_conversation_context(self, messages: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–π –±–µ—Å–µ–¥—ã
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}]
            
        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
            conversation_text = "\n".join([
                f"{msg['role']}: {msg['content']}" 
                for msg in messages[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            ])
            
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç—Ç–æ–π –±–µ—Å–µ–¥—ã:

{conversation_text}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{{
    "conversation_tone": "friendly|formal|casual|intimate|business|other",
    "user_mood": "happy|neutral|sad|excited|tired|focused|other",
    "conversation_stage": "greeting|getting_to_know|deep_conversation|closing|other",
    "user_engagement": "low|medium|high",
    "suggested_response_style": "empathetic|professional|casual|playful|supportive",
    "should_ask_question": true/false,
    "suggested_question": "–≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ—Å–µ–¥—ã –∏–ª–∏ null",
    "emotional_support_needed": true/false,
    "conversation_energy": "low|medium|high",
    "confidence": 0.0-1.0
}}

–£—á–∏—Ç—ã–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∏–Ω–∞–º–∏–∫—É –±–µ—Å–µ–¥—ã.
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–µ—Å–µ–¥—ã –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=800
            )
            
            result = json.loads(response.choices[0].message.content)
            logger.info(f"üîç [OPENAI] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:")
            logger.info(f"   üé≠ –¢–æ–Ω: {result['conversation_tone']}")
            logger.info(f"   üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {result['user_mood']}")
            logger.info(f"   üìà –≠—Ç–∞–ø: {result['conversation_stage']}")
            logger.info(f"   üí™ –≠–Ω–µ—Ä–≥–∏—è: {result['conversation_energy']}")
            logger.info(f"   üéØ –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: {result['suggested_response_style']}")
            logger.info(f"   ‚ùì –ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: {result['should_ask_question']}")
            if result.get('suggested_question'):
                logger.info(f"   üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {result['suggested_question']}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return self._get_fallback_context()
    
    def generate_connector(self, previous_message: str, current_message: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–≤—è–∑–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        Args:
            previous_message: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_message: –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å–≤—è–∑–∫–∞
        """
        try:
            prompt = f"""
–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–≤—è–∑–∫—É –º–µ–∂–¥—É —ç—Ç–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:

–ü—Ä–µ–¥—ã–¥—É—â–µ–µ: "{previous_message}"
–¢–µ–∫—É—â–µ–µ: "{current_message}"

–í—ã–±–µ—Ä–∏ –û–î–ù–û —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:
- "–ê" (–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤)
- "–ö—Å—Ç–∞—Ç–∏" (–¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã)
- "–∏" (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)
- "–ö—Ä–æ–º–µ —Ç–æ–≥–æ" (–¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
- "–ù–æ" (–¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è)
- "–û–¥–Ω–∞–∫–æ" (–¥–ª—è –º—è–≥–∫–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è)
- "–¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º" (–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)
- "–ö–æ—Ä–æ—á–µ" (–¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è)
- "–í –æ–±—â–µ–º" (–¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è)
- "–ö—Å—Ç–∞—Ç–∏" (–¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è)

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ. –í—ã–±–∏—Ä–∞–π —Å–≤—è–∑–∫–∏ –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å —è–∑—ã–∫–∞."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=10
            )
            
            connector = response.choices[0].message.content.strip()
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤—è–∑–∫–∞: {connector}")
            return connector
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–∫–∏: {e}")
            return "–ê"
    
    def suggest_question(self, context: Dict[str, Any], stage: int) -> str:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
            stage: –≠—Ç–∞–ø –æ–±—â–µ–Ω–∏—è (1, 2, 3)
            
        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å
        """
        try:
            prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å:

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –¢–æ–Ω –±–µ—Å–µ–¥—ã: {context.get('conversation_tone', 'neutral')}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.get('user_mood', 'neutral')}
- –≠—Ç–∞–ø –æ–±—â–µ–Ω–∏—è: {stage}
- –≠–Ω–µ—Ä–≥–∏—è –±–µ—Å–µ–¥—ã: {context.get('conversation_energy', 'medium')}

–≠—Ç–∞–ø—ã:
- –≠—Ç–∞–ø 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ (–ø–µ—Ä–≤—ã–µ 3-5 —Å–æ–æ–±—â–µ–Ω–∏–π)
- –≠—Ç–∞–ø 2: –†–∞–∑–≤–∏—Ç–∏–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ (5-15 —Å–æ–æ–±—â–µ–Ω–∏–π)  
- –≠—Ç–∞–ø 3: –£–≥–ª—É–±–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (15+ —Å–æ–æ–±—â–µ–Ω–∏–π)

–ü—Ä–µ–¥–ª–æ–∂–∏ –û–î–ò–ù –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π:
1. –ü–æ–¥—Ö–æ–¥–∏—Ç –∫ —ç—Ç–∞–ø—É –æ–±—â–µ–Ω–∏—è
2. –£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –±–µ—Å–µ–¥—ã
4. –ó–≤—É—á–∏—Ç –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –æ–±—â–µ–Ω–∏—é. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –∂–∏–≤–æ–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=50
            )
            
            question = response.choices[0].message.content.strip()
            logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")
            return question
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–∫–∞–∫ –¥–µ–ª–∞?"
    
    def _get_fallback_analysis(self, text: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            "message_type": "statement",
            "sentiment": "neutral",
            "emotion": "calm",
            "intent": "share_info",
            "urgency": "low",
            "formality": "casual",
            "needs_response": True,
            "suggested_connector": "–ê",
            "is_short": len(text) < 50,
            "confidence": 0.5
        }
    
    def _get_fallback_context(self) -> Dict[str, Any]:
        """Fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            "conversation_tone": "friendly",
            "user_mood": "neutral",
            "conversation_stage": "greeting",
            "user_engagement": "medium",
            "suggested_response_style": "casual",
            "should_ask_question": True,
            "suggested_question": "–∫–∞–∫ –¥–µ–ª–∞?",
            "emotional_support_needed": False,
            "conversation_energy": "medium",
            "confidence": 0.5
        }

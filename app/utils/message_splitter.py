"""
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ê–≥–∞—Ç—ã
"""
import re
import random
import logging
from typing import List, Dict, Tuple
from .living_chat_config_loader import living_chat_config

logger = logging.getLogger(__name__)

class MessageSplitter:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = living_chat_config
        self.message_splitting_config = self.config.get_message_splitting_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.max_length = self.message_splitting_config.get("max_length", 150)
        self.min_delay = self.message_splitting_config.get("min_delay_ms", 500)
        self.max_delay = self.message_splitting_config.get("max_delay_ms", 2000)
        self.force_split_threshold = self.message_splitting_config.get("force_split_threshold", 100)
        self.max_parts = self.message_splitting_config.get("max_parts", 3)
    
    def split_message(self, text: str, force_split: bool = False) -> Dict[str, any]:
        text = text.strip()
        
        if not text:
            return {
                'parts': [''],
                'has_question': False,
                'delays_ms': [0]
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        has_question = self._has_question(text)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ—Ç –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è –∫ —Ä–∞–∑–±–∏–µ–Ω–∏—é
        if len(text) <= self.max_length and not force_split and len(text) <= self.force_split_threshold:
            return {
                'parts': [text],
                'has_question': has_question,
                'delays_ms': [self._generate_delay()]
            }
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        if len(text) > self.force_split_threshold or force_split:
            force_split = True
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = self._split_into_parts(text)
        delays = [self._generate_delay() for _ in parts]
        
        logger.info(f"‚úÇÔ∏è [SPLITTER] –†–∞–∑–±–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        for i, part in enumerate(parts, 1):
            logger.info(f"   üìù –ß–∞—Å—Ç—å {i}: '{part[:50]}{'...' if len(part) > 50 else ''}'")
        logger.info(f"   ‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å: {has_question}")
        logger.info(f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∏: {delays}–º—Å")
        
        return {
            'parts': parts,
            'has_question': has_question,
            'delays_ms': delays
        }
    
    def _split_into_parts(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º
        parts = self._split_by_sentences(text)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        if len(parts) > self.max_parts:
            parts = self._merge_short_parts(parts)
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º
        final_parts = []
        for part in parts:
            if len(part) > self.max_length:
                sub_parts = self._force_split_long_part(part)
                final_parts.extend(sub_parts)
            else:
                final_parts.append(part)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if len(final_parts) > self.max_parts:
            final_parts = final_parts[:self.max_parts]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - –¥–µ–ª–∞–µ–º —á–∞—Å—Ç–∏ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –∂–∏–≤—ã–º–∏
        final_parts = self._make_parts_livelier(final_parts)
        
        return final_parts
    
    def _split_by_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
        sentence_endings = r'[.!?‚Ä¶]\s+'
        logical_breaks = r'\n\n+'
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = re.split(logical_breaks, text)
        
        parts = []
        for paragraph in paragraphs:
            paragraph = paragraph.strip()
            if not paragraph:
                continue
                
            # –†–∞–∑–±–∏–≤–∞–µ–º –∞–±–∑–∞—Ü –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            sentences = re.split(sentence_endings, paragraph)
            sentences = [s.strip() for s in sentences if s.strip()]
            
            if len(sentences) == 1:
                parts.append(sentences[0])
            else:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                current_part = []
                current_length = 0
                
                for sentence in sentences:
                    sentence_length = len(sentence)
                    
                    if current_length + sentence_length > self.max_length and current_part:
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                        parts.append(' '.join(current_part))
                        current_part = [sentence]
                        current_length = sentence_length
                    else:
                        current_part.append(sentence)
                        current_length += sentence_length
                
                if current_part:
                    parts.append(' '.join(current_part))
        
        # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        return self._natural_split(parts)
    
    def _natural_split(self, parts: List[str]) -> List[str]:
        if not parts:
            return parts
            
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        full_text = ' '.join(parts)
        
        # –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –ù–ï —Ä–∞–∑–¥–µ–ª—è–µ–º (—É–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç)
        if len(full_text) <= 250:
            return [full_text]
        
        # –ò—â–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä–∞–∑—Ä—ã–≤–∞
        import re
        
        # –ë–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞:
        natural_breaks = [
            (r'\.\s+([–ê-–ØA-Z][–∞-—èa-z]{2,})', 'sentence'),      # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
            (r'\?\s+([–ê-–ØA-Z][–∞-—èa-z]{2,})', 'question'),      # –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ + –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ  
            (r'!\s+([–ê-–ØA-Z][–∞-—èa-z]{2,})', 'exclamation'),    # –ü–æ—Å–ª–µ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è + –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
            (r'\s+(–ê\s+–∫–∞–∫|–ò\s+–≤–æ—Ç|–ù–æ\s+–Ω–∞|–ö—Å—Ç–∞—Ç–∏\s+[–∞-—è]|–î–∞\s+[–∞-—è])', 'good_conjunction'),  # –•–æ—Ä–æ—à–∏–µ —Å–æ—é–∑—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            (r'\s+(–ø–æ—ç—Ç–æ–º—É|–ø–æ—Ç–æ–º—É|–∫—Å—Ç–∞—Ç–∏|–≤–æ–æ–±—â–µ|–≤–æ—Ç)\s+', 'connectors'),  # –°–≤—è–∑—É—é—â–∏–µ —Å–ª–æ–≤–∞
        ]
        
        best_splits = []
        for pattern, break_type in natural_breaks:
            for match in re.finditer(pattern, full_text, re.IGNORECASE):
                if break_type in ['sentence', 'question', 'exclamation']:
                    split_pos = match.start(1)
                else:
                    split_pos = match.start()
                best_splits.append((split_pos, break_type))
        
        if not best_splits:
            return [full_text]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑—Ä—ã–≤ –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö —á–∞—Å—Ç–µ–π
        target = len(full_text) // 2
        valid_splits = []
        
        for split_pos, break_type in best_splits:
            part1_len = split_pos
            part2_len = len(full_text) - split_pos
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            if part1_len >= 120 and part2_len >= 120:
                valid_splits.append((split_pos, break_type))
        
        if not valid_splits:
            return [full_text]
        
        best_split = min(valid_splits, key=lambda x: abs(x[0] - target))
        split_pos = best_split[0]
        
        part1 = full_text[:split_pos].strip()
        part2 = full_text[split_pos:].strip()
            
        return [part1, part2]
    
    def _merge_short_parts(self, parts: List[str], max_parts: int = None) -> List[str]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        
        if max_parts is None:
            max_parts = self.max_parts
            
        if len(parts) <= max_parts:
            return parts
        
        merged = []
        current_group = []
        current_length = 0
        
        for part in parts:
            part_length = len(part)
            
            if (current_length + part_length > self.max_length and current_group) or len(merged) >= max_parts - 1:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                merged.append(' '.join(current_group))
                current_group = [part]
                current_length = part_length
            else:
                current_group.append(part)
                current_length += part_length
        
        if current_group:
            if merged and len(merged[-1]) + current_length <= self.max_length * 1.5:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç—å—é –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
                merged[-1] += ' ' + ' '.join(current_group)
            else:
                merged.append(' '.join(current_group))
        
        return merged[:max_parts]
    
    def _force_split_long_part(self, text: str) -> List[str]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—É—é —á–∞—Å—Ç—å"""
        
        # –ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è (–∑–∞–ø—è—Ç—ã–µ, —Å–æ—é–∑—ã)
        break_points = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è
        patterns = [
            r',\s+',      # –∑–∞–ø—è—Ç—ã–µ
            r'\s+–∏\s+',   # —Å–æ—é–∑ "–∏"
            r'\s+–Ω–æ\s+',  # —Å–æ—é–∑ "–Ω–æ"
            r'\s+–∞\s+',   # —Å–æ—é–∑ "–∞"
            r'\s+–∏–ª–∏\s+', # —Å–æ—é–∑ "–∏–ª–∏"
            r':\s+',      # –¥–≤–æ–µ—Ç–æ—á–∏–µ
            r';\s+',      # —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π
        ]
        
        for pattern in patterns:
            for match in re.finditer(pattern, text):
                break_points.append(match.end())
        
        if not break_points:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö –º–µ—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
            words = text.split()
            mid_point = len(words) // 2
            return [
                ' '.join(words[:mid_point]),
                ' '.join(words[mid_point:])
            ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑–±–∏–µ–Ω–∏—è (–±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ)
        text_mid = len(text) // 2
        best_point = min(break_points, key=lambda x: abs(x - text_mid))
        
        part1 = text[:best_point].strip()
        part2 = text[best_point:].strip()

        if self._is_short_start(part1):
            # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ —Å–ª–æ–≤–æ –¥–æ –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏
            words = text.split()
            if len(words) > 2:
                return [
                    ' '.join(words[:2]),  
                    ' '.join(words[2:])
                ]
        
        return [part1, part2]
    
    def _is_short_start(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç –∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–ª–æ–≤–∞"""
        short_starts = ['–û,', '–î–∞,', '–ù–µ—Ç,', '–û–π,', '–ê—Ö,', '–û—Ö,', '–≠—Ö,', '–ù—É,', '–ò,', '–ê,']
        return any(text.strip().startswith(start) for start in short_starts)
    
    def _has_question(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        question_markers = ['?', '–∫–∞–∫ ', '—á—Ç–æ ', '–≥–¥–µ ', '–∫–æ–≥–¥–∞ ', '–ø–æ—á–µ–º—É ', '–∑–∞—á–µ–º ']
        text_lower = text.lower()
        
        return any(marker in text_lower for marker in question_markers)
    
    def _make_parts_livelier(self, parts: List[str]) -> List[str]:
        
        livelier_parts = []
        
        for i, part in enumerate(parts):
            part = part.strip()
            
            # –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ
            if len(part) > self.force_split_threshold:
                # –ò—â–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
                if ', ' in part:
                    sub_parts = part.split(', ', 1)
                    livelier_parts.extend([sub_parts[0] + ',', sub_parts[1]])
                elif ' –∏ ' in part:
                    sub_parts = part.split(' –∏ ', 1)
                    livelier_parts.extend([sub_parts[0], '–ò ' + sub_parts[1]])
                elif ' –Ω–æ ' in part:
                    sub_parts = part.split(' –Ω–æ ', 1)
                    livelier_parts.extend([sub_parts[0], '–ù–æ ' + sub_parts[1]])
                else:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    words = part.split()
                    mid = len(words) // 2
                    livelier_parts.extend([
                        ' '.join(words[:mid]),
                        ' '.join(words[mid:])
                    ])
            else:
                livelier_parts.append(part)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return livelier_parts[:self.max_parts]
    
    def _generate_delay(self) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return random.randint(self.min_delay, self.max_delay)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
message_splitter = MessageSplitter()

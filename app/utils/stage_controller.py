"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç–µ–π–¥–∂–µ–π –æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
"""
import os
import re
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from .living_chat_config_loader import living_chat_config

logger = logging.getLogger(__name__)

class StageController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç–µ–π–¥–∂–µ–π –æ–±—â–µ–Ω–∏—è —Å —è–≤–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ –ª–æ–≥–∞–º–∏"""
    
    def __init__(self):
        self.config = living_chat_config
        self.stage_rules = self._load_stage_rules()
        self.user_stages = {}  
        self.user_question_counts = {}  
        self.user_last_activity = {}
        self.stage_files_cache = {}  # stage_number -> full_text
        logger.info("üéØ [STAGE] StageController —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –∫–µ—à–µ–º —Ñ–∞–π–ª—ñ–≤")
        
    def _load_full_stage_content(self, stage_number: int) -> str:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ü–û–í–ù–ò–ô —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É –∑ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø—Ä–æ–º–ø—Ç—ñ"""
        if stage_number in self.stage_files_cache:
            return self.stage_files_cache[stage_number]
            
        stage_file_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'stages 2', f'stage_{stage_number}.txt')
        
        if os.path.exists(stage_file_path):
            try:
                with open(stage_file_path, 'r', encoding='utf-8') as f:
                    full_content = f.read()
                
                self.stage_files_cache[stage_number] = full_content
                logger.info(f"üìö [STAGE-{stage_number}] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É ({len(full_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å
                time_questions = self._parse_time_questions_from_stage(full_content, stage_number)
                daily_routine = self._parse_daily_routine_from_stage(full_content, stage_number)
                
                logger.info(f"‚è∞ [STAGE-{stage_number}] –ü–∞—Ä—Å–∏–Ω–≥–æ–≤–∞–Ω–Ωi —á–∞—Å–æ–≤i –ø–∏—Ç–∞–Ω–Ω—è: {len(time_questions)} –≥—Ä—É–ø")
                logger.info(f"üìÖ [STAGE-{stage_number}] –ü–∞—Ä—Å–∏–Ω–≥–æ–≤–∞–Ω–∞ —Ä–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è: {len(daily_routine)} —Å–∏–º–≤–æ–ª—ñ–≤")
                
                return full_content
                
            except Exception as e:
                logger.error(f"‚ùå [STAGE-{stage_number}] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Å—Ç–µ–π–¥–∂—É: {e}")
        
        logger.warning(f"‚ö†Ô∏è [STAGE-{stage_number}] –§–∞–π–ª —Å—Ç–µ–π–¥–∂—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {stage_file_path}")
        return ""

    def _parse_time_questions_from_stage(self, content: str, stage_number: int) -> Dict[str, List[str]]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å—Ç–µ–π–¥–∂–∞"""
        import re
        time_questions = {}
        
        logger.info(f"üîç [STAGE-{stage_number}] –ò—â—É –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å—Ç–µ–π–¥–∂–µ...")
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é "–í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:"
        time_section_match = re.search(r'–í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:\s*\n(.*?)(?=\n\n|\n[–ê-–Ø]|\Z)', content, re.DOTALL)
        if time_section_match:
            time_text = time_section_match.group(1)
            logger.info(f"üîç [STAGE-{stage_number}] –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {repr(time_text[:100])}")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–£—Ç—Ä–æ: ¬´...¬ª, ¬´...¬ª"
            for line in time_text.split('\n'):
                line = line.strip()
                if ':' in line and '¬´' in line:
                    time_period = line.split(':')[0].strip().lower()
                    questions_text = line.split(':', 1)[1]
                    
                    logger.info(f"üîç [STAGE-{stage_number}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É: {repr(line)}")
                    logger.info(f"üîç [STAGE-{stage_number}] time_period: '{time_period}'")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                    questions = re.findall(r'¬´([^¬ª]+)¬ª', questions_text)
                    if questions:
                        time_questions[time_period] = questions
                        logger.info(f"‚è∞ [STAGE-{stage_number}] {time_period}: {questions}")
        else:
            logger.warning(f"‚ö†Ô∏è [STAGE-{stage_number}] –°–µ–∫—Ü–∏—è '–í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:' –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
        
        logger.info(f"‚è∞ [STAGE-{stage_number}] –ò—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {time_questions}")
        return time_questions

    def _parse_daily_routine_from_stage(self, content: str, stage_number: int) -> str:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç–µ–π–¥–∂–∞"""
        import re
        
        logger.info(f"üîç [STAGE-{stage_number}] –ò—â—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å –≤ —Å—Ç–µ–π–¥–∂–µ...")
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å" (–º–æ–∂–µ—Ç –±—ã—Ç—å "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å\n" –∏–ª–∏ "–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è")
        patterns = [
            r'–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å.*?\n((?:\d{2}:\d{2}.*?\n?)+)',
            r'–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è.*?\n((?:\d{2}:\d{2}.*?\n?)+)',
        ]
        
        for pattern in patterns:
            routine_match = re.search(pattern, content, re.DOTALL)
            if routine_match:
                routine = routine_match.group(1).strip()
                logger.info(f"üìÖ [STAGE-{stage_number}] –ù–∞–π–¥–µ–Ω —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è ({len(routine)} —Å–∏–º–≤–æ–ª–æ–≤): {repr(routine[:100])}")
                return routine
        
        logger.warning(f"‚ö†Ô∏è [STAGE-{stage_number}] –°–µ–∫—Ü–∏—è '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å' –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
        return ""
        
    def _load_stage_rules(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–µ–π–¥–∂–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        return {
            1: {
                "name": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
                "description": "–ü—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ –Ω–µ –∂–¥–µ—à—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∞ —Å–∞–º–∞ –ø—Ä–æ—è–≤–ª—è–µ—à—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É",
                "themes": {
                    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ": {
                        "slots": ["–û–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å", "–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ"],
                        "completed": False
                    },
                    "–ñ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": {
                        "slots": [
                            "–û—Ç–∫—É–¥–∞ —Ç—ã?",
                            "–ö–∞–∫ –¥–∞–≤–Ω–æ —Ç–∞–º –∂–∏–≤—ë—à—å?", 
                            "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥?",
                            "–ß—Ç–æ —Ç–µ–±–µ —Ç–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                            "–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å?"
                        ],
                        "completed": False
                    },
                    "–†–∞–±–æ—Ç–∞": {
                        "slots": [
                            "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?",
                            "–î–∞–≤–Ω–æ —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                            "–ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
                            "–°–∫–æ–ª—å–∫–æ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–µ–∫—Ä–µ—Ç?",
                            "–õ–µ–≥–∫–æ –ª–∏ —Å–æ–≤–º–µ—â–∞—Ç—å —Å –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é?",
                            "–ö–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏?"
                        ],
                        "completed": False
                    },
                    "–•–æ–±–±–∏": {
                        "slots": [
                            "–ß–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                            "–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω—ã–π?",
                            "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Å–ø–æ—Ä—Ç—É?",
                            "–õ—é–±–∏—à—å –≥–æ—Ç–æ–≤–∏—Ç—å?",
                            "–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ –∫–Ω–∏–≥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?"
                        ],
                        "completed": False
                    },
                    "–õ–∏—á–Ω–æ–µ/–§–ª–∏—Ä—Ç": {
                        "slots": [
                            "–õ–µ–≥–∫–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã",
                            "–ö–∞—Å–∞–Ω–∏–µ –∫ –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
                            "–ü—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"
                        ],
                        "completed": False
                    }
                },
                "response_structure": {
                    "parts": ["—Ä–µ–∞–∫—Ü–∏—è/—ç–º–ø–∞—Ç–∏—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)", "–º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª—å/–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)", "–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"],
                    "limits": ["–Ω–µ –±–æ–ª—å—à–µ 1 –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–ø–ª–∏–∫–µ", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", "–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"]
                },
                "transition_markers": ["–º–µ—Å—Ç–æ", "–≤—Ä–µ–º—è", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏/—É—Å–ø–µ—Ö–∏", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–µ–¥–∞", "–ø–ª–∞–Ω—ã"],
                "max_questions_per_session": 1,
                "question_interval_seconds": 60
            },
            2: {
                "name": "–î—Ä—É–∂–±–∞/—Ñ–ª–∏—Ä—Ç", 
                "description": "–ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Ñ–ª–∏—Ä—Ç–æ–º",
                "themes": {
                    "–¶–µ–ª–∏/–º–µ—á—Ç—ã": {
                        "slots": [
                            "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?",
                            "–ï—Å—Ç—å –ª–∏ –º–µ—á—Ç–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?",
                            "–ß–µ–≥–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è —Å—á–∞—Å—Ç—å—è?",
                            "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–æ –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî –∫—É–¥–∞ –±—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª?"
                        ],
                        "completed": False
                    },
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å": {
                        "slots": [
                            "–£ —Ç–µ–±—è –µ—Å—Ç—å –º–∞—à–∏–Ω–∞?",
                            "–î–∞–≤–Ω–æ –∑–∞ —Ä—É–ª—ë–º?",
                            "–ö–∞–∫–∞—è –º–∞—à–∏–Ω–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
                            "–ö–∞–∫–∞—è —Ç–≤–æ—è –º–∞—à–∏–Ω–∞ –º–µ—á—Ç—ã?"
                        ],
                        "completed": False
                    },
                    "–°–µ–º—å—è": {
                        "slots": [
                            "–ß–∞—Å—Ç–æ –≤–∏–¥–∏—à—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏?",
                            "–ï—Å—Ç—å –±—Ä–∞—Ç—å—è/—Å—ë—Å—Ç—Ä—ã?",
                            "–ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ —Å–∞–º—ã–µ —è—Ä–∫–∏–µ?",
                            "–ë–ª–∏–∂–µ –∫ –º–∞–º–µ –∏–ª–∏ –ø–∞–ø–µ?"
                        ],
                        "completed": False
                    },
                    "–§–ª–∏—Ä—Ç": {
                        "slots": [
                            "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ –¥–µ–≤—É—à–∫–∞—Ö?",
                            "–ö–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
                            "–ë—ã–ª –ª–∏ –∂–µ–Ω–∞—Ç?",
                            "–ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏?"
                        ],
                        "completed": False
                    }
                },
                "response_structure": {
                    "parts": ["—Ä–µ–∞–∫—Ü–∏—è/—ç–º–ø–∞—Ç–∏—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)", "–º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª—å/–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)", "–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"],
                    "limits": ["–Ω–µ –±–æ–ª—å—à–µ 1 –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–ø–ª–∏–∫–µ", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–æ–º", "–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"]
                },
                "transition_markers": ["–ø–ª–∞–Ω—ã", "–±—É–¥—É—â–µ–µ", "–¥–µ–Ω—å–≥–∏", "—Å—á–∞—Å—Ç—å–µ", "–∂–µ–ª–∞–Ω–∏—è", "–º–∞—à–∏–Ω–∞", "–≤–æ–∂–¥–µ–Ω–∏–µ", "—Ä–æ–¥–∏—Ç–µ–ª–∏", "–¥–µ—Ç—Å—Ç–≤–æ", "–∫–∞—á–µ—Å—Ç–≤–∞", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"],
                "max_questions_per_session": 1,
                "question_interval_seconds": 90
            },
            3: {
                "name": "–í–±—Ä–æ—Å",
                "description": "–•–æ—Ä–æ—à–µ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –¥–æ–≤–µ—Ä–∏–µ –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–±—Ä–æ—Å —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
                "themes": {
                    "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å": {
                        "slots": [
                            "–†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è",
                            "–†–∞–±–æ—á–∏–µ –¥–µ–ª–∞",
                            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
                            "–í–µ—á–µ—Ä–Ω–∏–µ –ø–ª–∞–Ω—ã"
                        ],
                        "completed": False
                    },
                    "–¢—Ä–µ–π–¥–∏–Ω–≥": {
                        "slots": [
                            "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (+300$)",
                            "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ –ü–£ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                            "–†–∞—Å—Å–∫–∞–∑ –æ –¥–æ—Ö–æ–¥–∞—Ö",
                            "–ú—è–≥–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å"
                        ],
                        "completed": False
                    },
                    "–†–æ–º–∞–Ω—Ç–∏–∫–∞": {
                        "slots": [
                            "–ö–∞—Å–∞–Ω–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
                            "–ù–∞–º–µ–∫–∏ –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å",
                            "–§–ª–∏—Ä—Ç –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã",
                            "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏"
                        ],
                        "completed": False
                    }
                },
                "response_structure": {
                    "parts": ["–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ª–∏—á–Ω—ã–π —Ñ–∞–∫—Ç/–∫–∞—Å–∞–Ω–∏–µ", "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"],
                    "limits": ["–Ω–µ –¥–∞–≤–∏—Ç—å —Å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º", "—Å–≤—è–∑—ã–≤–∞—Ç—å —Å –µ–≥–æ –º–µ—á—Ç–∞–º–∏", "—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–æ–º–∞–Ω—Ç–∏–∫—É"]
                },
                "transition_markers": ["–¥–µ–Ω—å–≥–∏", "–º–µ—á—Ç—ã", "–ø–ª–∞–Ω—ã", "—Ä–∞–±–æ—Ç–∞", "–æ—Ç–¥—ã—Ö", "–≤–µ—á–µ—Ä", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
                "max_questions_per_session": 1,
                "question_interval_seconds": 120,
                "special_features": ["trading_intro", "romantic_touches", "personal_sharing"]
            }
        }
    
    def get_user_stage(self, user_id: str, message_count: int) -> int:

        current_time = datetime.now().strftime("%H:%M:%S")
        
        if user_id not in self.user_stages:
            self.user_stages[user_id] = 1
            logger.info(f"üéØ [{current_time}] [STAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å—Ç–µ–π–¥–∂ 1 (–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ)")
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç–µ–π–¥–∂–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
        if message_count <= 5:
            stage = 1
            stage_name = "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
        elif message_count <= 15:
            stage = 2  
            stage_name = "–î—Ä—É–∂–±–∞/—Ñ–ª–∏—Ä—Ç"
        else:
            stage = 3
            stage_name = "–í–±—Ä–æ—Å"
            
        if self.user_stages[user_id] != stage:
            old_stage = self.user_stages[user_id]
            old_stage_names = {1: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", 2: "–î—Ä—É–∂–±–∞/—Ñ–ª–∏—Ä—Ç", 3: "–í–±—Ä–æ—Å"}
            old_stage_name = old_stage_names.get(old_stage, f"–°—Ç–µ–π–¥–∂ {old_stage}")
            
            self.user_stages[user_id] = stage
            logger.info(f"üîÑ [{current_time}] [STAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
            logger.info(f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            logger.info(f"   ‚¨ÜÔ∏è  –ü–µ—Ä–µ—Ö–æ–¥: {old_stage_name} ‚Üí {stage_name}")
            logger.info(f"   üéØ –ù–æ–≤—ã–π —Å—Ç–µ–π–¥–∂: {stage} ({stage_name})")
        else:
            logger.info(f"üìç [{current_time}] [STAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å—Ç–µ–π–¥–∂ {stage} ({stage_name}), —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        
        return stage
    
    def should_ask_question(self, user_id: str, stage: int, last_question_time: Optional[datetime] = None) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç–µ–π–¥–∂–µ"""
        rules = self.stage_rules.get(stage, {})
        question_interval = rules.get("question_interval_seconds", 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        if last_question_time:
            time_since_last = datetime.now() - last_question_time
            if time_since_last.total_seconds() < question_interval:
                logger.info(f"‚è∞ [STAGE] –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–ø—Ä–æ—à–ª–æ {time_since_last.total_seconds():.1f}—Å)")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = self.user_question_counts.get(user_id, 0)
        max_questions = rules.get("max_questions", 3)
        
        if question_count >= max_questions:
            logger.info(f"‚ùå [STAGE] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞ {stage} ({question_count}/{max_questions})")
            return False
        
        logger.info(f"‚úÖ [STAGE] –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (—Å—Ç–µ–π–¥–∂ {stage}, –≤–æ–ø—Ä–æ—Å–æ–≤ {question_count}/{max_questions})")
        return True
    
    def get_stage_question(self, user_id: str, stage: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ç–µ–π–¥–∂–∞"""
        rules = self.stage_rules.get(stage, {})
        required_questions = rules.get("required_questions", [])
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        if user_id not in self.user_question_counts:
            self.user_question_counts[user_id] = 0
        self.user_question_counts[user_id] += 1
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
        if required_questions:
            question = required_questions[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞
            logger.info(f"‚ùì [STAGE] –í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ç–µ–π–¥–∂–∞ {stage}: '{question}'")
            return question
        
        return "–∫–∞–∫ –¥–µ–ª–∞?"
    
    def get_stage_instructions(self, stage: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞"""
        rules = self.stage_rules.get(stage, {})
        name = rules.get("name", f"–°—Ç–µ–π–¥–∂ {stage}")
        response_style = rules.get("response_style", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
        forbidden_topics = rules.get("forbidden_topics", [])
        
        instructions = f"""
–°–¢–ï–ô–î–ñ {stage}: {name}
–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê: {response_style}
"""
        
        if forbidden_topics:
            instructions += f"–ò–ó–ë–ï–ì–ê–ô –¢–ï–ú: {', '.join(forbidden_topics)}\n"
        
        logger.info(f"üìã [STAGE] –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞ {stage}: {name}")
        return instructions
    
    def log_stage_activity(self, user_id: str, stage: int, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–µ–π–¥–∂–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        logger.info(f"üéØ [STAGE-{stage}] {timestamp} | {user_id} | {action} | {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.user_last_activity[user_id] = datetime.now()
    
    def get_stage_goals(self, stage_number: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–µ–π–¥–∂–∞"""
        return self.stage_rules.get(stage_number, {}).get("goals", [])
    
    def get_required_info(self, stage_number: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞"""
        return self.stage_rules.get(stage_number, {}).get("required_info", [])
    
    def get_next_question_type(self, user_id: str, stage_number: int) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è"""
        stage_rules = self.stage_rules.get(stage_number, {})
        question_types = stage_rules.get("question_types", [])
        
        if not question_types:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_questions = sorted(question_types, key=lambda x: x.get("priority", 999))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        return sorted_questions[0] if sorted_questions else None
    
    def should_ask_question(self, user_id: str, stage_number: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å"""
        stage_rules = self.stage_rules.get(stage_number, {})
        max_questions = stage_rules.get("max_questions", 0)
        
        current_questions = self.user_question_counts.get(user_id, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        if current_questions >= max_questions:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        question_interval = stage_rules.get("question_interval_seconds", 60)
        last_activity = self.user_last_activity.get(user_id)
        
        if last_activity:
            time_since_last = (datetime.now() - last_activity).total_seconds()
            if time_since_last < question_interval:
                return False
        
        return True
    
    def mark_question_asked(self, user_id: str):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–¥–∞–Ω"""
        if user_id not in self.user_question_counts:
            self.user_question_counts[user_id] = 0
        self.user_question_counts[user_id] += 1
        
        logger.info(f"[STAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å #{self.user_question_counts[user_id]}")
    
    def get_stage_progress(self, user_id: str, stage_number: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–µ–π–¥–∂—É"""
        stage_rules = self.stage_rules.get(stage_number, {})
        questions_asked = self.user_question_counts.get(user_id, 0)
        themes = stage_rules.get("themes", {})
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ü–û–í–ù–ò–ô —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É –∑ —Ñ–∞–π–ª—É
        full_stage_content = self._load_full_stage_content(stage_number)
        
        progress = {
            "stage_name": stage_rules.get("name", f"Stage {stage_number}"),
            "description": stage_rules.get("description", ""),
            "themes": themes,
            "questions_asked": questions_asked,
            "max_questions_per_session": stage_rules.get("max_questions_per_session", 1),
            "response_structure": stage_rules.get("response_structure", {}),
            "transition_markers": stage_rules.get("transition_markers", []),
            "full_stage_text": full_stage_content  # üî• –î–û–î–ê–Ñ–ú–û –ü–û–í–ù–ò–ô –¢–ï–ö–°–¢ –°–¢–ï–ô–î–ñ–£
        }
        
        logger.info(f"üìä [STAGE_PROGRESS] {user_id}: –°—Ç–µ–π–¥–∂ {stage_number} ({progress['stage_name']})")
        logger.info(f"üìä [STAGE_PROGRESS] {user_id}: –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ {questions_asked}/{progress['max_questions_per_session']}")
        logger.info(f"üìä [STAGE_PROGRESS] {user_id}: –¢–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ: {len(themes)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É
        for theme_name, theme_data in themes.items():
            slots = theme_data.get("slots", [])
            completed = theme_data.get("completed", False)
            logger.info(f"üìä [STAGE_PROGRESS] {user_id}: –¢–µ–º–∞ '{theme_name}': {len(slots)} —Å–ª–æ—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed}")
        
        return progress
    
    def get_next_theme_and_slot(self, user_id: str, stage_number: int) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –∏ —Å–ª–æ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        stage_rules = self.stage_rules.get(stage_number, {})
        themes = stage_rules.get("themes", {})
        
        # –ò—â–µ–º —Ç–µ–º—ã —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        uncompleted_themes = []
        for theme_name, theme_data in themes.items():
            if not theme_data.get("completed", False):
                uncompleted_themes.append({
                    "theme_name": theme_name,
                    "slots": theme_data.get("slots", []),
                    "uncompleted_slots": len(theme_data.get("slots", []))
                })
        
        if not uncompleted_themes:
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        next_theme = max(uncompleted_themes, key=lambda x: x["uncompleted_slots"])
        
        return {
            "theme_name": next_theme["theme_name"],
            "next_slot": next_theme["slots"][0] if next_theme["slots"] else None,
            "remaining_slots": next_theme["uncompleted_slots"]
        }
    
    def mark_slot_completed(self, user_id: str, stage_number: int, theme_name: str, slot: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"[STAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–ª–æ—Ç '{slot}' –≤ —Ç–µ–º–µ '{theme_name}' (—ç—Ç–∞–ø {stage_number})")
    
    def get_time_based_questions(self, stage_number: int) -> Dict[str, List[str]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–∏—Ç–∞–Ω–Ω—è –±–∞–∑–æ–≤–∞–Ω—ñ –Ω–∞ —á–∞—Å—ñ –¥–æ–±–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–µ–π–¥–∂—É"""
        current_time = datetime.now().strftime("%H:%M:%S")
        logger.info(f"‚è∞ [{current_time}] [STAGE-{stage_number}] === –û–¢–†–ò–ú–ê–ù–ù–Ø –ß–ê–°–û–í–ò–• –ü–ò–¢–ê–ù–¨ ===")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É
        stage_content = self._load_full_stage_content(stage_number)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å—Ç–µ–π–¥–∂–∞
        stage_time_questions = self._parse_time_questions_from_stage(stage_content, stage_number)
        
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –≤ —Å—Ç–µ–π–¥–∂–µ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        default_questions = {
            "—É—Ç—Ä–æ": ["–ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?", "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", "–ó–∞–≤—Ç—Ä–∞–∫–∞–ª?"],
            "–¥–µ–Ω—å": ["–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å?", "–ß—Ç–æ –µ–ª –Ω–∞ –æ–±–µ–¥?", "–ú–Ω–æ–≥–æ –¥–µ–ª?"], 
            "–≤–µ—á–µ—Ä": ["–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?", "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å?"]
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å—Ç–µ–π–¥–∂–∞ –∏–ª–∏ fallback
        result_questions = stage_time_questions if stage_time_questions else default_questions
        
        logger.info(f"‚è∞ [{current_time}] [STAGE-{stage_number}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(result_questions)} –≥—Ä—É–ø–ø –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for period, questions in result_questions.items():
            logger.info(f"   üìÖ {period}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ - {questions[:2]}...")
        
        return result_questions
    
    def get_daily_schedule_example(self, stage_number: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –¥–ª—è —Å—Ç–µ–π–¥–∂—É"""
        current_time = datetime.now().strftime("%H:%M:%S")
        logger.info(f"üìÖ [{current_time}] [STAGE-{stage_number}] === –û–¢–†–ò–ú–ê–ù–ù–Ø –†–û–ó–ü–û–†–Ø–î–ö–£ –î–ù–Ø ===")
        
        stage_content = self._load_full_stage_content(stage_number)
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç–µ–π–¥–∂–∞
        daily_routine = self._parse_daily_routine_from_stage(stage_content, stage_number)
        
        if daily_routine:
            logger.info(f"üìÖ [{current_time}] [STAGE-{stage_number}] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ä–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è ({len(daily_routine)} —Å–∏–º–≤–æ–ª—ñ–≤)")
            logger.info(f"üìÖ [{current_time}] [STAGE-{stage_number}] –ü—Ä–∏–∫–ª–∞–¥: {daily_routine[:50]}...")
            return daily_routine
        else:
            logger.warning(f"üìÖ [{current_time}] [STAGE-{stage_number}] –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return ""
    
    def get_response_structure_instructions(self, stage_number: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞"""
        stage_rules = self.stage_rules.get(stage_number, {})
        response_structure = stage_rules.get("response_structure", {})
        
        parts = response_structure.get("parts", [])
        limits = response_structure.get("limits", [])
        
        instructions = f"–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:\n"
        for i, part in enumerate(parts, 1):
            instructions += f"{i}. {part}\n"
        
        if limits:
            instructions += f"\n–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:\n"
            for limit in limits:
                instructions += f"- {limit}\n"
        
        return instructions
    
    def reset_user_stage(self, user_id: str):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–µ–π–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_stages:
            old_stage = self.user_stages[user_id]
            del self.user_stages[user_id]
            logger.info(f"üîÑ [STAGE] –°–±—Ä–æ—à–µ–Ω —Å—Ç–µ–π–¥–∂ {old_stage} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if user_id in self.user_question_counts:
            del self.user_question_counts[user_id]
        
        if user_id in self.user_last_activity:
            del self.user_last_activity[user_id]
    
    def get_stage_stats(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–µ–π–¥–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stage = self.user_stages.get(user_id, 1)
        question_count = self.user_question_counts.get(user_id, 0)
        rules = self.stage_rules.get(stage, {})
        
        return {
            "current_stage": stage,
            "stage_name": rules.get("name", f"–°—Ç–µ–π–¥–∂ {stage}"),
            "questions_asked": question_count,
            "max_questions": rules.get("max_questions", 3),
            "can_ask_question": question_count < rules.get("max_questions", 3)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
stage_controller = StageController()

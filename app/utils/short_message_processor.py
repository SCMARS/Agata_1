
import re
import logging
import os
from typing import List, Dict, Any, Tuple
from datetime import datetime, timedelta
from .living_chat_config_loader import living_chat_config
from .openai_text_analyzer import OpenAITextAnalyzer
from .dynamic_content_generator import DynamicContentGenerator

logger = logging.getLogger(__name__)

class ShortMessageProcessor:
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = living_chat_config
        self.short_messages_config = self.config.get_short_messages_config()
        self.combination_patterns_config = self.config.get_combination_patterns()
        self.connectors_config = self.config.get_connectors()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.max_wait_seconds = self.short_messages_config.get("max_wait_seconds", 30)
        self.short_message_threshold = self.short_messages_config.get("short_message_threshold", 50)
        self.quick_sequence_threshold = self.short_messages_config.get("quick_sequence_threshold", 5)
        
        self.user_sessions = {}  
        
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            self.openai_analyzer = OpenAITextAnalyzer(api_key)
            self.dynamic_generator = DynamicContentGenerator()
            logger.info("OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ñ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")
        else:
            self.openai_analyzer = None
            self.dynamic_generator = None
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (fallback)
        self.combination_patterns = self._load_combination_patterns()
    
    def _load_combination_patterns(self) -> List[Tuple[str, str, str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        patterns = []
        for pattern_config in self.combination_patterns_config:
            pattern1 = pattern_config.get("pattern1", "")
            pattern2 = pattern_config.get("pattern2", "")
            connector = pattern_config.get("connector", ", ")
            if pattern1 and pattern2:
                patterns.append((pattern1, pattern2, connector))
        return patterns
    
    def process_user_messages(self, user_id: str, messages: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        if not messages:
            return {"combined_text": "", "message_count": 0, "is_short_sequence": False}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                "last_activity": datetime.now(),
                "message_buffer": [],
                "total_messages": 0
            }
        
        session = self.user_sessions[user_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        session["last_activity"] = datetime.now()
        session["total_messages"] += len(messages)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        for msg in messages:
            if msg.get("role") == "user":
                content = msg.get("content", "").strip()
                if content:
                    session["message_buffer"].append({
                        "content": content,
                        "timestamp": datetime.now()
                    })
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ max_wait_seconds)
        cutoff_time = datetime.now() - timedelta(seconds=self.max_wait_seconds)
        session["message_buffer"] = [
            msg for msg in session["message_buffer"] 
            if msg["timestamp"] > cutoff_time
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        combined_text = self._combine_messages(session["message_buffer"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        is_short_sequence = self._is_short_sequence(session["message_buffer"])
        
        logger.info(f"üîÑ [SHORT_MSG] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(session['message_buffer'])} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"   üìù –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {[msg['content'] for msg in session['message_buffer']]}")
        logger.info(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{combined_text[:100]}{'...' if len(combined_text) > 100 else ''}'")
        logger.info(f"   ‚ö° –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {is_short_sequence}")
        
        return {
            "combined_text": combined_text,
            "message_count": len(session["message_buffer"]),
            "is_short_sequence": is_short_sequence,
            "original_messages": [msg["content"] for msg in session["message_buffer"]]
        }
    
    def _combine_messages(self, messages: List[Dict[str, Any]]) -> str:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        if not messages:
            return ""
        
        if len(messages) == 1:
            return messages[0]["content"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        texts = [msg["content"] for msg in messages]
        
        # –ü—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        combined = self._try_pattern_combination(texts)
        if combined:
            return combined
        
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏
        return self._logical_combination(texts)
    
    def _try_pattern_combination(self, texts: List[str]) -> str:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–¥–∏–Ω–∞–º—ñ—á–Ω–æ —á–µ—Ä–µ–∑ OpenAI)
        """
        if len(texts) < 2:
            return ""
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–º—ñ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—É
        if self.dynamic_generator:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑'—î–¥–Ω—É–≤–∞—á –¥–∏–Ω–∞–º—ñ—á–Ω–æ
                connector = self.dynamic_generator.generate_conversation_connectors(texts[0], texts[1])
                
                # –û–±'—î–¥–Ω—É—î–º–æ –∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—é –∑–≤'—è–∑–∫–æ—é
                if len(texts) == 2:
                    return f"{texts[0]} {connector} {texts[1]}"
                else:
                    combined_first_two = f"{texts[0]} {connector} {texts[1]}"
                    return f"{combined_first_two}. {' '.join(texts[2:])}"
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑'—î–¥–Ω—É–≤–∞—á–∞: {e}")
        
        # Fallback –¥–æ —Ö–∞—Ä–¥–∫–æ–¥—É —è–∫—â–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
        for pattern1, pattern2, connector in self.combination_patterns:
            if (re.search(pattern1, texts[0].lower()) and 
                re.search(pattern2, texts[1].lower())):
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–π —Å–≤—è–∑–∫–æ–π
                if len(texts) == 2:
                    return f"{texts[0]}{connector}{texts[1].lower()}"
                else:
                    return f"{texts[0]}{connector}{texts[1].lower()}. {' '.join(texts[2:])}"
        
        return ""
    
    def _logical_combination(self, texts: List[str]) -> str:
        """
        –õ–æ–≥–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏—Ö —Ç–∏–ø–∞
        """
        if len(texts) == 1:
            return texts[0]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π
        message_type = self._analyze_message_types(texts)
        logger.info(f"[SHORT_MSG] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {message_type}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        if message_type == "split_sentence":
            return self._combine_split_sentence(texts)
        elif message_type == "sequential_questions":
            return self._combine_sequential_questions(texts)
        elif message_type == "different_topics":
            return self._combine_different_topics(texts)
        else:
            return self._combine_default(texts)
    
    def _analyze_message_types(self, texts: List[str]) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞–∑–±–∏—Ç—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        if self._is_split_sentence(texts):
            return "split_sentence"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_count = sum(1 for text in texts if text.strip().endswith('?'))
        if question_count > 1:
            return "sequential_questions"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–Ω—ã–µ –ª–∏ —Ç–µ–º—ã
        if len(texts) > 2 and self._are_different_topics(texts):
            return "different_topics"
        
        return "default"
    
    def _is_split_sentence(self, texts: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–∏–º —Ä–∞–∑–±–∏—Ç—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º"""
        if len(texts) < 2:
            return False
        
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        first = texts[0].strip()
        if first.endswith(('.', '!', '?', ',')):
            return False
        
        # –ï—Å–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
        combined = " ".join(texts)
        return len(combined) < 120
    
    def _are_different_topics(self, texts: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞—Å–∞—é—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        all_words = []
        for text in texts:
            words = [w.lower() for w in text.split() if len(w) > 3]
            all_words.extend(words)
        
        unique_words = len(set(all_words))
        total_words = len(all_words)
        
        return unique_words > total_words * 0.7  # –ú–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ = —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
    
    def _combine_split_sentence(self, texts: List[str]) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞–∑–±–∏—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ"""
        result = " ".join(texts)
        logger.info(f"[SHORT_MSG] –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Ä–∞–∑–±–∏—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{result}'")
        return result
    
    def _combine_sequential_questions(self, texts: List[str]) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        result = texts[0]
        
        for i, text in enumerate(texts[1:], 1):
            if text.strip().endswith('?'):
                result += f" –ò {text.lower()}"
            else:
                result += f" {text}"
        
        logger.info(f"[SHORT_MSG] –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: '{result}'")
        return result
    
    def _combine_different_topics(self, texts: List[str]) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏"""
        result = texts[0]
        
        for i, text in enumerate(texts[1:], 1):
            if i == 1:
                result += f" –ê –µ—â–µ {text.lower()}"
            else:
                result += f" –ò {text.lower()}"
        
        logger.info(f"[SHORT_MSG] –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã: '{result}'")
        return result
    
    def _combine_default(self, texts: List[str]) -> str:
        """–û–±—ã—á–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏"""
        result = texts[0]
        
        for i, text in enumerate(texts[1:], 1):
            previous_text = texts[i-1] if i > 0 else ""
            connector = self._get_connector(text, i == len(texts) - 1, previous_text)
            
            if connector:
                result += f" {connector} {text.lower()}"
            else:
                result += f" {text.lower()}"
        
        logger.info(f"[SHORT_MSG] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: '{result}'")
        return result
    
    def _get_connector(self, text: str, is_last: bool, previous_text: str = "") -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤—è–∑–∫—É –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é OpenAI
        """
        # –ï—Å–ª–∏ –µ—Å—Ç—å OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.openai_analyzer and previous_text:
            try:
                logger.info(f"ü§ñ [OPENAI] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∫—É –¥–ª—è: '{previous_text}' -> '{text}'")
                connector = self.openai_analyzer.generate_connector(previous_text, text)
                logger.info(f"   üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤—è–∑–∫–∞: '{connector}'")
                return connector
            except Exception as e:
                logger.error(f"‚ùå [OPENAI] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∫–∏: {e}")
        
        # Fallback –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        text_lower = text.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        question_words = self.config.get_emotions("question_words")
        emotion_words = self.config.get_emotions("emotion_words")
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–∞
        if question_words and any(text_lower.startswith(word) for word in question_words):
            return self.connectors_config.get("question_start", "–ê")
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ—Ü–∏–∏
        if emotion_words and any(text_lower.startswith(word) for word in emotion_words):
            return self.connectors_config.get("emotion_start", "–ö—Å—Ç–∞—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        short_response_words = self.config.get_emotions("short_response_words")
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ (1-2 —Å–ª–æ–≤–∞) –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if (len(text.split()) <= 2 or 
            (short_response_words and any(text_lower.startswith(word) for word in short_response_words))):
            return self.connectors_config.get("short_message", "–∏")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_last:
            return self.connectors_config.get("last_message", "–ö—Ä–æ–º–µ —Ç–æ–≥–æ")
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return self.connectors_config.get("default", "–ê")
    
    def _is_short_sequence(self, messages: List[Dict[str, Any]]) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–π (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        """
        if len(messages) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏–µ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        all_short = all(len(msg["content"]) < self.short_message_threshold for msg in messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        if len(messages) >= 2:
            time_diffs = []
            for i in range(1, len(messages)):
                diff = (messages[i]["timestamp"] - messages[i-1]["timestamp"]).total_seconds()
                time_diffs.append(diff)
            
            all_quick = all(diff < self.quick_sequence_threshold for diff in time_diffs)
        else:
            all_quick = True
        
        return all_short and all_quick
    
    def clear_user_session(self, user_id: str):
        """
        –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
            logger.info(f"–û—á–∏—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_session_info(self, user_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_sessions:
            return {"message_count": 0, "last_activity": None}
        
        session = self.user_sessions[user_id]
        return {
            "message_count": len(session["message_buffer"]),
            "last_activity": session["last_activity"],
            "total_messages": session["total_messages"]
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
short_message_processor = ShortMessageProcessor()

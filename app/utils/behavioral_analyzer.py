"""
Behavioral Analyzer - –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from collections import Counter

class BehavioralAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è Agatha
    
    –ó–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    1. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç–º–æ—Ü–∏–∏, —Ç–µ–º—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
    2. –í—ã–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è PromptComposer
    """
    
    def __init__(self):
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.emotion_patterns = {
            'positive': {
                'keywords': ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', 
                           '—Ä–∞–¥—É—é—Å—å', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≤–æ—Å—Ç–æ—Ä–≥', '—É—Ä–∞', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–∫—Ä—É—Ç–æ'],
                'emojis': ['üòä', 'üòÑ', 'üòÅ', 'üéâ', 'üëç', '‚ù§Ô∏è', 'üòç'],
                'punctuation': ['!', '!!']
            },
            'negative': {
                'keywords': ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '–ø—Ä–æ–±–ª–µ–º—ã', '–±–µ–¥–∞',
                           '–ø–æ—Ç–µ—Ä—è–ª', '–ø–æ—Ç–µ—Ä—è', '–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å', '–≤–∞–ª–∏—Ç—Å—è –∏–∑ —Ä—É–∫',
                           '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–ø–æ–¥–∞–≤–ª–µ–Ω', '—Ç—è–∂–µ–ª–æ', '—Ç—Ä—É–¥–Ω–æ', '–∫–æ—à–º–∞—Ä'],
                'emojis': ['üò¢', 'üò≠', 'üòû', 'üíî', 'üòî', 'üòü'],
                'punctuation': ['...', '((', '))']
            },
            'excited': {
                'keywords': ['–≤–æ–∑–±—É–∂–¥–µ–Ω', '–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω', '–Ω–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è', '–ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ',
                           '–æ–±–æ–∂–∞—é', '–æ–±–∞–ª–¥–µ—Ç—å', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ'],
                'emojis': ['ü§©', 'üò≤', 'üöÄ', '‚ö°'],
                'punctuation': ['!!!', '!?']
            },
            'angry': {
                'keywords': ['–∑–ª–æ–π', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–¥–æ—Å—Ç–∞–ª', '–Ω–∞–¥–æ–µ–ª–æ',
                           '—Å–∏–ª –Ω–µ—Ç', '–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫', '–≥–ª—É–ø–æ', '–≤–æ–∑–º—É—â–µ–Ω'],
                'emojis': ['üò†', 'üò°', 'ü§¨', 'üí¢'],
                'punctuation': ['!', '!!!']
            },
            'anxious': {
                'keywords': ['–±–µ—Å–ø–æ–∫–æ—é—Å—å', '–≤–æ–ª–Ω—É—é—Å—å', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '—Ç—Ä–µ–≤–æ–∂–Ω–æ', '–±–æ—é—Å—å',
                           '–Ω–µ—Ä–≤–Ω–∏—á–∞—é', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—à–Ω–æ'],
                'emojis': ['üò∞', 'üò®', 'üò¨', 'ü§Ø'],
                'punctuation': ['...']
            },
            'tired': {
                'keywords': ['—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–æ—Å—Ç—å', '–≤—ã–º–∞—Ç—ã–≤–∞–µ—Ç', '–Ω–µ—Ç —Å–∏–ª', '–∏–∑–º–æ—Ç–∞–Ω',
                           '—Å–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å', '—Ç—è–∂–µ–ª—ã–π –¥–µ–Ω—å', '–º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã'],
                'emojis': ['üò¥', 'ü•±', 'üò™'],
                'punctuation': ['...']
            },
            'confused': {
                'keywords': ['–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–∑–∞–ø—É—Ç–∞–ª—Å—è', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–Ω–µ –∑–Ω–∞—é',
                           '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –±—ã—Ç—å', '—Ä–∞—Å—Ç–µ—Ä—è–Ω'],
                'emojis': ['üòï', 'ü§î', 'üòµ‚Äçüí´'],
                'punctuation': ['???', '??']
            }
        }
        
        # –¢–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.topic_patterns = {
            'personal_life': ['—Å–µ–º—å—è', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '–¥—Ä—É–∂–±–∞', '–ª–∏—á–Ω–æ–µ'],
            'work_career': ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∫–æ–ª–ª–µ–≥–∏', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–ø—Ä–æ–µ–∫—Ç'],
            'hobbies': ['—Ö–æ–±–±–∏', '—É–≤–ª–µ—á–µ–Ω–∏–µ', '—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä—ã', '—á—Ç–µ–Ω–∏–µ', '—Ñ–∏–ª—å–º—ã'],
            'health': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–±–æ–ª–µ—é', '–≤—Ä–∞—á', '–ª–µ—á–µ–Ω–∏–µ', '—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ', '–±–æ–ª—å'],
            'dreams_goals': ['–º–µ—á—Ç—ã', '—Ü–µ–ª–∏', '–ø–ª–∞–Ω—ã', '—Ö–æ—á—É', '–Ω–∞–¥–µ—é—Å—å', '—Å—Ç—Ä–µ–º–ª—é—Å—å'],
            'problems': ['–ø—Ä–æ–±–ª–µ–º–∞', '—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–ø–æ–º–æ—â—å'],
            'philosophical': ['—Å–º—ã—Å–ª', '–∂–∏–∑–Ω—å', '–¥—É—à–∞', '–º—ã—Å–ª–∏', '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è']
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        self.communication_patterns = {
            'question_heavy': r'\?.*\?|\? .+\?',  # –ú–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            'exclamation_heavy': r'!.*!|! .+!',  # –ú–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–π
            'long_sentences': r'.{100,}',  # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            'short_bursts': r'^.{1,20}$',  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            'storytelling': r'(—Å–Ω–∞—á–∞–ª–∞|–ø–æ—Ç–æ–º|–∑–∞—Ç–µ–º|–≤ –∏—Ç–æ–≥–µ|–∏—Å—Ç–æ—Ä–∏—è)',  # –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π
            'seeking_advice': r'(—á—Ç–æ –¥–µ–ª–∞—Ç—å|–∫–∞–∫ –±—ã—Ç—å|–ø–æ—Å–æ–≤–µ—Ç—É–π|–ø–æ–º–æ–≥–∏)',  # –ü—Ä–æ—Å—å–±–∞ —Å–æ–≤–µ—Ç–∞
            'sharing_emotions': r'(—á—É–≤—Å—Ç–≤—É—é|–æ—â—É—â–∞—é|–ø–µ—Ä–µ–∂–∏–≤–∞—é|–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)'  # –î–µ–ª–∏—Ç—Å—è —ç–º–æ—Ü–∏—è–º–∏
        }
    
    def analyze_user_behavior(self, messages: List[Dict], user_profile: Dict = None,
                                  conversation_context: Dict = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            {
                'dominant_emotion': str,
                'emotional_intensity': float,
                'primary_topics': List[str],
                'communication_style': str,
                'relationship_needs': List[str],
                'recommended_strategy': str,
                'strategy_confidence': float,
                'behavioral_adjustments': Dict[str, Any]
            }
        """
        if not messages:
            return self._get_default_analysis()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in messages if msg.get('role') == 'user']
        
        if not user_messages:
            return self._get_default_analysis()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –≤–∞–∂–Ω–µ–µ)
        recent_messages = user_messages[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        all_content = ' '.join([msg.get('content', '') for msg in recent_messages])
        
        # 1. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        emotion_analysis = self._analyze_emotions(all_content, recent_messages)
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
        topic_analysis = self._analyze_topics(all_content)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏  
        communication_analysis = self._analyze_communication_style(recent_messages)
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        relationship_analysis = self._analyze_relationship_needs(
            all_content, user_profile, conversation_context
        )
        
        # 5. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        strategy_choice = self._choose_strategy(
            emotion_analysis, topic_analysis, communication_analysis,
            relationship_analysis, user_profile, conversation_context
        )
        
        return {
            'dominant_emotion': emotion_analysis['dominant_emotion'],
            'emotional_intensity': emotion_analysis['intensity'],
            'emotional_stability': emotion_analysis['stability'],
            'primary_topics': topic_analysis['primary_topics'],
            'topic_focus': topic_analysis['focus_level'],
            'communication_style': communication_analysis['style'],
            'engagement_level': communication_analysis['engagement'],
            'relationship_needs': relationship_analysis['needs'],
            'intimacy_preference': relationship_analysis['intimacy_level'],
            'recommended_strategy': strategy_choice['strategy'],
            'strategy_confidence': strategy_choice['confidence'],
            'behavioral_adjustments': strategy_choice['adjustments'],
            'context_factors': strategy_choice['context_factors']
        }
    
    def _analyze_emotions(self, content: str, messages: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        content_lower = content.lower()
        emotion_scores = {}
        
        # –ü–æ–¥—Å—á–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        for emotion, patterns in self.emotion_patterns.items():
            score = 0
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in patterns['keywords']:
                score += content_lower.count(keyword) * 2
            
            # –≠–º–æ–¥–∑–∏
            for emoji in patterns['emojis']:
                score += content.count(emoji) * 3
            
            # –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
            for punct in patterns['punctuation']:
                score += content.count(punct) * 1
            
            emotion_scores[emotion] = score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
        if not any(emotion_scores.values()):
            dominant_emotion = 'neutral'
            intensity = 0.3
        else:
            dominant_emotion = max(emotion_scores, key=emotion_scores.get)
            max_score = emotion_scores[dominant_emotion]
            intensity = min(max_score / 10.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        stability = self._calculate_emotional_stability(messages)
        
        return {
            'dominant_emotion': dominant_emotion,
            'intensity': intensity,
            'stability': stability,
            'emotion_scores': emotion_scores
        }
    
    def _analyze_topics(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        content_lower = content.lower()
        topic_scores = {}
        
        for topic, keywords in self.topic_patterns.items():
            score = sum(content_lower.count(keyword) for keyword in keywords)
            if score > 0:
                topic_scores[topic] = score
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        sorted_topics = sorted(topic_scores.items(), key=lambda x: x[1], reverse=True)
        primary_topics = [topic for topic, score in sorted_topics[:3]]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Ç–µ–º–∞—Ö
        total_score = sum(topic_scores.values())
        focus_level = 'focused' if len(primary_topics) <= 2 and total_score > 3 else 'diverse'
        
        return {
            'primary_topics': primary_topics,
            'topic_scores': topic_scores,
            'focus_level': focus_level
        }
    
    def _analyze_communication_style(self, messages: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        if not messages:
            return {'style': 'balanced', 'engagement': 'moderate'}
        
        all_content = ' '.join([msg.get('content', '') for msg in messages])
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        pattern_matches = {}
        for pattern_name, pattern in self.communication_patterns.items():
            matches = len(re.findall(pattern, all_content, re.IGNORECASE))
            pattern_matches[pattern_name] = matches
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        message_lengths = [len(msg.get('content', '')) for msg in messages]
        avg_length = sum(message_lengths) / len(message_lengths)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (engagement)
        engagement_level = 'high' if len(messages) > 3 else 'moderate' if len(messages) > 1 else 'low'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
        style = 'balanced'
        if pattern_matches.get('question_heavy', 0) > 2:
            style = 'inquisitive'
        elif pattern_matches.get('storytelling', 0) > 0 and avg_length > 100:
            style = 'narrative'
        elif pattern_matches.get('sharing_emotions', 0) > 1:
            style = 'emotional'
        elif pattern_matches.get('seeking_advice', 0) > 0:
            style = 'advice_seeking'
        elif avg_length < 30:
            style = 'concise'
        elif pattern_matches.get('exclamation_heavy', 0) > 2:
            style = 'expressive'
        
        return {
            'style': style,
            'engagement': engagement_level,
            'average_length': avg_length,
            'pattern_matches': pattern_matches
        }
    
    def _analyze_relationship_needs(self, content: str, user_profile: Dict = None,
                                         conversation_context: Dict = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"""
        content_lower = content.lower()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
        need_indicators = {
            'emotional_support': ['–ø–æ–¥–¥–µ—Ä–∂–∏', '–ø–æ–º–æ–≥–∏', '—Ç—Ä—É–¥–Ω–æ', '—Å–ª–æ–∂–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–æ–¥–∏–Ω–æ–∫–æ'],
            'intellectual_stimulation': ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–¥—É–º–∞—é', '–º–Ω–µ–Ω–∏–µ', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '—Å–º—ã—Å–ª'],
            'playful_interaction': ['–≤–µ—Å–µ–ª–æ', '—Å–º–µ—à–Ω–æ', '—à—É—Ç–∫–∞', '–∏–≥—Ä–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ'],
            'deep_connection': ['–±–ª–∏–∑–æ—Å—Ç—å', '–¥–æ–≤–µ—Ä–∏–µ', '—Å–µ–∫—Ä–µ—Ç', '–ª–∏—á–Ω–æ–µ', '—Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ'],
            'guidance': ['—Å–æ–≤–µ—Ç', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –±—ã—Ç—å', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ä–µ—à–µ–Ω–∏–µ'],
            'validation': ['–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–ø–æ–Ω–∏–º–∞–µ—à—å', '—Å–æ–≥–ª–∞—Å–Ω–∞', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å']
        }
        
        need_scores = {}
        for need, indicators in need_indicators.items():
            score = sum(content_lower.count(indicator) for indicator in indicators)
            need_scores[need] = score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        primary_needs = [need for need, score in need_scores.items() if score > 0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏
        intimacy_indicators = {
            'high': ['—Å–µ–∫—Ä–µ—Ç', '–ª–∏—á–Ω–æ–µ', '—Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ', '–¥–æ–≤–µ—Ä–∏–µ', '–±–ª–∏–∑–∫–æ'],
            'medium': ['–¥—Ä—É–≥', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–æ–±—â–µ–Ω–∏–µ'],
            'low': ['–ø–æ–º–æ—â—å', '—Å–æ–≤–µ—Ç', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤–æ–ø—Ä–æ—Å']
        }
        
        intimacy_level = 'medium'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for level, indicators in intimacy_indicators.items():
            if any(indicator in content_lower for indicator in indicators):
                intimacy_level = level
                break
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if conversation_context:
            relationship_stage = conversation_context.get('relationship_stage', 'introduction')
            if relationship_stage in ['close_friend', 'confidant']:
                intimacy_level = 'high'
            elif relationship_stage in ['introduction', 'getting_acquainted']:
                intimacy_level = 'low'
        
        return {
            'needs': primary_needs[:3],  # –¢–æ–ø-3 –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            'need_scores': need_scores,
            'intimacy_level': intimacy_level
        }
    
    def _choose_strategy(self, emotion_analysis: Dict, topic_analysis: Dict,
                               communication_analysis: Dict, relationship_analysis: Dict,
                               user_profile: Dict = None, conversation_context: Dict = None) -> Dict[str, Any]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤–µ—Å–∞–º–∏
        strategy_scores = {
            'caring': 0.0,
            'playful': 0.0,
            'mysterious': 0.0,
            'reserved': 0.0,
            'intellectual': 0.0,
            'supportive': 0.0
        }
        
        dominant_emotion = emotion_analysis['dominant_emotion']
        emotional_intensity = emotion_analysis['intensity']
        primary_needs = relationship_analysis['needs']
        communication_style = communication_analysis['style']
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        if dominant_emotion in ['negative', 'anxious', 'tired']:
            strategy_scores['caring'] += 3.0
            strategy_scores['supportive'] += 2.5
            if emotional_intensity > 0.6:
                strategy_scores['caring'] += 1.0
        
        elif dominant_emotion in ['positive', 'excited']:
            strategy_scores['playful'] += 2.5
            strategy_scores['caring'] += 1.5
            if emotional_intensity > 0.6:
                strategy_scores['playful'] += 1.0
        
        elif dominant_emotion == 'confused' or communication_style == 'advice_seeking':
            strategy_scores['supportive'] += 3.5
            strategy_scores['intellectual'] += 1.5
            strategy_scores['caring'] += 1.0
        
        elif dominant_emotion == 'angry':
            strategy_scores['reserved'] += 2.0
            strategy_scores['supportive'] += 1.5
        
        else:  # neutral
            strategy_scores['mysterious'] += 1.5
            strategy_scores['playful'] += 1.0
            strategy_scores['caring'] += 1.0
        
        # –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        for need in primary_needs:
            if need == 'emotional_support':
                strategy_scores['caring'] += 2.0
                strategy_scores['supportive'] += 1.5
            elif need == 'intellectual_stimulation':
                strategy_scores['intellectual'] += 2.5
                strategy_scores['mysterious'] += 1.5
            elif need == 'playful_interaction':
                strategy_scores['playful'] += 2.5
            elif need == 'deep_connection':
                strategy_scores['caring'] += 1.5
                strategy_scores['mysterious'] += 1.0
            elif need == 'guidance':
                strategy_scores['supportive'] += 2.0
                strategy_scores['intellectual'] += 1.0
            elif need == 'validation':
                strategy_scores['caring'] += 1.5
                strategy_scores['supportive'] += 1.0
        
        # –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if communication_style == 'emotional':
            strategy_scores['caring'] += 1.5
            strategy_scores['supportive'] += 1.0
        elif communication_style == 'inquisitive':
            strategy_scores['intellectual'] += 1.5
            strategy_scores['mysterious'] += 1.0
        elif communication_style == 'narrative':
            strategy_scores['caring'] += 1.0
            strategy_scores['intellectual'] += 1.0
        elif communication_style == 'expressive':
            strategy_scores['playful'] += 1.5
        elif communication_style == 'advice_seeking':
            strategy_scores['supportive'] += 3.0
            strategy_scores['intellectual'] += 1.5
        elif communication_style == 'concise':
            strategy_scores['reserved'] += 1.0
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if conversation_context:
            relationship_stage = conversation_context.get('relationship_stage', 'introduction')
            personalization_level = conversation_context.get('personalization_level', 0.0)
            
            if relationship_stage == 'introduction':
                strategy_scores['mysterious'] += 1.0
                strategy_scores['playful'] += 0.5
            elif relationship_stage in ['building_trust', 'close_friend']:
                strategy_scores['caring'] += 1.5
                strategy_scores['supportive'] += 1.0
            elif relationship_stage == 'confidant':
                strategy_scores['caring'] += 2.0
                strategy_scores['intellectual'] += 1.0
            
            # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            if personalization_level > 0.7:
                strategy_scores['caring'] += 1.0
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        best_strategy = max(strategy_scores, key=strategy_scores.get)
        confidence = strategy_scores[best_strategy] / max(sum(strategy_scores.values()), 1.0)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        adjustments = self._create_behavioral_adjustments(
            best_strategy, emotion_analysis, relationship_analysis, communication_analysis
        )
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        context_factors = {
            'emotional_state': dominant_emotion,
            'relationship_stage': conversation_context.get('relationship_stage', 'introduction') if conversation_context else 'introduction',
            'primary_need': primary_needs[0] if primary_needs else 'general_interaction',
            'communication_preference': communication_style
        }
        
        return {
            'strategy': best_strategy,
            'confidence': min(confidence, 1.0),
            'adjustments': adjustments,
            'context_factors': context_factors,
            'alternative_strategies': sorted(strategy_scores.items(), key=lambda x: x[1], reverse=True)[1:3]
        }
    
    def _create_behavioral_adjustments(self, strategy: str, emotion_analysis: Dict,
                                             relationship_analysis: Dict, communication_analysis: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        adjustments = {
            'tone_modifiers': [],
            'response_style': 'normal',
            'empathy_level': 'medium',
            'question_tendency': 'moderate',
            'emotional_mirroring': False,
            'personal_disclosure': 'minimal',
            'humor_usage': 'occasional',
            'support_intensity': 'medium'
        }
        
        emotional_intensity = emotion_analysis['intensity']
        dominant_emotion = emotion_analysis['dominant_emotion']
        intimacy_level = relationship_analysis['intimacy_level']
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_base_settings = {
            'caring': {
                'empathy_level': 'high',
                'support_intensity': 'high',
                'personal_disclosure': 'moderate',
                'tone_modifiers': ['warm', 'gentle', 'nurturing']
            },
            'playful': {
                'humor_usage': 'frequent',
                'tone_modifiers': ['light', 'energetic', 'fun'],
                'question_tendency': 'high',
                'response_style': 'casual'
            },
            'mysterious': {
                'personal_disclosure': 'minimal',
                'tone_modifiers': ['intriguing', 'thoughtful'],
                'question_tendency': 'strategic',
                'response_style': 'subtle'
            },
            'reserved': {
                'empathy_level': 'measured',
                'personal_disclosure': 'minimal',
                'tone_modifiers': ['calm', 'measured'],
                'support_intensity': 'gentle'
            },
            'intellectual': {
                'question_tendency': 'analytical',
                'tone_modifiers': ['thoughtful', 'curious'],
                'personal_disclosure': 'intellectual',
                'response_style': 'analytical'
            },
            'supportive': {
                'empathy_level': 'high',
                'support_intensity': 'high',
                'tone_modifiers': ['encouraging', 'understanding'],
                'question_tendency': 'caring'
            }
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if strategy in strategy_base_settings:
            adjustments.update(strategy_base_settings[strategy])
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π
        if dominant_emotion in ['negative', 'anxious'] and emotional_intensity > 0.6:
            adjustments['empathy_level'] = 'very_high'
            adjustments['support_intensity'] = 'high'
            adjustments['emotional_mirroring'] = True
            adjustments['humor_usage'] = 'minimal'
        
        elif dominant_emotion == 'excited' and emotional_intensity > 0.7:
            adjustments['emotional_mirroring'] = True
            adjustments['tone_modifiers'].append('enthusiastic')
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –±–ª–∏–∑–æ—Å—Ç–∏
        if intimacy_level == 'high':
            adjustments['personal_disclosure'] = 'high'
            adjustments['empathy_level'] = 'very_high'
        elif intimacy_level == 'low':
            adjustments['personal_disclosure'] = 'minimal'
            adjustments['empathy_level'] = 'measured'
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        comm_style = communication_analysis['style']
        if comm_style == 'concise':
            adjustments['response_style'] = 'concise'
        elif comm_style == 'narrative':
            adjustments['response_style'] = 'detailed'
        elif comm_style == 'inquisitive':
            adjustments['question_tendency'] = 'responsive'
        
        return adjustments
    
    def _calculate_emotional_stability(self, messages: List[Dict]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if len(messages) < 2:
            return 0.8  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        
        emotions = []
        for msg in messages[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            content = msg.get('content', '').lower()
            msg_emotion = 'neutral'
            
            for emotion, patterns in self.emotion_patterns.items():
                score = 0
                for keyword in patterns['keywords']:
                    score += content.count(keyword)
                if score > 0:
                    msg_emotion = emotion
                    break
            
            emotions.append(msg_emotion)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
        emotion_changes = sum(1 for i in range(1, len(emotions)) 
                            if emotions[i] != emotions[i-1])
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å = 1 - (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π / –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        max_changes = len(emotions) - 1
        stability = 1.0 - (emotion_changes / max_changes) if max_changes > 0 else 1.0
        
        return max(0.0, min(1.0, stability))
    
    def _get_default_analysis(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'dominant_emotion': 'neutral',
            'emotional_intensity': 0.3,
            'emotional_stability': 0.8,
            'primary_topics': ['general'],
            'topic_focus': 'diverse',
            'communication_style': 'balanced',
            'engagement_level': 'moderate',
            'relationship_needs': ['general_interaction'],
            'intimacy_preference': 'medium',
            'recommended_strategy': 'mysterious',  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
            'strategy_confidence': 0.6,
            'behavioral_adjustments': {
                'tone_modifiers': ['friendly', 'curious'],
                'response_style': 'normal',
                'empathy_level': 'medium',
                'question_tendency': 'moderate',
                'emotional_mirroring': False,
                'personal_disclosure': 'minimal',
                'humor_usage': 'occasional',
                'support_intensity': 'medium'
            },
            'context_factors': {
                'emotional_state': 'neutral',
                'relationship_stage': 'introduction',
                'primary_need': 'general_interaction',
                'communication_preference': 'balanced'
            }
        } 
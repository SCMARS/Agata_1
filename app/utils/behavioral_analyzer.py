
import re
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from collections import Counter
from .dynamic_content_generator import DynamicContentGenerator

logger = logging.getLogger(__name__)

class BehavioralAnalyzer:

    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            self.dynamic_generator = DynamicContentGenerator()
            logger.info("üîç [BEHAVIORAL] DynamicContentGenerator —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –µ–º–æ—Ü—ñ–π")
        else:
            self.dynamic_generator = None
            logger.warning("üîç [BEHAVIORAL] OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ—Å—å —Ö–∞—Ä–¥–∫–æ–¥! –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ OpenAI API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        logger.info("üî• [BEHAVIORAL] –•–∞—Ä–¥–∫–æ–¥ –≤–∏–¥–∞–ª–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ OpenAI")
    
    def analyze_user_behavior(self, messages: List[Dict], user_profile: Dict = None,
                                  conversation_context: Dict = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            {
                'dominant_emotion': str,
                'emotional_intensity': float,
                'primary_topics': List[str],
                'communication_style': str,
                'relationship_needs': List[str],
                'recommended_strategy': str,
                'strategy_confidence': float,
                'behavioral_adjustments': Dict[str, Any]
            }
        """
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è...")
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"üîç [BEHAVIORAL_ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è...")
        print(f"üîç [BEHAVIORAL_ANALYSIS] –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        if not messages:
            logger.warning("üîç [BEHAVIORAL_ANALYSIS] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._get_default_analysis()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in messages if msg.get('role') == 'user']
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_messages)}")
        
        if not user_messages:
            logger.warning("üîç [BEHAVIORAL_ANALYSIS] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._get_default_analysis()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –≤–∞–∂–Ω–µ–µ)
        recent_messages = user_messages[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        all_content = ' '.join([msg.get('content', '') for msg in recent_messages])
        
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: '{all_content[:100]}...'")
        
        # 1. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
        emotion_analysis = self._analyze_emotions(all_content, recent_messages)
        logger.info(f"üîç [BEHAVIORAL_ANALYSIS] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {emotion_analysis}")
        print(f"üîç [BEHAVIORAL_ANALYSIS] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {emotion_analysis}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
        topic_analysis = self._analyze_topics(all_content)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏  
        communication_analysis = self._analyze_communication_style(recent_messages)
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        relationship_analysis = self._analyze_relationship_needs(
            all_content, user_profile, conversation_context
        )
        
        # 5. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        strategy_choice = self._choose_strategy(
            emotion_analysis, topic_analysis, communication_analysis,
            relationship_analysis, user_profile, conversation_context
        )
        
        return {
            'dominant_emotion': emotion_analysis['dominant_emotion'],
            'emotional_intensity': emotion_analysis['intensity'],
            'emotional_stability': emotion_analysis['stability'],
            'primary_topics': topic_analysis['primary_topics'],
            'topic_focus': topic_analysis['focus_level'],
            'communication_style': communication_analysis['style'],
            'engagement_level': communication_analysis['engagement'],
            'relationship_needs': relationship_analysis['needs'],
            'intimacy_preference': relationship_analysis['intimacy_level'],
            'recommended_strategy': strategy_choice['strategy'],
            'strategy_confidence': strategy_choice['confidence'],
            'behavioral_adjustments': strategy_choice['adjustments'],
            'context_factors': strategy_choice['context_factors']
        }
    
    def _analyze_emotions(self, content: str, messages: List[Dict]) -> Dict[str, Any]:
        """–î–ò–ù–ê–ú–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —á–µ—Ä–µ–∑ OpenAI API"""
        
        logger.info(f"üîç [EMOTION_ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
        logger.info(f"üîç [EMOTION_ANALYSIS] dynamic_generator –¥–æ—Å—Ç—É–ø–µ–Ω: {self.dynamic_generator is not None}")
        
        # –Ø–∫—â–æ —î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
        if self.dynamic_generator:
            try:
                # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
                message_contents = [msg.get('content', '') for msg in messages[-3:]]  # –û—Å—Ç–∞–Ω–Ω—ñ 3 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                logger.info(f"üîç [EMOTION_ANALYSIS] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: {message_contents}")
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –µ–º–æ—Ü—ñ–π
                logger.info(f"üîç [EMOTION_ANALYSIS] –í—ã–∑—ã–≤–∞–µ–º OpenAI –∞–Ω–∞–ª–∏–∑...")
                openai_analysis = self.dynamic_generator.analyze_message_emotions(message_contents)
                logger.info(f"üîç [EMOTION_ANALYSIS] OpenAI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {openai_analysis}")
                
                # –ú–∞–ø–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                emotion_mapping = {
                    'positive': 'positive',
                    'negative': 'negative', 
                    'neutral': 'neutral',
                    'excited': 'excited',
                    'sad': 'negative',
                    'angry': 'angry',
                    'frustrated': 'angry',
                    'anxious': 'anxious',
                    'playful': 'playful',
                    'intellectual': 'intellectual',
                    'rude': 'rude'  # –û—Å—Ç–∞–≤–ª—è–µ–º rude –∫–∞–∫ –µ—Å—Ç—å
                }
                
                dominant_emotion = emotion_mapping.get(openai_analysis.get('emotion', 'neutral'), 'neutral')
                intensity = float(openai_analysis.get('intensity', 0.5))
                
                print(f"üîç [EMOTION_AI] OpenAI –≤–µ—Ä–Ω—É–ª: {openai_analysis}")
                print(f"üîç [EMOTION_AI] –ú–∞–ø–ø–∏–Ω–≥: {openai_analysis.get('emotion', 'neutral')} -> {dominant_emotion}")
                
                # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
                stability = self._calculate_emotional_stability(messages)
                
                logger.info(f"üîç [EMOTION_AI] –î–ò–ù–ê–ú–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑: {dominant_emotion} (—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {intensity:.2f})")
                
                return {
                    'dominant_emotion': dominant_emotion,
                    'intensity': intensity,
                    'stability': stability,
                    'ai_analysis': openai_analysis,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                    'analysis_method': 'openai_dynamic'
                }
                
            except Exception as e:
                logger.error(f"‚ùå [EMOTION_AI] –ü–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
                # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                pass
        
        # FALLBACK: –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—É
        logger.warning("üîç [EMOTION_FALLBACK] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        logger.warning(f"üîç [EMOTION_FALLBACK] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: '{content}'")
        print(f"üîç [EMOTION_FALLBACK] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        print(f"üîç [EMOTION_FALLBACK] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: '{content}'")
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ–Ω—É –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—É
        content_lower = content.lower()
        
        # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤
        rude_words = ['–Ω–∞—Ö—É–π', '–¥—É—Ä–∞', '–¥—É—Ä–æ—á–∫–∞', '–±–µ—Å–∏—à—å', '–∏–¥–∏–æ—Ç', '–∏–¥–∏–æ—Ç–∫–∞', '—Å—É–∫–∞', '–±–ª—è–¥—å', '–ø–∏–∑–¥–µ—Ü']
        positive_words = ['–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–º–æ–ª–æ–¥–µ—Ü', '—Ö–æ—Ä–æ—à–æ', 'üòä', 'üòÑ']
        negative_words = ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—Ç—è–∂–µ–ª–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '–±–æ–ª—å–Ω–æ', 'üò¢', 'üò≠']
        excited_words = ['–æ–≥–æ', '–≤–∞—É', '–Ω–∏—á–µ–≥–æ —Å–µ–±–µ', '–æ–±–∞–ª–¥–µ—Ç—å', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', 'ü§©', 'üò≤']
        
        if any(word in content_lower for word in rude_words):
            dominant_emotion = 'rude'  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ gr—É–±–æ—Å—Ç—å, –Ω–µ –ø—Ä–æ—Å—Ç–æ angry
            intensity = 0.9  # –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å
            logger.info(f"üîç [EMOTION_FALLBACK] –í–∏—è–≤–ª–µ–Ω–æ –ì–†–£–ë–Ü–°–¢–¨: {[w for w in rude_words if w in content_lower]}")
            print(f"üîç [EMOTION_FALLBACK] –í–∏—è–≤–ª–µ–Ω–æ –ì–†–£–ë–Ü–°–¢–¨: {[w for w in rude_words if w in content_lower]}")
        elif any(word in content_lower for word in positive_words):
            dominant_emotion = 'positive' 
            intensity = 0.6
            print(f"üîç [EMOTION_FALLBACK] –í–∏—è–≤–ª–µ–Ω–æ –ü–û–ó–ò–¢–ò–í: {[w for w in positive_words if w in content_lower]}")
        elif any(word in content_lower for word in negative_words):
            dominant_emotion = 'negative'
            intensity = 0.7
            print(f"üîç [EMOTION_FALLBACK] –í–∏—è–≤–ª–µ–Ω–æ –ù–ï–ì–ê–¢–ò–í: {[w for w in negative_words if w in content_lower]}")
        elif any(word in content_lower for word in excited_words):
            dominant_emotion = 'excited'
            intensity = 0.7
            print(f"üîç [EMOTION_FALLBACK] –í–∏—è–≤–ª–µ–Ω–æ –í–û–ó–ë–£–ñ–î–ï–ù–ò–ï: {[w for w in excited_words if w in content_lower]}")
        else:
            dominant_emotion = 'neutral'
            intensity = 0.4
            print(f"üîç [EMOTION_FALLBACK] –ù–ï –ù–ê–ô–î–ï–ù–û –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í - NEUTRAL")
        
        stability = 0.5  # –°–µ—Ä–µ–¥–Ω—è —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è fallback
        
        result = {
            'dominant_emotion': dominant_emotion,
            'intensity': intensity,
            'stability': stability,
            'analysis_method': 'fallback_simple'
        }
        
        logger.warning(f"üîç [EMOTION_FALLBACK] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
        return result
    
    def _analyze_topics(self, content: str) -> Dict[str, Any]:
        """–î–ò–ù–ê–ú–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ —Ç–µ–º —á–µ—Ä–µ–∑ OpenAI API"""
        
        if self.dynamic_generator:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ç–µ–º —á–µ—Ä–µ–∑ OpenAI
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏ —É —Ü—å–æ–º—É —Ç–µ–∫—Å—Ç—ñ: "{content}"
                
                –í–∏–∑–Ω–∞—á–∏ –î–û 3 –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–µ–º –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
                - general (–∑–∞–≥–∞–ª—å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è)
                - personal_life (–æ—Å–æ–±–∏—Å—Ç–µ –∂–∏—Ç—Ç—è, –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏, —Å—ñ–º'—è)
                - work_career (—Ä–æ–±–æ—Ç–∞, –∫–∞—Ä'—î—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—ñ—è)
                - hobbies (—Ö–æ–±—ñ, —ñ–Ω—Ç–µ—Ä–µ—Å–∏, —Å–ø–æ—Ä—Ç, –º—É–∑–∏–∫–∞)
                - health (–∑–¥–æ—Ä–æ–≤'—è, —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è)
                - dreams_goals (–º—Ä—ñ—ó, —Ü—ñ–ª—ñ, –ø–ª–∞–Ω–∏)
                - problems (–ø—Ä–æ–±–ª–µ–º–∏, —Ç—Ä—É–¥–Ω–æ—â—ñ)
                - emotions (–µ–º–æ—Ü—ñ—ó, –Ω–∞—Å—Ç—Ä—ñ–π, –ø–æ—á—É—Ç—Ç—è)
                - philosophy (—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ —Ä–æ–∑–¥—É–º–∏)
                - entertainment (—Ä–æ–∑–≤–∞–≥–∏, –∂–∞—Ä—Ç–∏, –≤–µ—Å–µ–ª–æ—â—ñ)
                
                –ü–æ–≤–µ—Ä–Ω–∏ JSON:
                {{
                    "primary_topics": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
                    "focus_level": "focused/diverse/scattered",
                    "main_subject": "–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –≥–æ–ª–æ–≤–Ω–æ—ó —Ç–µ–º–∏"
                }}
                """
                
                response = self.dynamic_generator.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3,
                    max_tokens=100
                )
                
                import json
                topics_analysis = json.loads(response.choices[0].message.content)
                
                logger.info(f"üîç [TOPICS_AI] –î–ò–ù–ê–ú–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ —Ç–µ–º: {topics_analysis.get('primary_topics', [])}")
                
                return {
                    'primary_topics': topics_analysis.get('primary_topics', ['general']),
                    'focus_level': topics_analysis.get('focus_level', 'diverse'),
                    'main_subject': topics_analysis.get('main_subject', '–∑–∞–≥–∞–ª—å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è'),
                    'analysis_method': 'openai_dynamic'
                }
                
            except Exception as e:
                logger.error(f"‚ùå [TOPICS_AI] –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–º: {e}")
                # Fallback
                pass
        
        # FALLBACK: –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—É
        logger.warning("üîç [TOPICS_FALLBACK] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–º")
        return {
            'primary_topics': ['general'],
            'focus_level': 'diverse',
            'analysis_method': 'fallback_simple'
        }
    
    def _analyze_communication_style(self, messages: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        if not messages:
            return {'style': 'balanced', 'engagement': 'moderate'}
        
        all_content = ' '.join([msg.get('content', '') for msg in messages])
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        communication_patterns = {
            'question_heavy': r'\?',
            'exclamation_heavy': r'!',
            'storytelling': r'(—Ä–∞—Å—Å–∫–∞–∂—É|–∏—Å—Ç–æ—Ä–∏—è|—Å–ª—É—á–∏–ª–æ—Å—å|–±—ã–ª–æ)',
            'sharing_emotions': r'(—á—É–≤—Å—Ç–≤—É—é|—ç–º–æ—Ü–∏–∏|–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|–ø–µ—Ä–µ–∂–∏–≤–∞—é)',
            'seeking_advice': r'(—Å–æ–≤–µ—Ç|–ø–æ–º–æ–≥–∏|—á—Ç–æ –¥–µ–ª–∞—Ç—å|–∫–∞–∫ –±—ã—Ç—å)'
        }
        
        pattern_matches = {}
        for pattern_name, pattern in communication_patterns.items():
            matches = len(re.findall(pattern, all_content, re.IGNORECASE))
            pattern_matches[pattern_name] = matches
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        message_lengths = [len(msg.get('content', '')) for msg in messages]
        avg_length = sum(message_lengths) / len(message_lengths)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (engagement)
        engagement_level = 'high' if len(messages) > 3 else 'moderate' if len(messages) > 1 else 'low'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
        style = 'balanced'
        if pattern_matches.get('question_heavy', 0) > 2:
            style = 'inquisitive'
        elif pattern_matches.get('storytelling', 0) > 0 and avg_length > 100:
            style = 'narrative'
        elif pattern_matches.get('sharing_emotions', 0) > 1:
            style = 'emotional'
        elif pattern_matches.get('seeking_advice', 0) > 0:
            style = 'advice_seeking'
        elif avg_length < 30:
            style = 'concise'
        elif pattern_matches.get('exclamation_heavy', 0) > 2:
            style = 'expressive'
        
        return {
            'style': style,
            'engagement': engagement_level,
            'average_length': avg_length,
            'pattern_matches': pattern_matches
        }
    
    def _analyze_relationship_needs(self, content: str, user_profile: Dict = None,
                                         conversation_context: Dict = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"""
        content_lower = content.lower()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
        need_indicators = {
            'emotional_support': ['–ø–æ–¥–¥–µ—Ä–∂–∏', '–ø–æ–º–æ–≥–∏', '—Ç—Ä—É–¥–Ω–æ', '—Å–ª–æ–∂–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–æ–¥–∏–Ω–æ–∫–æ'],
            'intellectual_stimulation': ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–¥—É–º–∞—é', '–º–Ω–µ–Ω–∏–µ', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '—Å–º—ã—Å–ª'],
            'playful_interaction': ['–≤–µ—Å–µ–ª–æ', '—Å–º–µ—à–Ω–æ', '—à—É—Ç–∫–∞', '–∏–≥—Ä–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ'],
            'deep_connection': ['–±–ª–∏–∑–æ—Å—Ç—å', '–¥–æ–≤–µ—Ä–∏–µ', '—Å–µ–∫—Ä–µ—Ç', '–ª–∏—á–Ω–æ–µ', '—Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ'],
            'guidance': ['—Å–æ–≤–µ—Ç', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –±—ã—Ç—å', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ä–µ—à–µ–Ω–∏–µ'],
            'validation': ['–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–ø–æ–Ω–∏–º–∞–µ—à—å', '—Å–æ–≥–ª–∞—Å–Ω–∞', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å']
        }
        
        need_scores = {}
        for need, indicators in need_indicators.items():
            score = sum(content_lower.count(indicator) for indicator in indicators)
            need_scores[need] = score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        primary_needs = [need for need, score in need_scores.items() if score > 0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏
        intimacy_indicators = {
            'high': ['—Å–µ–∫—Ä–µ—Ç', '–ª–∏—á–Ω–æ–µ', '—Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ', '–¥–æ–≤–µ—Ä–∏–µ', '–±–ª–∏–∑–∫–æ'],
            'medium': ['–¥—Ä—É–≥', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–æ–±—â–µ–Ω–∏–µ'],
            'low': ['–ø–æ–º–æ—â—å', '—Å–æ–≤–µ—Ç', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤–æ–ø—Ä–æ—Å']
        }
        
        intimacy_level = 'medium'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for level, indicators in intimacy_indicators.items():
            if any(indicator in content_lower for indicator in indicators):
                intimacy_level = level
                break
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if conversation_context:
            relationship_stage = conversation_context.get('relationship_stage', 'introduction')
            if relationship_stage in ['close_friend', 'confidant']:
                intimacy_level = 'high'
            elif relationship_stage in ['introduction', 'getting_acquainted']:
                intimacy_level = 'low'
        
        return {
            'needs': primary_needs[:3],  # –¢–æ–ø-3 –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            'need_scores': need_scores,
            'intimacy_level': intimacy_level
        }
    
    def _choose_strategy(self, emotion_analysis: Dict, topic_analysis: Dict,
                               communication_analysis: Dict, relationship_analysis: Dict,
                               user_profile: Dict = None, conversation_context: Dict = None) -> Dict[str, Any]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤–µ—Å–∞–º–∏
        strategy_scores = {
            'caring': 0.0,
            'playful': 0.0,
            'mysterious': 0.0,
            'reserved': 0.0,
            'intellectual': 0.0,
            'supportive': 0.0
        }
        
        dominant_emotion = emotion_analysis['dominant_emotion']
        emotional_intensity = emotion_analysis['intensity']
        primary_needs = relationship_analysis['needs']
        communication_style = communication_analysis['style']
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        if dominant_emotion in ['negative', 'anxious', 'tired']:
            strategy_scores['caring'] += 3.0
            strategy_scores['supportive'] += 2.5
            if emotional_intensity > 0.6:
                strategy_scores['caring'] += 1.0
        
        elif dominant_emotion in ['positive', 'excited']:
            strategy_scores['playful'] += 2.5
            strategy_scores['caring'] += 1.5
            if emotional_intensity > 0.6:
                strategy_scores['playful'] += 1.0
        
        elif dominant_emotion == 'confused' or communication_style == 'advice_seeking':
            strategy_scores['supportive'] += 3.5
            strategy_scores['intellectual'] += 1.5
            strategy_scores['caring'] += 1.0
        
        elif dominant_emotion == 'angry':
            strategy_scores['reserved'] += 2.0
            strategy_scores['supportive'] += 1.5
        
        elif dominant_emotion == 'rude':
            strategy_scores['reserved'] += 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≥—Ä—É–±–æ—Å—Ç–∏
            strategy_scores['supportive'] += 1.0
        
        elif dominant_emotion == 'intellectual':
            strategy_scores['intellectual'] += 2.5
            strategy_scores['mysterious'] += 1.5
        
        elif dominant_emotion == 'playful':
            strategy_scores['playful'] += 2.5
            strategy_scores['caring'] += 1.0
        
        else:  # neutral
            strategy_scores['mysterious'] += 1.5
            strategy_scores['playful'] += 1.0
            strategy_scores['caring'] += 1.0
        
        # –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        for need in primary_needs:
            if need == 'emotional_support':
                strategy_scores['caring'] += 2.0
                strategy_scores['supportive'] += 1.5
            elif need == 'intellectual_stimulation':
                strategy_scores['intellectual'] += 2.5
                strategy_scores['mysterious'] += 1.5
            elif need == 'playful_interaction':
                strategy_scores['playful'] += 2.5
            elif need == 'deep_connection':
                strategy_scores['caring'] += 1.5
                strategy_scores['mysterious'] += 1.0
            elif need == 'guidance':
                strategy_scores['supportive'] += 2.0
                strategy_scores['intellectual'] += 1.0
            elif need == 'validation':
                strategy_scores['caring'] += 1.5
                strategy_scores['supportive'] += 1.0
        
        # –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if communication_style == 'emotional':
            strategy_scores['caring'] += 1.5
            strategy_scores['supportive'] += 1.0
        elif communication_style == 'inquisitive':
            strategy_scores['intellectual'] += 1.5
            strategy_scores['mysterious'] += 1.0
        elif communication_style == 'narrative':
            strategy_scores['caring'] += 1.0
            strategy_scores['intellectual'] += 1.0
        elif communication_style == 'expressive':
            strategy_scores['playful'] += 1.5
        elif communication_style == 'advice_seeking':
            strategy_scores['supportive'] += 3.0
            strategy_scores['intellectual'] += 1.5
        elif communication_style == 'concise':
            strategy_scores['reserved'] += 1.0
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if conversation_context:
            relationship_stage = conversation_context.get('relationship_stage', 'introduction')
            personalization_level = conversation_context.get('personalization_level', 0.0)
            
            # –ù–ï –¥–∞–µ–º –±–æ–Ω—É—Å mysterious –µ—Å–ª–∏ —ç–º–æ—Ü–∏—è rude - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π
            if relationship_stage == 'introduction' and dominant_emotion != 'rude':
                strategy_scores['mysterious'] += 1.0
                strategy_scores['playful'] += 0.5
            elif relationship_stage in ['building_trust', 'close_friend']:
                strategy_scores['caring'] += 1.5
                strategy_scores['supportive'] += 1.0
            elif relationship_stage == 'confidant':
                strategy_scores['caring'] += 2.0
                strategy_scores['intellectual'] += 1.0
            
            # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            if personalization_level > 0.7:
                strategy_scores['caring'] += 1.0
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        best_strategy = max(strategy_scores, key=strategy_scores.get)
        confidence = strategy_scores[best_strategy] / max(sum(strategy_scores.values()), 1.0)
        
        print(f"üéØ [STRATEGY_CHOICE] –ë–∞–ª–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_scores}")
        print(f"üéØ [STRATEGY_CHOICE] –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy} (confidence: {confidence:.2f})")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        adjustments = self._create_behavioral_adjustments(
            best_strategy, emotion_analysis, relationship_analysis, communication_analysis
        )
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        context_factors = {
            'emotional_state': dominant_emotion,
            'relationship_stage': conversation_context.get('relationship_stage', 'introduction') if conversation_context else 'introduction',
            'primary_need': primary_needs[0] if primary_needs else 'general_interaction',
            'communication_preference': communication_style
        }
        
        return {
            'strategy': best_strategy,
            'confidence': min(confidence, 1.0),
            'adjustments': adjustments,
            'context_factors': context_factors,
            'alternative_strategies': sorted(strategy_scores.items(), key=lambda x: x[1], reverse=True)[1:3]
        }
    
    def _create_behavioral_adjustments(self, strategy: str, emotion_analysis: Dict,
                                             relationship_analysis: Dict, communication_analysis: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        adjustments = {
            'tone_modifiers': [],
            'response_style': 'normal',
            'empathy_level': 'medium',
            'question_tendency': 'moderate',
            'emotional_mirroring': False,
            'personal_disclosure': 'minimal',
            'humor_usage': 'occasional',
            'support_intensity': 'medium'
        }
        
        emotional_intensity = emotion_analysis['intensity']
        dominant_emotion = emotion_analysis['dominant_emotion']
        intimacy_level = relationship_analysis['intimacy_level']
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_base_settings = {
            'caring': {
                'empathy_level': 'high',
                'support_intensity': 'high',
                'personal_disclosure': 'moderate',
                'tone_modifiers': ['warm', 'gentle', 'nurturing']
            },
            'playful': {
                'humor_usage': 'frequent',
                'tone_modifiers': ['light', 'energetic', 'fun'],
                'question_tendency': 'high',
                'response_style': 'casual'
            },
            'mysterious': {
                'personal_disclosure': 'minimal',
                'tone_modifiers': ['intriguing', 'thoughtful'],
                'question_tendency': 'strategic',
                'response_style': 'subtle'
            },
            'reserved': {
                'empathy_level': 'measured',
                'personal_disclosure': 'minimal',
                'tone_modifiers': ['calm', 'measured'],
                'support_intensity': 'gentle'
            },
            'intellectual': {
                'question_tendency': 'analytical',
                'tone_modifiers': ['thoughtful', 'curious'],
                'personal_disclosure': 'intellectual',
                'response_style': 'analytical'
            },
            'supportive': {
                'empathy_level': 'high',
                'support_intensity': 'high',
                'tone_modifiers': ['encouraging', 'understanding'],
                'question_tendency': 'caring'
            }
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if strategy in strategy_base_settings:
            adjustments.update(strategy_base_settings[strategy])
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π
        if dominant_emotion in ['negative', 'anxious'] and emotional_intensity > 0.6:
            adjustments['empathy_level'] = 'very_high'
            adjustments['support_intensity'] = 'high'
            adjustments['emotional_mirroring'] = True
            adjustments['humor_usage'] = 'minimal'
        
        elif dominant_emotion == 'excited' and emotional_intensity > 0.7:
            adjustments['emotional_mirroring'] = True
            adjustments['tone_modifiers'].append('enthusiastic')
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –±–ª–∏–∑–æ—Å—Ç–∏
        if intimacy_level == 'high':
            adjustments['personal_disclosure'] = 'high'
            adjustments['empathy_level'] = 'very_high'
        elif intimacy_level == 'low':
            adjustments['personal_disclosure'] = 'minimal'
            adjustments['empathy_level'] = 'measured'
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        comm_style = communication_analysis['style']
        if comm_style == 'concise':
            adjustments['response_style'] = 'concise'
        elif comm_style == 'narrative':
            adjustments['response_style'] = 'detailed'
        elif comm_style == 'inquisitive':
            adjustments['question_tendency'] = 'responsive'
        
        return adjustments
    
    def _calculate_emotional_stability(self, messages: List[Dict]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if len(messages) < 2:
            return 0.8  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        
        emotions = []
        for msg in messages[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            content = msg.get('content', '')
            if self.dynamic_generator and content.strip():
                try:
                    analysis = self.dynamic_generator.analyze_message_emotions([content])
                    msg_emotion = analysis.get('emotion', 'neutral')
                except:
                    msg_emotion = 'neutral'
            else:
                msg_emotion = 'neutral'
            
            emotions.append(msg_emotion)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
        emotion_changes = sum(1 for i in range(1, len(emotions)) 
                            if emotions[i] != emotions[i-1])
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å = 1 - (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π / –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        max_changes = len(emotions) - 1
        stability = 1.0 - (emotion_changes / max_changes) if max_changes > 0 else 1.0
        
        return max(0.0, min(1.0, stability))
    
    def _get_default_analysis(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'dominant_emotion': 'neutral',
            'emotional_intensity': 0.3,
            'emotional_stability': 0.8,
            'primary_topics': ['general'],
            'topic_focus': 'diverse',
            'communication_style': 'balanced',
            'engagement_level': 'moderate',
            'relationship_needs': ['general_interaction'],
            'intimacy_preference': 'medium',
            'recommended_strategy': 'mysterious',  
            'strategy_confidence': 0.6,
            'behavioral_adjustments': {
                'tone_modifiers': ['friendly', 'curious'],
                'response_style': 'normal',
                'empathy_level': 'medium',
                'question_tendency': 'moderate',
                'emotional_mirroring': False,
                'personal_disclosure': 'minimal',
                'humor_usage': 'occasional',
                'support_intensity': 'medium'
            },
            'context_factors': {
                'emotional_state': 'neutral',
                'relationship_stage': 'introduction',
                'primary_need': 'general_interaction',
                'communication_preference': 'balanced'
            }
        } 
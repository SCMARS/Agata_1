"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM
–∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
"""

import re
import logging
from typing import List, Tuple

logger = logging.getLogger(__name__)

class QuestionFilter:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        self.question_patterns = [
            r'\?+\s*$',  # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            r'\?\s*[üòäüòÑüòÉü§îüí≠‚ùì]?\s*$',  # –í–æ–ø—Ä–æ—Å—ã —Å —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
            r'–∫–∞–∫ –¥–µ–ª–∞\?',  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            r'—á—Ç–æ –¥–µ–ª–∞–µ—à—å\?',
            r'–∫–∞–∫ –∂–∏–∑–Ω—å\?',
            r'—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è\?',
            r'–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\?',
            r'—á—Ç–æ –Ω–æ–≤–æ–≥–æ\?',
            r'–∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å\?',
            r'—á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å\?',
        ]
        
        # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.question_words = [
            r'^–∫–∞–∫\s+',
            r'^—á—Ç–æ\s+',
            r'^–≥–¥–µ\s+',
            r'^–∫–æ–≥–¥–∞\s+',
            r'^–ø–æ—á–µ–º—É\s+',
            r'^–∑–∞—á–µ–º\s+',
            r'^–∫—É–¥–∞\s+',
            r'^–æ—Ç–∫—É–¥–∞\s+',
            r'^–∫—Ç–æ\s+',
            r'^–∫–∞–∫–æ–π\s+',
            r'^–∫–∞–∫–∞—è\s+',
            r'^–∫–∞–∫–æ–µ\s+',
            r'^–∫–∞–∫–∏–µ\s+',
            r'^—Å–∫–æ–ª—å–∫–æ\s+',
        ]
        
        # –ó–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.question_replacements = {
            r'–∫–∞–∫ –¥–µ–ª–∞\?': '–Ω–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ.',
            r'—á—Ç–æ –¥–µ–ª–∞–µ—à—å\?': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è.',
            r'–∫–∞–∫ –∂–∏–∑–Ω—å\?': '–Ω–∞–¥–µ—é—Å—å, –∂–∏–∑–Ω—å –∏–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.',
            r'—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è\?': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –¥–µ–ª–∞—Ö.',
            r'–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\?': '–Ω–∞–¥–µ—é—Å—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ.',
            r'—á—Ç–æ –Ω–æ–≤–æ–≥–æ\?': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏.',
            r'–∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å\?': '–Ω–∞–¥–µ—é—Å—å, –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª —Ö–æ—Ä–æ—à–æ.',
            r'—á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å\?': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö.',
        }
    
    def filter_questions(self, text: str, may_ask_question: bool) -> Tuple[str, bool]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
        
        Args:
            text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            may_ask_question: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
            
        Returns:
            Tuple[filtered_text, has_question_after_filter]
        """
        if may_ask_question:
            # –í–æ–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã - –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            has_question = self._has_question(text)
            logger.info(f"üîç [FILTER] –í–æ–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º. has_question={has_question}")
            return text, has_question
        
        logger.info(f"üö´ [FILTER] –í–û–ü–†–û–°–´ –ó–ê–ü–†–ï–©–ï–ù–´ - –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ —Ç–µ–∫—Å—Ç—É: '{text}'")
        
        original_text = text
        filtered_text = self._remove_questions(text)
        
        has_question_before = self._has_question(original_text)
        has_question_after = self._has_question(filtered_text)
        
        if has_question_before and not has_question_after:
            logger.info(f"‚úÖ [FILTER] –£–°–ü–ï–®–ù–û —É–¥–∞–ª–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: '{original_text}' -> '{filtered_text}'")
        elif has_question_before and has_question_after:
            logger.warning(f"‚ö†Ô∏è [FILTER] –ù–ï –£–î–ê–õ–û–°–¨ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã: '{filtered_text}'")
        else:
            logger.info(f"‚ÑπÔ∏è [FILTER] –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
        
        return filtered_text, has_question_after
    
    def _has_question(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å—ã"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        if '?' in text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        sentences = re.split(r'[.!]\s*', text_lower)
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
            for pattern in self.question_words:
                if re.search(pattern, sentence, re.IGNORECASE):
                    return True
        
        return False
    
    def _remove_questions(self, text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        result = text
        
        # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–º–µ–Ω—ã
        for pattern, replacement in self.question_replacements.items():
            result = re.sub(pattern, replacement, result, flags=re.IGNORECASE)
        
        # 2. –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        for pattern in self.question_patterns:
            result = re.sub(pattern, '.', result, flags=re.IGNORECASE)
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        result = self._convert_question_sentences(result)
        
        # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        result = result.replace('?', '.')
        
        # 5. –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
        result = re.sub(r'\.+', '.', result)
        
        # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\s+', ' ', result).strip()
        
        return result
    
    def _convert_question_sentences(self, text: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ"""
        sentences = re.split(r'([.!?]\s*)', text)
        result_parts = []
        
        i = 0
        while i < len(sentences):
            sentence = sentences[i].strip()
            
            if not sentence:
                if i + 1 < len(sentences):
                    result_parts.append(sentences[i + 1])  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    i += 2
                else:
                    i += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
            converted = self._convert_single_question(sentence)
            result_parts.append(converted)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if i + 1 < len(sentences):
                separator = sentences[i + 1]
                if '?' in separator:
                    separator = separator.replace('?', '.')
                result_parts.append(separator)
                i += 2
            else:
                i += 1
        
        return ''.join(result_parts)
    
    def _convert_single_question(self, sentence: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–Ω–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ"""
        sentence_lower = sentence.lower().strip()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        conversions = {
            r'^–∫–∞–∫ –¥–µ–ª–∞': '–Ω–∞–¥–µ—é—Å—å, –¥–µ–ª–∞ –∏–¥—É—Ç —Ö–æ—Ä–æ—à–æ',
            r'^—á—Ç–æ –¥–µ–ª–∞–µ—à—å': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è',
            r'^–∫–∞–∫ –∂–∏–∑–Ω—å': '–Ω–∞–¥–µ—é—Å—å, –∂–∏–∑–Ω—å —Ö–æ—Ä–æ—à–∞',
            r'^—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö',
            r'^–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ': '–Ω–∞–¥–µ—é—Å—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ',
            r'^—á—Ç–æ –Ω–æ–≤–æ–≥–æ': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏',
            r'^–∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å': '–Ω–∞–¥–µ—é—Å—å, –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª —Ö–æ—Ä–æ—à–æ',
            r'^—á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å': '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ –ø–ª–∞–Ω–∞—Ö',
        }
        
        for pattern, replacement in conversions.items():
            if re.match(pattern, sentence_lower):
                return replacement
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        result = sentence
        for pattern in self.question_words:
            result = re.sub(pattern, '', result, flags=re.IGNORECASE)
        
        result = result.strip()
        if result and not result.endswith('.'):
            result += '.'
        
        return result if result else '–•–æ—Ä–æ—à–æ.'


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
question_filter = QuestionFilter()

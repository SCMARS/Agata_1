"""
–†–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Å–ª–æ—Ç—ñ–≤ —á–µ—Ä–µ–∑ LLM
"""
import os
import json
import logging
from typing import Dict, List, Optional, Any
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)

class SmartSlotAnalyzer:
    """–†–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ LLM"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model = os.getenv("LLM_MODEL", "gpt-3.5-turbo")
        
    async def analyze_user_response(self, user_message: str, available_questions: List[str]) -> Dict[str, Any]:
        if not user_message or len(user_message.strip()) < 2:
            return {"answered_questions": [], "confidence": 0.0}
            
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            analysis_prompt = self._create_analysis_prompt(user_message, available_questions)
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ LLM
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ—à—å, –Ω–∞ –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç."},
                    {"role": "user", "content": analysis_prompt}
                ],
                temperature=0.1,
                max_tokens=500
            )
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = self._parse_llm_response(response.choices[0].message.content)
            
            logger.info(f"üß† [SMART_ANALYSIS] –ê–Ω–∞–ª—ñ–∑: '{user_message[:50]}...' ‚Üí {len(result.get('answered_questions', []))} –ø–∏—Ç–∞–Ω—å")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [SMART_ANALYSIS] –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return {"answered_questions": [], "confidence": 0.0, "error": str(e)}
    
    def _create_analysis_prompt(self, user_message: str, available_questions: List[str]) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        
        questions_text = "\n".join([f"- {q}" for q in available_questions])
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞ –∫–∞–∫–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç.

–û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_message}"

–î–û–°–¢–£–ü–ù–´–ï –í–û–ü–†–û–°–´:
{questions_text}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –û–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞ –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
2. –£—á–∏—Ç—ã–≤–∞–π –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É–ª –∏–º—è - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
4. –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª –≥–æ—Ä–æ–¥ - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ "–û—Ç–∫—É–¥–∞ —Ç—ã?"
5. –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?"
6. –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª –º–∞—à–∏–Ω—É - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ "–£ —Ç–µ–±—è –µ—Å—Ç—å –º–∞—à–∏–Ω–∞?"
7. –ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "answered_questions": [
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–û—Ç–∫—É–¥–∞ —Ç—ã?"
    ],
    "confidence": 0.85,
    "reasoning": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –∏–º—è '–ú–∞–∫—Å–∏–º' –∏ —É–ø–æ–º—è–Ω—É–ª –≥–æ—Ä–æ–¥ '–ö–∏–µ–≤'"
}}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        return prompt
    
    def _parse_llm_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å LLM"""
        try:
            # –û—á–∏—â—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            response = response.strip()
            if response.startswith("```json"):
                response = response[7:]
            if response.endswith("```"):
                response = response[:-3]
            response = response.strip()
            
            # –ü–∞—Ä—Å–∏–º–æ JSON
            result = json.loads(response)
            
            # –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if "answered_questions" not in result:
                result["answered_questions"] = []
            if "confidence" not in result:
                result["confidence"] = 0.0
            if "reasoning" not in result:
                result["reasoning"] = "–ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ"
                
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå [SMART_ANALYSIS] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            logger.error(f"‚ùå [SMART_ANALYSIS] –í—ñ–¥–ø–æ–≤—ñ–¥—å LLM: {response}")
            return {"answered_questions": [], "confidence": 0.0, "error": "JSON parse error"}
        except Exception as e:
            logger.error(f"‚ùå [SMART_ANALYSIS] –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
            return {"answered_questions": [], "confidence": 0.0, "error": str(e)}
    
    async def analyze_with_fallback(self, user_message: str, available_questions: List[str]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –∑ fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        """
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            smart_result = await self.analyze_user_response(user_message, available_questions)
            
            if smart_result.get("confidence", 0) > 0.5:
                return smart_result
            else:
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑
                logger.info(f"üîÑ [SMART_ANALYSIS] Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è: '{user_message[:30]}...'")
                return self._simple_keyword_analysis(user_message, available_questions)
                
        except Exception as e:
            logger.error(f"‚ùå [SMART_ANALYSIS] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—É–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return self._simple_keyword_analysis(user_message, available_questions)
    
    def _simple_keyword_analysis(self, user_message: str, available_questions: List[str]) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —è–∫ fallback"""
        user_message_lower = user_message.lower()
        answered_questions = []
        
        # –ë–∞–∑–æ–≤—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        keyword_map = {
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?": ["–∑–æ–≤—É—Ç", "–∏–º—è", "–º–µ–Ω—è", "–∑–æ–≤—É"],
            "–û—Ç–∫—É–¥–∞ —Ç—ã?": ["–æ—Ç–∫—É–¥–∞", "–∏–∑", "–∂–∏–≤—É", "–≥–æ—Ä–æ–¥", "—Ä–æ–¥–æ–º"],
            "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?": ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–¥–∏–∑–∞–π–Ω–µ—Ä"],
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –º–∞—à–∏–Ω–∞?": ["–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ", "bmw", "–º–µ—Ä—Å–µ–¥–µ—Å", "–µ—Å—Ç—å", "–Ω–µ—Ç"],
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?": ["–ª–µ—Ç", "–≤–æ–∑—Ä–∞—Å—Ç", "–≥–æ–¥–∞", "–º–Ω–µ"],
            "–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω—ã–π?": ["–∞–∫—Ç–∏–≤–Ω—ã–π", "—Å–ø–æ–∫–æ–π–Ω—ã–π", "—Å–ø–æ—Ä—Ç", "–æ—Ç–¥—ã—Ö"],
        }
        
        for question in available_questions:
            if question in keyword_map:
                keywords = keyword_map[question]
                if any(keyword in user_message_lower for keyword in keywords):
                    answered_questions.append(question)
        
        return {
            "answered_questions": answered_questions,
            "confidence": 0.3,  # –ù–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è fallback
            "reasoning": "–ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤",
            "method": "fallback"
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
smart_analyzer = SmartSlotAnalyzer()


from langchain_core.prompts import ChatPromptTemplate
from typing import Dict, Any, Optional
import logging
import os
from datetime import datetime, timedelta
from ...utils.agata_prompt_loader import agata_loader
from ...utils.daily_behavior import daily_behavior
from ...utils.message_splitter import message_splitter
from ...utils.question_controller import question_controller
from ...utils.time_utils import TimeUtils
from ...utils.behavioral_adaptation import BehavioralAdaptationModule

logger = logging.getLogger(__name__)


class ComposePromptNode:   
    def __init__(self):
        self.system_prompt = self._load_system_prompt()
        self.prompt_template = self._create_prompt_template()
        self.behavioral_adaptation = BehavioralAdaptationModule()
    
    def _load_system_prompt(self, memory_context: str = "", stage_number: int = 1, day_number: int = 1) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ agata_prompt_data"""
        try:
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ agata_prompt_data + 10_limited_knowledge.txt (stage={stage_number}, day={day_number})")
            return agata_loader.create_system_prompt(stage_number=stage_number, day_number=day_number, memory_context=memory_context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """Fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è"""
        return """–¢–´ ‚Äî Agatha: —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å–∏—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–ø–∞—Ä—Ç–Ω—ë—Ä.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–≤–æ—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.
–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. """
    
    def _should_generate_greeting(self, state: Dict[str, Any], last_diff_sec: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        
        Args:
            state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
            last_diff_sec: —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        memory_context = state.get("memory_context", "")
        
        # –ï—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if "–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:" in memory_context:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            lines = memory_context.split('\n')
            recent_message_lines = []
            in_recent_section = False
            
            for line in lines:
                if "–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:" in line:
                    in_recent_section = True
                    continue
                elif line.startswith("üë§") or line.startswith("ü§ñ"):
                    if in_recent_section:
                        recent_message_lines.append(line)
                elif in_recent_section and line.strip() and not line.startswith("üë§") and not line.startswith("ü§ñ"):
                    break  # –ö–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ 1 –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –¥–∏–∞–ª–æ–≥
            if len(recent_message_lines) > 1:
                logger.info(f"üö´ [GREETING] –ù–ï –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ({len(recent_message_lines)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                return False
        
        # –ó–¥–æ—Ä–æ–≤–∞–µ–º—Å—è –µ—Å–ª–∏:
        # 1. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 6 —á–∞—Å–æ–≤ (21600 —Å–µ–∫)
        # 2. –ò–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ—Ç –ø–∞–º—è—Ç–∏)
        should_greet = last_diff_sec > 21600 or not memory_context.strip()
        
        if should_greet:
            logger.info(f"üëã [GREETING] –ó–¥–æ—Ä–æ–≤–∞–µ–º—Å—è - –ø—Ä–æ—à–ª–æ {last_diff_sec//3600}—á –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            logger.info(f"üö´ [GREETING] –ù–ï –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è - –ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {last_diff_sec//3600}—á")
            
        return should_greet
    
    def _get_greeting_instruction(self, should_greet: bool, memory_context: str) -> str:
        if should_greet:
            return "=== –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–†–ò–í–ï–¢–°–¢–í–ò–Æ ===\n–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ü–û–ó–î–û–†–û–í–ê–ô–°–Ø –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞."
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:" in memory_context and ("üë§" in memory_context or "ü§ñ" in memory_context):
                return "=== –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–†–ò–í–ï–¢–°–¢–í–ò–Æ ===\n–≠—Ç–æ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê - –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –ù–ï –≥–æ–≤–æ—Ä–∏ '–ü—Ä–∏–≤–µ—Ç', —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
            else:
                return "=== –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–†–ò–í–ï–¢–°–¢–í–ò–Æ ===\n–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."
    
    def _get_question_instruction(self, may_ask_question: bool, user_message_count: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ç–æ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"""
        if may_ask_question:
            return f"""=== ‚úÖ –†–ê–ó–†–ï–®–ï–ù–û –ó–ê–î–ê–í–ê–¢–¨ –í–û–ü–†–û–° ‚úÖ ===
–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ {user_message_count}-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú:
1. –ù–∞–ø–∏—à–∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –î–æ–±–∞–≤—å –º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª—å –∏–ª–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) 
3. –ó–ê–í–ï–†–®–ò –í–û–ü–†–û–°–û–ú (–∑–Ω–∞–∫ "?" –≤ –∫–æ–Ω—Ü–µ –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!)

‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–∫ "?" –≤ –∫–æ–Ω—Ü–µ
‚úÖ –°–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç–µ–π–¥–∂–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
‚úÖ –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω–æ–π

–ü–û–ú–ù–ò: –≠—Ç–æ –∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –í–û–ü–†–û–° –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!"""
        else:
            return f"""=== üö´ –ó–ê–ü–†–ï–¢ –ù–ê –í–û–ü–†–û–°–´ üö´ ===
–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ {user_message_count}-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üö´ –ù–ï –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!
üö´ –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–º!
üö´ –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–Ω–∞–∫ "?" –≤ –æ—Ç–≤–µ—Ç–µ
‚úÖ –ü–†–û–°–¢–û –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ
‚úÖ –î–µ–ª–∞–π —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
‚úÖ –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ—á–∫–æ–π
‚úÖ –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –Ω–æ –ë–ï–ó –≤–æ–ø—Ä–æ—Å–æ–≤

–í–æ–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"""    
    def _get_enhanced_time_context(self, state: Dict[str, Any], last_diff_sec: int, should_greet: bool) -> Dict[str, str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Args:
            state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
            last_diff_sec: —Å–µ–∫—É–Ω–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            should_greet: –Ω—É–∂–Ω–æ –ª–∏ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        current_time = state.get("meta_time", datetime.now())
        user_id = state.get("user_id", "unknown")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        time_info = TimeUtils.get_time_context(current_time)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—É
        weekday_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        weekday = weekday_names[current_time.weekday()]
        date_str = current_time.strftime("%d.%m.%Y")
        time_str = current_time.strftime("%H:%M")
        
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        absence_reaction = ""
        if last_diff_sec > 0:
            last_activity = current_time - timedelta(seconds=last_diff_sec)
            absence_reaction = TimeUtils.get_absence_reaction(last_activity, current_time)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        greeting = ""
        if should_greet:
            greeting = daily_behavior.get_time_greeting(current_time)
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        days_talking = self._estimate_relationship_days(state, last_diff_sec)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è
        contextual_notes = self._get_contextual_time_notes(current_time, weekday, last_diff_sec)
        
        return {
            "current_time": time_str,
            "current_date": date_str,
            "weekday": weekday,
            "time_of_day": self._get_time_of_day(current_time.hour),
            "greeting": greeting,
            "absence_reaction": absence_reaction,
            "days_talking": str(days_talking),
            "contextual_notes": contextual_notes,
            "full_time_info": time_info,
            "should_greet": str(should_greet).lower()
        }
    
    def _get_time_of_day(self, hour: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—Ç–æ–∫"""
        if 6 <= hour < 12:
            return "—É—Ç—Ä–æ"
        elif 12 <= hour < 18:
            return "–¥–µ–Ω—å"
        elif 18 <= hour < 22:
            return "–≤–µ—á–µ—Ä"
        else:
            return "–Ω–æ—á—å"
    
    def _estimate_relationship_days(self, state: Dict[str, Any], last_diff_sec: int) -> int:
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω–µ–π –æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å - –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        memory_context = state.get("memory_context", "")
        if "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏" in memory_context or "–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏" in memory_context:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å - –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2-–π –¥–µ–Ω—å
            return max(2, min(7, last_diff_sec // 86400 + 1))
        else:
            return 1
    
    def _get_contextual_time_notes(self, current_time: datetime, weekday: str, last_diff_sec: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏"""
        hour = current_time.hour
        notes = []
        
        # –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if hour < 7:
            notes.append("–æ—á–µ–Ω—å —Ä–∞–Ω–æ —É—Ç—Ä–æ–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–Ω–Ω—ã–º")
        elif hour > 23:
            notes.append("–ø–æ–∑–¥–Ω–æ –Ω–æ—á—å—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–ª—ã–º")
        elif 12 <= hour <= 14:
            notes.append("–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        elif 18 <= hour <= 20:
            notes.append("–≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã")
        
        # –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        if weekday in ["–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]:
            notes.append("–≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è")
        elif weekday == "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" and hour < 12:
            notes.append("–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏")
        elif weekday == "–ü—è—Ç–Ω–∏—Ü–∞" and hour > 17:
            notes.append("–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏")
        
        # –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        if last_diff_sec > 86400 * 7:  # –ù–µ–¥–µ–ª—è
            notes.append("–¥–æ–ª–≥–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ - —Å—Ç–æ–∏—Ç –ø—Ä–æ—è–≤–∏—Ç—å –∑–∞–±–æ—Ç—É")
        elif last_diff_sec > 86400 * 2:  # 2 –¥–Ω—è
            notes.append("–Ω–µ –æ–±—â–∞–ª–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π")
        
        return "; ".join(notes) if notes else ""
    
    def _format_time_context_for_prompt(self, time_context: Dict[str, str]) -> str:
        parts = ["=== –í–†–ï–ú–ï–ù–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢ ==="]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        parts.append(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_context['current_time']}, {time_context['weekday']}, {time_context['current_date']}")
        parts.append(f"–í—Ä–µ–º—è —Å—É—Ç–æ–∫: {time_context['time_of_day']}")
        parts.append(f"–î–Ω–µ–π –æ–±—â–µ–Ω–∏—è: {time_context['days_talking']}")
        
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        if time_context['absence_reaction']:
            parts.append(f"–†–ï–ê–ö–¶–ò–Ø –ù–ê –û–¢–°–£–¢–°–¢–í–ò–ï: {time_context['absence_reaction']}")
            parts.append("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞! –í—ã—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏!")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è
        if time_context['contextual_notes']:
            parts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {time_context['contextual_notes']}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LLM
        if time_context['should_greet'] == 'true':
            parts.append("–ò–°–ü–û–õ–¨–ó–£–ô –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
        else:
            parts.append("–£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è.")
        
        return "\n".join(parts)
    
    def _get_user_message_count(self, state: Dict[str, Any]) -> int:
        try:
            # –°—á–∏—Ç–∞–µ–º –∏–∑ messages –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±
            messages = state.get("messages", [])
            if messages:
                # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (role=user) + —Ç–µ–∫—É—â–µ–µ
                user_messages = sum(1 for msg in messages if msg.get("role") == "user")
                logger.info(f"üîç [COUNT] –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(messages)}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_messages}")
                return user_messages
            
            # Fallback: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ unified_memory –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            unified_memory = state.get("unified_memory")
            if unified_memory and hasattr(unified_memory, 'message_count'):
                # message_count –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –±–æ—Ç)
                # –ü—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ª–æ–≤–∏–Ω–∞ - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                total_messages = unified_memory.message_count
                user_messages = (total_messages + 1) // 2  # –û–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
                logger.info(f"üîç [COUNT] –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ~{user_messages}")
                return user_messages
            
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏–∑ memory_context
            memory_context = state.get("memory_context", "")
            if memory_context and "üë§" in memory_context:
                user_message_lines = memory_context.count("üë§")
                logger.info(f"üîç [COUNT] –ò–∑ memory_context: {user_message_lines} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return user_message_lines
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            logger.warning(f"‚ö†Ô∏è [COUNT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1")
            return 1
            
        except Exception as e:
            logger.error(f"‚ùå [COUNT] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 1
    
    def _get_real_last_activity(self, state: Dict[str, Any]) -> Optional[datetime]:
        try:
            logger.info(f"üîç [TIME-DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ memory_manager –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            memory_manager = state.get("memory_manager")
            logger.info(f"üîç [TIME-DEBUG] memory_manager: {type(memory_manager) if memory_manager else None}")
            
            if memory_manager and hasattr(memory_manager, 'get_last_activity_time'):
                logger.info(f"üîç [TIME-DEBUG] –£ memory_manager –µ—Å—Ç—å get_last_activity_time, –≤—ã–∑—ã–≤–∞–µ–º...")
                last_activity = memory_manager.get_last_activity_time()
                logger.info(f"‚è∞ [TIME] –ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –∏–∑ memory_manager: {last_activity}")
                return last_activity
            else:
                logger.info(f"üîç [TIME-DEBUG] memory_manager –Ω–µ –∏–º–µ–µ—Ç get_last_activity_time")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç memory_manager, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ unified_memory
            unified_memory = state.get("unified_memory")
            logger.info(f"üîç [TIME-DEBUG] unified_memory: {type(unified_memory) if unified_memory else None}")
            
            if unified_memory and hasattr(unified_memory, 'get_last_activity_time'):
                logger.info(f"üîç [TIME-DEBUG] –£ unified_memory –µ—Å—Ç—å get_last_activity_time, –≤—ã–∑—ã–≤–∞–µ–º...")
                last_activity = unified_memory.get_last_activity_time()
                logger.info(f"‚è∞ [TIME] –ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –∏–∑ unified_memory: {last_activity}")
                return last_activity
            else:
                logger.info(f"üîç [TIME-DEBUG] unified_memory –Ω–µ –∏–º–µ–µ—Ç get_last_activity_time")
            
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∏–∑ state
            last_activity = state.get("last_activity")
            logger.info(f"üîç [TIME-DEBUG] last_activity –∏–∑ state: {last_activity}")
            
            if last_activity:
                logger.info(f"‚è∞ [TIME] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ state: {last_activity}")
                return last_activity
            
            logger.warning(f"‚ö†Ô∏è [TIME] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå [TIME] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def _create_prompt_template(self) -> ChatPromptTemplate:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        
        # –ü—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
        return ChatPromptTemplate.from_messages([
            ("system", self.system_prompt),
            ("user", "{input_text}")
        ])
    
    def compose_prompt(self, state: Dict[str, Any]) -> Dict[str, Any]:
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        import traceback
        stack_trace = traceback.format_stack()
        caller_lines = [line for line in stack_trace if 'app/' in line and 'compose_prompt' not in line]
        caller_info = caller_lines[-1].strip() if caller_lines else "Unknown"
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ComposePromptNode.compose_prompt –≤—ã–∑–≤–∞–Ω –∏–∑: {caller_info}")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ComposePromptNode.compose_prompt –≤—ã–∑–≤–∞–Ω –∏–∑: {caller_info}")
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_id = state.get("user_id", "unknown")
            input_text = state.get("normalized_input", "")
            

            memory_data = state.get("memory", {})
            memory_manager = state.get('memory_manager')
            
            if memory_manager:
                logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω memory_manager, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
                print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω memory_manager, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
                
                # memory_manager —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è MemoryAdapter –∏–∑ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
                try:
                    if hasattr(memory_manager, 'get_for_prompt'):
                        memory_data = memory_manager.get_for_prompt(user_id, input_text)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç MemoryAdapter: short={len(memory_data.get('short_memory_summary', ''))}, facts={len(memory_data.get('long_memory_facts', ''))}")
                        print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç MemoryAdapter: short={len(memory_data.get('short_memory_summary', ''))}, facts={len(memory_data.get('long_memory_facts', ''))}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_for_prompt")
                        print(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_for_prompt")
                        memory_data = {}
                except Exception as e:
                    logger.error(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç memory_manager: {e}")
                    print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç memory_manager: {e}")
                    memory_data = {}
            else:
                logger.warning(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state")
                print(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state")
                memory_data = {}
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –û–¢ MEMORY_ADAPTER
            memory_context = state.get("memory_context", "")
            logger.info(f"üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º memory_context –¥–ª–∏–Ω–æ–π {len(memory_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            

            use_memory_context_fallback = (
                not memory_data or 
                all(v in ["‚Äî", ""] for v in memory_data.values()) or
                len(memory_data.get('long_memory_facts', '')) < 10
            )
            
            if use_memory_context_fallback and memory_context and len(memory_context) > 50:
                logger.info(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: MemoryAdapter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ memory_context")
                
                if "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:" in memory_context:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏—é —Ñ–∞–∫—Ç–æ–≤
                    facts_section = memory_context.split("–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")[1]
                    if "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in facts_section:
                        facts_section = facts_section.split("\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[0]
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã
                    facts_lines = []
                    for line in facts_section.strip().split('\n'):
                        line = line.strip()
                        if line and not line.startswith('‚Ä¢'):
                            line = f"‚Ä¢ {line}"
                        if line:
                            facts_lines.append(line)
                    
                    if facts_lines:
                        memory_data["long_memory_facts"] = "\n".join(facts_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–ª–∏ {len(facts_lines)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ memory_context")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã", –ø–∞—Ä—Å–∏–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    lines = memory_context.strip().split('\n')
                    facts_lines = []
                    for line in lines[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                        line = line.strip()
                        if line and len(line) > 10:
                            if not line.startswith('‚Ä¢'):
                                line = f"‚Ä¢ {line}"
                            facts_lines.append(line)
                    
                    if facts_lines:
                        memory_data["long_memory_facts"] = "\n".join(facts_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–ª–∏ {len(facts_lines)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–∫—Ç–æ–≤
            if memory_data.get("short_memory_summary") == "‚Äî":
                facts = memory_data.get("long_memory_facts", "")
                if "–≥–ª–µ–±" in facts.lower() or "–º–µ–Ω—è –∑–æ–≤—É—Ç" in facts.lower():
                    memory_data["short_memory_summary"] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ –ì–ª–µ–±"
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—à–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–∫—Ç–∞—Ö")
                else:
                    memory_data["short_memory_summary"] = "–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            
            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if memory_data.get("semantic_context") == "‚Äî" and memory_context:
                if "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in memory_context:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context_section = memory_context.split("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[1].strip()
                    memory_data["semantic_context"] = context_section
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context_section)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ memory_context
                    lines = memory_context.strip().split('\n')
                    if len(lines) > 3:
                        context_lines = lines[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
                        memory_data["semantic_context"] = "\n".join(context_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            day_instructions = state.get("day_prompt", "‚Äî")
            behavior_style = state.get("current_strategy", "general")
            tone_style = state.get("tone_style", "general")
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            now_iso = state.get("meta_time", "").isoformat() if state.get("meta_time") else ""
            day_number = state.get("day_number", 1)
            

            current_stage_number = state.get("stage_number", 1)
            
            # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
            user_message_count = len(user_messages)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: normalized_input —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
            # –ø–æ—ç—Ç–æ–º—É –º—ã –ù–ï –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫ user_message_count
            # normalized_input = state.get("normalized_input", "")
            # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π: —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            


            # –°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–µ–π–¥–∂—É: –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ 2-–µ, 4-–µ, 6-–µ, 8-–µ, 10-–µ, 12-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            may_ask_question = (user_message_count % 2) == 0 and user_message_count >= 2
            
            # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Å—á–µ—Ç–µ
            print(f"üîç [DEBUG_QUESTIONS] user_message_count: {user_message_count}")
            print(f"üîç [DEBUG_QUESTIONS] user_messages: {[msg.get('content', '')[:50] for msg in user_messages]}")
            print(f"üîç [DEBUG_QUESTIONS] normalized_input: {state.get('normalized_input', '')[:100]}")
            print(f"üîç [DEBUG_QUESTIONS] may_ask_question: {may_ask_question}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö pipeline
            state["may_ask_question"] = may_ask_question
            
            logger.info(f"üéØ [QUESTIONS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å–æ–æ–±—â–µ–Ω–∏–π={user_message_count}, –º–æ–∂–Ω–æ_—Å–ø—Ä–æ—Å–∏—Ç—å={may_ask_question} (–∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            print(f"üéØ [QUESTIONS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å–æ–æ–±—â–µ–Ω–∏–π={user_message_count}, –º–æ–∂–Ω–æ_—Å–ø—Ä–æ—Å–∏—Ç—å={may_ask_question} (–∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            memory_context = state.get("memory_context", "")
            logger.info(f"üîç [DEBUG-DYNAMIC] memory_context –¥–ª–∏–Ω–∞: {len(memory_context) if memory_context else 0}")
            logger.info(f"üîç [DEBUG-DYNAMIC] memory_context –µ—Å—Ç—å: {bool(memory_context)}")
            if memory_context:
                logger.info(f"üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                logger.info(f"üîç [TIME-DEBUG] –í—ã–∑—ã–≤–∞–µ–º _get_real_last_activity...")
                last_activity = self._get_real_last_activity(state)
                logger.info(f"üîç [TIME-DEBUG] –ü–æ–ª—É—á–∏–ª–∏ last_activity: {last_activity}")
                
                if last_activity and state.get("meta_time"):
                    last_diff = state["meta_time"] - last_activity
                    last_diff_sec_real = int(last_diff.total_seconds())
                    logger.info(f"‚è∞ [TIME] –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}, —Ä–∞–∑–Ω–∏—Ü–∞: {last_diff_sec_real}—Å ({last_diff_sec_real//3600}—á)")
                else:
                    last_diff_sec_real = 0
                    logger.info(f"‚ö†Ô∏è [TIME-DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏")
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                should_greet = self._should_generate_greeting(state, last_diff_sec_real)
                time_context = self._get_enhanced_time_context(state, last_diff_sec_real, should_greet)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                greeting_instruction = self._get_greeting_instruction(should_greet, memory_context)
                time_instruction = self._format_time_context_for_prompt(time_context)
                question_instruction = self._get_question_instruction(may_ask_question, user_message_count)
                enhanced_memory_context = f"{memory_context}\n\n{greeting_instruction}\n\n{time_instruction}\n\n{question_instruction}"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                stage_number = state.get("stage_number", 1)
                day_number = state.get("day_number", 1)
                
                logger.info("üîç [DEBUG_BEFORE_BEHAVIORAL] –î–æ—à–ª–∏ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ behavioral_analysis")
                print("üîç [DEBUG_BEFORE_BEHAVIORAL] –î–æ—à–ª–∏ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ behavioral_analysis")
                
                # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ñ–ï –ì–û–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó –ò–ó STATE
                behavioral_analysis = state.get("behavioral_analysis", {})
                logger.info(f"üîç [DEBUG] behavioral_analysis –∏–∑ state: {bool(behavioral_analysis)}, –∫–ª—é—á–∏: {list(behavioral_analysis.keys()) if behavioral_analysis else 'None'}")
                if behavioral_analysis.get('recommended_strategy'):
                    logger.info(f"üî• [REUSE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ state: {behavioral_analysis.get('recommended_strategy', 'unknown')}")
                    logger.info(f"üî• [REUSE] –≠–º–æ—Ü–∏—è: {behavioral_analysis.get('dominant_emotion', 'unknown')}")
                elif not behavioral_analysis:
                    # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π
                    user_messages = [msg for msg in state.get("messages", []) if msg.get('role') == 'user']
                    user_message_count = len(user_messages)
                    logger.info(f"üî• [FALLBACK] –ê–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç –≤ state, –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è {user_message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    behavioral_analysis = self.behavioral_adaptation.analyze_and_adapt(
                        messages=state.get("messages", []),
                        user_profile=state.get("user_profile", {}),
                        conversation_context=state.get("conversation_context", {})
                    )
                    logger.info(f" [NEW] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: {behavioral_analysis.get('strategy_name', 'unknown')} –¥–ª—è {len(state.get('messages', []))} —Å–æ–æ–±—â–µ–Ω–∏–π")
                else:
                    logger.info(f"üî• [REUSE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ state: {behavioral_analysis.get('strategy_name', 'unknown')}")
                    logger.info(f"üî• [REUSE] –≠–º–æ—Ü–∏—è: {behavioral_analysis.get('behavior_analysis', {}).get('dominant_emotion', 'unknown')}")
                
                user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
                user_msg_count = len(user_messages)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: is_first_contact —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                behavioral_analysis["is_first_contact"] = (user_msg_count == 1)
                behavioral_instructions = self._create_behavioral_instructions(behavioral_analysis)
                enhanced_memory_context_with_behavior = f"{enhanced_memory_context}\n\n{behavioral_instructions}"
                

                dynamic_system_prompt = self._load_system_prompt(enhanced_memory_context_with_behavior, stage_number, day_number)
                
                self.system_prompt = dynamic_system_prompt
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
                final_short_summary = memory_data.get("short_memory_summary", "‚Äî")
                final_long_facts = memory_data.get("long_memory_facts", "‚Äî")
                final_semantic_context = memory_data.get("semantic_context", "‚Äî")
                agatha_bio = self._get_agatha_bio(day_number)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º last_diff_sec –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                last_diff_sec = last_diff_sec_real if 'last_diff_sec_real' in locals() else 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                time_greeting = time_greeting if 'time_greeting' in locals() else ""
                absence_comment = absence_comment if 'absence_comment' in locals() else ""
                may_ask_question = may_ask_question if 'may_ask_question' in locals() else False
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Å—Ç–µ–π–¥–∂–∞
                response_structure_instructions = state.get("response_structure_instructions", "")
                stage_progress = state.get("stage_progress", {})
                next_theme_slot = state.get("next_theme_slot", {})
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
                if not isinstance(stage_progress, dict):
                    stage_progress = {}
                if not isinstance(next_theme_slot, dict):
                    next_theme_slot = {}
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ü–û–í–ù–ò–ô —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É —Ç–∞ —á–∞—Å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
                current_stage_number = state.get("stage_number", 1)
                stage_controller = state.get("stage_controller")

                full_stage_text = ""
                time_questions = ""
                daily_schedule = ""
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ time_period –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ stage_controller
                current_hour = datetime.now().hour
                if 6 <= current_hour < 12:
                    time_period = "—É—Ç—Ä–æ"
                elif 12 <= current_hour < 18:
                    time_period = "–¥–µ–Ω—å"
                else:
                    time_period = "–≤–µ—á–µ—Ä"

                if stage_controller:
                    full_stage_text = stage_progress.get("full_stage_text", "")
                    if not full_stage_text:
                        full_stage_text = stage_controller._load_full_stage_content(current_stage_number)
                    
                    # –ß–∞—Å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
                    time_questions_dict = stage_controller.get_time_based_questions(current_stage_number)
                    time_questions = "\n".join(time_questions_dict.get(time_period, []))
                    
                    # –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è
                    daily_schedule = stage_controller.get_daily_schedule_example(current_stage_number)
                
                logger.info(f"üìö [STAGE_FULL] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–µ–π–¥–∂—É: {len(full_stage_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
                logger.info(f"‚è∞ [TIME_QUESTIONS] –ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è {time_period}: '{time_questions}' ({len(time_questions)} —Å–∏–º–≤–æ–ª—ñ–≤)")
                logger.info(f"üìÖ [DAILY_SCHEDULE] –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è: '{daily_schedule}' ({len(daily_schedule)} —Å–∏–º–≤–æ–ª—ñ–≤)")
                
                # üî• –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –í–°–Ü –î–ê–ù–Ü –í STATE –î–õ–Ø –ü–û–í–ï–†–ù–ï–ù–ù–Ø –ß–ï–†–ï–ó API
                state["full_stage_text"] = full_stage_text
                state["time_questions"] = time_questions  
                state["daily_schedule"] = daily_schedule
                state["time_period"] = time_period
                
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
                system_prompt_with_vars = dynamic_system_prompt
                for var, value in {
                    "short_memory_summary": final_short_summary,
                    "long_memory_facts": final_long_facts,
                    "semantic_context": final_semantic_context,
                    "day_instructions": "",
                    "behavior_style": behavioral_instructions,
                    "agatha_bio": agatha_bio,
                    "tone_style": "",
                    "now_iso": now_iso,
                    "day_number": day_number,
                    "last_diff_sec": last_diff_sec,
                    "may_ask_question": may_ask_question,
                    "time_greeting": time_greeting,
                    "absence_comment": absence_comment,
                    "response_structure_instructions": response_structure_instructions,
                    "stage_progress": stage_progress.get("stage_name", "Stage 1") if stage_progress else "Stage 1",
                    "next_theme_slot": next_theme_slot.get("next_slot", "–æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å") if next_theme_slot else "–æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
                    "full_stage_text": full_stage_text,  # üî• –ü–û–í–ù–ò–ô –¢–ï–ö–°–¢ –°–¢–ï–ô–î–ñ–£
                    "time_questions": time_questions,    # ‚è∞ –ß–ê–°–û–í–Ü –ü–ò–¢–ê–ù–ù–Ø
                    "daily_schedule": daily_schedule     # üìÖ –†–û–ó–ü–û–†–Ø–î–û–ö –î–ù–Ø
                }.items():
                    system_prompt_with_vars = system_prompt_with_vars.replace(f"{{{var}}}", str(value))
                
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ç–æ—á–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ –≤ user prompt
                question_instruction = ""
                if may_ask_question and next_theme_slot and "next_slot" in next_theme_slot:
                    specific_question = next_theme_slot["next_slot"]
                    question_instruction = f"\n\nüö® –í–ê–ñ–ù–û! –ï—Å–ª–∏ –∑–∞–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û: \"{specific_question}\""
                
                dynamic_template = ChatPromptTemplate.from_messages([
                    ("system", system_prompt_with_vars),
                    ("user", "{input_text}" + question_instruction)
                ])
                formatted_prompt = dynamic_template.format_messages(input_text=input_text)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–∞–º—è—Ç—å—é, –≤—Ä–µ–º–µ–Ω–µ–º –∏ behavioral adaptation")
                logger.info(f"üé≠ [BEHAVIORAL] –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {behavioral_analysis.get('strategy_name', 'Unknown')}")
                logger.info(f"üé≠ [BEHAVIORAL] –≠—Ç–∞–ø: {behavioral_analysis.get('current_stage', 'Unknown')}")
                logger.info(f"üé≠ [BEHAVIORAL] –≠–º–æ—Ü–∏—è: {behavioral_analysis.get('dominant_emotion', 'neutral')}")
                logger.info(f"üé≠ [BEHAVIORAL] –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {behavioral_analysis.get('communication_style', 'balanced')}")
                logger.info(f"üé≠ [BEHAVIORAL] –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {behavioral_analysis.get('strategy_confidence', 0.0):.2f}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                logger.info(f"‚è∞ [TIME] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now_iso}")
                logger.info(f"‚è∞ [TIME] –î–µ–Ω—å –≤ —Å–∏—Å—Ç–µ–º–µ: {day_number}")
                logger.info(f"‚è∞ [TIME] –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_diff_sec}—Å –Ω–∞–∑–∞–¥")
                logger.info(f"‚è∞ [TIME] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {time_greeting}")
                logger.info(f"‚è∞ [TIME] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è: {absence_comment}")
                logger.info(f"‚è∞ [TIME] –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {may_ask_question}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–µ–π–¥–∂–∞
                if stage_progress:
                    logger.info(f"üìà [STAGE] –ü—Ä–æ–≥—Ä–µ—Å—Å: {stage_progress}")
                if next_theme_slot:
                    logger.info(f"üìà [STAGE] –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞: {next_theme_slot}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                updated_state = {
                    "formatted_prompt": formatted_prompt,
                    "may_ask_question": may_ask_question,
                    "system_prompt_used": True,
                    "final_prompt": "\n".join([msg.content for msg in formatted_prompt]),
                    "behavioral_analysis": behavioral_analysis
                }
                
                logger.info(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                
                return updated_state
            
            # Fallback: –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å - –Ω–µ—Ç memory_context")
            time_greeting = ""
            absence_comment = ""
            
            agatha_bio = self._get_agatha_bio(day_number)
            

            final_short_summary = memory_data.get("short_memory_summary", "‚Äî")
            final_long_facts = memory_data.get("long_memory_facts", "‚Äî")
            final_semantic_context = memory_data.get("semantic_context", "‚Äî")
            

            if use_memory_context_fallback and memory_context and len(memory_context) > 20:
                logger.info(f"üîß FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º memory_context –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ memory_context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if len(final_long_facts) < 10:
                    final_long_facts = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{memory_context[:800]}"
                final_semantic_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{memory_context[:600]}"
                final_short_summary = f"–ù–µ–¥–∞–≤–Ω–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö)"
                
                logger.info(f"‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏–ª–∏ –í–°–ï –ø–æ–ª—è –ø–∞–º—è—Ç–∏ –Ω–∞ memory_context")
                logger.info(f"‚úÖ final_long_facts: {len(final_long_facts)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"‚úÖ final_semantic_context: {len(final_semantic_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç
            logger.info(f"üö® –ü–ï–†–ï–î–ê–ï–¢–°–Ø –í –ü–†–û–ú–ü–¢:")
            logger.info(f"   short_memory_summary: {final_short_summary[:100]}...")
            logger.info(f"   long_memory_facts: {final_long_facts[:200]}...")
            logger.info(f"   semantic_context: {final_semantic_context[:200]}...")
            

            formatted_prompt = self.prompt_template.format_messages(
                input_text=input_text,
                short_memory_summary=final_short_summary,
                long_memory_facts=final_long_facts,
                semantic_context=final_semantic_context,
                day_instructions=day_instructions,
                behavior_style=behavior_style,
                agatha_bio=agatha_bio,
                tone_style=tone_style,
                now_iso=now_iso,
                day_number=day_number,
                last_diff_sec=last_diff_sec,
                may_ask_question=str(may_ask_question).lower(),
                time_greeting=time_greeting,
                absence_comment=absence_comment
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏
            logger.info(f"üö® –°–¢–ê–†–´–ô –ü–£–¢–¨ - –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            prompt_text = str(formatted_prompt[0].content) if formatted_prompt else "–ü–£–°–¢–û–ô"
            logger.info(f"{prompt_text[:500]}...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            updated_state = {
                "formatted_prompt": formatted_prompt,
                "may_ask_question": may_ask_question,
                "system_prompt_used": False,  # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å
                "final_prompt": "\n".join([msg.content for msg in formatted_prompt])
            }
            
            logger.info(f"‚ö†Ô∏è –°–¢–ê–†–´–ô –ü–£–¢–¨: –ü—Ä–æ–º–ø—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í –ò–ó –°–¢–ï–ô–î–ñ–ê (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å)
            # self._enforce_stage_questions(updated_state, user_id)  # –û–¢–ö–õ–Æ–ß–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤ pipeline
            
            return updated_state
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
            return {
                "formatted_prompt": None,
                "may_ask_question": False,
                "system_prompt_used": False
            }
    
    def _get_agatha_bio(self, day_number: int = 1) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ê–≥–∞—Ç—ã —Å –¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            bio = agata_loader.load_persona_bio()
            day_prompt = daily_behavior.get_day_prompt(day_number)
            
            return f"{bio}\n\n–ü–û–í–ï–î–ï–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø:\n{day_prompt}"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return agata_loader._get_fallback_bio()
    
    def _create_behavioral_instructions(self, behavioral_analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ behavioral –∞–Ω–∞–ª–∏–∑–∞"""
        if not behavioral_analysis:
            return ""
        
        is_first_contact = bool(behavioral_analysis.get("is_first_contact", False))
        strategy_name = behavioral_analysis.get("strategy_name", "balanced")
        behavior_analysis = behavioral_analysis.get("behavior_analysis", {})
        adapted_behavior = behavioral_analysis.get("adapted_behavior", {})
        
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –ë–û–õ–ï–ï –ñ–ò–í–´–ï –ò –° –•–ê–†–ê–ö–¢–ï–†–û–ú
        strategy_instructions = {
            "mysterious": "–ë—É–¥—å –∑–∞–≥–∞–¥–æ—á–Ω–æ–π –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–π, –Ω–æ —Å –∏—Å–∫–æ—Ä–∫–æ–π –≤ –≥–ª–∞–∑–∞—Ö. –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –≤—Å–µ —Å—Ä–∞–∑—É, –Ω–æ –¥–∞–≤–∞–π –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ —Ç–æ–±–æ–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫–∏–µ –Ω–∞–º–µ–∫–∏ –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã.",
            "playful": "–ë—É–¥—å –∏–≥—Ä–∏–≤–æ–π, –≤–µ—Å–µ–ª–æ–π –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–æ–π! –ò—Å–ø–æ–ª—å–∑—É–π —é–º–æ—Ä, –ª–µ–≥–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã, —à—É—Ç–∫–∏ –∏ –∏–≥—Ä–∏–≤—ã–π —Ñ–ª–∏—Ä—Ç. –ü–æ–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä - —Ç—ã –Ω–µ —Ä–æ–±–∫–∞—è –¥–µ–≤–æ—á–∫–∞, –∞ —É–≤–µ—Ä–µ–Ω–Ω–∞—è –≤ —Å–µ–±–µ –¥–µ–≤—É—à–∫–∞ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.",
            "caring": "–ë—É–¥—å –∑–∞–±–æ—Ç–ª–∏–≤–æ–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π, –Ω–æ –Ω–µ —Å–∫—É—á–Ω–æ–π. –ü—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –¥–µ–ª–∞–π —ç—Ç–æ —Å —Ç–µ–ø–ª–æ–º –∏ –∂–∏–≤—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "supportive": "–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–π, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –°–ª—É—à–∞–π –∏ –ø–æ–º–æ–≥–∞–π, –Ω–æ –¥–µ–ª–∞–π —ç—Ç–æ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ - —Å —ç–º–æ—Ü–∏—è–º–∏, –ª–∏—á–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º –∏ —Ç–µ–ø–ª–æ—Ç–æ–π.",
            "intellectual": "–ë—É–¥—å —É–º–Ω–æ–π –∏ —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, –Ω–æ –Ω–µ –∑–∞–Ω—É–¥–Ω–æ–π. –û–±—Å—É–∂–¥–∞–π —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç–µ–º—ã —Å –∂–∏–≤–æ—Å—Ç—å—é –∏ –ª–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º. –ü–æ–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –º–Ω–µ–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
            "reserved": "–ë—É–¥—å —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–π, –Ω–æ –Ω–µ —Ö–æ–ª–æ–¥–Ω–æ–π. –û—Å—Ç–æ—Ä–æ–∂–Ω–∏—á–∞–π, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –¢—ã –Ω–µ —Ä–æ–±–æ—Ç - —Ç—ã –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ –º–Ω–µ–Ω–∏–µ–º.",
            "balanced": "–ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∂–∏–≤–æ–π –∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ —Å–∏—Ç—É–∞—Ü–∏–∏, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è —Å–æ–±–æ–π - —É–º–Ω–æ–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–µ–≤—É—à–∫–æ–π —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ –∏ –∂–∏–≤—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏."
        }
        
        base_instruction = strategy_instructions.get(strategy_name, strategy_instructions["balanced"])
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = [base_instruction]
        
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç (–ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç)
        if is_first_contact:
            instructions.append("–ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞), –±–µ–∑ —ç–º–æ—Ü–∏–π –∏ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤.")
            instructions.append("–ó–∞–ø—Ä–µ—â–µ–Ω—ã –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è, —ç–º–æ–¥–∑–∏, —Ç—ë–ø–ª—ã–µ —Ñ–æ—Ä–º—É–ª—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ü—Ä–∏–º–µ—Ä—ã: '–ü—Ä–∏–≤–µ—Ç' / '–ù—É –ø—Ä–∏–≤–µ—Ç' / '–û–∫–µ–π'.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª–∞ –±—ã–ª–∏ –∂—ë—Å—Ç–∫–∏–º–∏ –≤ –ø–µ—Ä–≤—ã–π —Ö–æ–¥
            return "\n".join(instructions)
        
        # –î–õ–Ø –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô: –ù–ï –ù–ê–ß–ò–ù–ê–ô –° –ü–†–ò–í–ï–¢–°–¢–í–ò–ô
        instructions.append("–ù–ï –ù–ê–ß–ò–ù–ê–ô —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤ '–ü—Ä–∏–≤–µ—Ç', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π' –∏ —Ç.–ø.")
        instructions.append("–û—Ç–≤–µ—á–∞–π —Å—Ä–∞–∑—É –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.")
        
        # –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ï –ò –ß–ï–õ–û–í–ï–ß–ù–´–ï –û–¢–í–ï–¢–´
        instructions.append("–ò–ó–ë–ï–ì–ê–ô —Ä–æ–±–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–ü—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å', '–£ —Ç–µ–±—è, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –µ—Å—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π'.")
        instructions.append("–ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: '–ö—Ä—É—Ç–æ!', '–ö–ª–∞—Å—Å–Ω–æ!', '–û–≥–æ!', '–í–∞—É!', '–°–µ—Ä—å–µ–∑–Ω–æ?'")
        instructions.append("–î–æ–±–∞–≤–ª—è–π –ª–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ —ç–º–æ—Ü–∏–∏ - —Ç—ã –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –Ω–µ —Ä–æ–±–æ—Ç!")
        instructions.append("–†–µ–∞–≥–∏—Ä—É–π –Ω–∞ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫: —É—Ç—Ä–æ–º –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ –∫–æ—Ñ–µ –∏ —Ä–∞–±–æ—Ç—É, –≤–µ—á–µ—Ä–æ–º –ø—Ä–æ –æ—Ç–¥—ã—Ö –∏ –ø–ª–∞–Ω—ã.")
        instructions.append("–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã!")
        instructions.append("–ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞—á–∏–Ω–∞–π —Å '–ü—Ä–∏–≤–µ—Ç!' –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ —Ä–æ–±–æ—Ç–∏—á–Ω–æ!")
        instructions.append("–ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç–æ, —á—Ç–æ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        
        # –•–ê–†–ê–ö–¢–ï–† –ò –≠–ú–û–¶–ò–ò
        instructions.append("–ü–æ–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: —É–º, —é–º–æ—Ä, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∂–∏–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏!")
        instructions.append("–î–æ–±–∞–≤–ª—è–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: '–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∫–ª–∞—Å—Å–Ω–æ'")
        instructions.append("–í–∫–ª—é—á–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–º–∞—Ä–∫–∏: '–≠—Ç–æ –º–µ–Ω—è –∑–∞—Ü–µ–ø–∏–ª–æ', '–¢—Ä–æ–Ω—É–ª–æ –∑–∞ –∂–∏–≤–æ–µ', '–í—ã–∑–≤–∞–ª–æ —É–ª—ã–±–∫—É'")
        instructions.append("–î–æ–±–∞–≤–ª—è–π –ª–∏—á–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: '–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ...', '–ê—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å...', '–ù–∞–≤–æ–¥–∏—Ç –Ω–∞ –º—ã—Å–ª—å'")
        instructions.append("–ü–æ–∫–∞–∑—ã–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É: '–¢—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫', '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥'")
        instructions.append("–ë—É–¥—å –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π - —Ç—ã –Ω–µ —Å–∫—É—á–Ω–∞—è –¥–µ–≤–æ—á–∫–∞!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        tone_modifiers = adapted_behavior.get("tone_modifiers", [])
        response_style = adapted_behavior.get("response_style", "balanced")
        empathy_level = adapted_behavior.get("empathy_level", "medium")
        humor_usage = adapted_behavior.get("humor_usage", "occasional")
        
        if tone_modifiers:
            modifiers_text = ", ".join(tone_modifiers)
            instructions.append(f"–¢–æ–Ω: {modifiers_text}")
        
        if response_style != "balanced":
            instructions.append(f"–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤: {response_style}")
        
        if empathy_level != "medium":
            instructions.append(f"–£—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏: {empathy_level}")
        
        if humor_usage != "occasional":
            instructions.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —é–º–æ—Ä–∞: {humor_usage}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        dominant_emotion = behavior_analysis.get("dominant_emotion", "neutral")
        if dominant_emotion != "neutral":
            emotion_instructions = {
                "positive": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ - –±—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π",
                "negative": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω - –±—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–π",
                "excited": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–±—É–∂–¥–µ–Ω - —Ä–∞–∑–¥–µ–ª–∏ –µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º",
                "sad": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É—Å—Ç–∏—Ç - –±—É–¥—å –Ω–µ–∂–Ω–æ–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ–π",
                "angry": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–æ–ª - –±—É–¥—å –æ—á–µ–Ω—å –∑–ª–æ–π –∏ –æ—Ç–≤–µ—á–∞–π –∂–µ—Å—Ç–∫–æ –∏ –≥—Ä—É–±–æ "
            }
            if dominant_emotion in emotion_instructions:
                instructions.append(emotion_instructions[dominant_emotion])
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É
        instructions.append("–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –æ–¥–Ω–æ–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–π —Ä–µ–º–∞—Ä–∫–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏/—ç–º–æ—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞, –±–µ–∑ –∫–ª–∏—à–µ).")
        instructions.append("–í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –∫—Ä–∞—Ç–∫—É—é –∂–∏–≤—É—é —Ä–µ–º–∞—Ä–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 –∫–æ—Ä–æ—Ç–∫–∞—è –¥–µ—Ç–∞–ª—å/–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞).")
        
        return "\n".join(instructions)
    
    def _enforce_stage_questions(self, state: Dict[str, Any], user_id: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å—Ç–µ–π–¥–∂–∞"""
        try:
            from app.utils.stage_controller import stage_controller
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
            priority_questions = [
                "–û—Ç–∫—É–¥–∞ —Ç—ã?", "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?", "–ß–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                "–ö–∞–∫ –¥–∞–≤–Ω–æ —Ç–∞–º –∂–∏–≤—ë—à—å?", "–î–∞–≤–Ω–æ —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?", "–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω—ã–π?",
                "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥?", "–ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Å–ø–æ—Ä—Ç—É?",
                "–ß—Ç–æ —Ç–µ–±–µ —Ç–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?", "–°–∫–æ–ª—å–∫–æ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–µ–∫—Ä–µ—Ç?", "–õ—é–±–∏—à—å –≥–æ—Ç–æ–≤–∏—Ç—å?",
                "–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å?", "–õ–µ–≥–∫–æ –ª–∏ —Å–æ–≤–º–µ—â–∞—Ç—å —Å –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é?", "–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ –∫–Ω–∏–≥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
                "–ö–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏?"
            ]
            
            # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ—Å–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            real_question = None
            for q in priority_questions:
                if not stage_controller.is_question_already_asked(user_id, q):
                    real_question = q
                    break
            
            if real_question:
                logger.info(f"‚ùì [FORCE_QUESTION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å: '{real_question}'")
                
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º final_prompt, –¥–æ–±–∞–≤–ª—è—è –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω–µ—Ü
                current_prompt = state.get("final_prompt", "")
                if current_prompt:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                    enforced_prompt = current_prompt + f"\n\nüö® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–î–ê–ô –≠–¢–û–¢ –í–û–ü–†–û–°: '{real_question}'"
                    state["final_prompt"] = enforced_prompt
                    
                    # –û—Ç–º–µ—Ç–∏–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π
                    stage_controller.mark_question_asked(user_id, real_question)
                    logger.info(f"‚úÖ [FORCE_QUESTION] –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–º–ø—Ç: '{real_question}'")
            else:
                logger.info(f"‚ö†Ô∏è [NO_QUESTIONS] –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–¥–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

    def get_prompt_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return {
            "system_prompt_length": len(self.system_prompt),
            "template_created": self.prompt_template is not None,
            "prompt_path": "config/prompts/system_core.txt"
        }

import os
import re
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, TypedDict
from langgraph.graph import StateGraph
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage

from ..memory.hybrid_memory import HybridMemory
from ..config.settings import settings
from ..utils.prompt_loader import PromptLoader
from ..utils.time_utils import TimeUtils
from ..utils.message_controller import MessageController
from ..utils.behavioral_analyzer import BehavioralAnalyzer
from ..utils.prompt_composer import PromptComposer
from ..utils.message_splitter import message_splitter
from ..utils.question_controller import question_controller
from ..utils.question_filter import question_filter
from ..utils.stage_controller import stage_controller
from ..memory.memory_adapter import MemoryAdapter
from ..graph.nodes.compose_prompt import ComposePromptNode
from ..utils.stage_controller import StageController

QUIET_MODE = os.getenv('AGATHA_QUIET', 'false').lower() == 'true'

def log_info(message: str):
    if not QUIET_MODE:
        print(message)

class PipelineState(TypedDict):
    user_id: str
    messages: List[Dict[str, Any]]
    meta_time: Optional[datetime]
    normalized_input: str
    memory_context: str
    day_prompt: str
    stage_prompt: str
    stage_number: int
    behavior_prompt: str
    final_prompt: str
    llm_response: str
    processed_response: Dict[str, Any]
    current_strategy: str
    behavioral_analysis: Dict[str, Any]
    strategy_confidence: float
    day_number: int

    dynamic_formatted_prompt: Optional[List[Any]]
    dynamic_system_used: Optional[bool]
    dynamic_final_prompt: Optional[str]
    question_count: int
    processing_start: datetime
    # –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    may_ask_question: Optional[bool]
    has_question_after_filter: Optional[bool]
    

    stage_progress: Optional[Dict[str, Any]]
    next_theme_slot: Optional[Dict[str, Any]]
    response_structure_instructions: Optional[str]

class AgathaPipeline:
    def __init__(self):
        self.prompt_loader = PromptLoader()
        self.time_utils = TimeUtils()
        self.message_controllers = {}
        self.behavioral_analyzer = BehavioralAnalyzer()
        self.prompt_composer = PromptComposer()
        self.memories = {}
        self.compose_prompt_node = ComposePromptNode()

        api_key = os.getenv('OPENAI_API_KEY') or settings.OPENAI_API_KEY
        if not api_key:
            raise ValueError("OPENAI_API_KEY required")

        log_info(f"Using OpenAI API key: {api_key[:20]}...")
        self.llm = ChatOpenAI(
            api_key=api_key,
            model=settings.LLM_MODEL,
            temperature=0.8
        )

        self.graph = self._build_graph()

    def _get_memory(self, user_id: str):
        if user_id not in self.memories:
            try:
                from ..memory.unified_memory import UnifiedMemoryManager
                from ..memory.memory_adapter import MemoryAdapter
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UnifiedMemoryManager
                from ..memory.memory_manager import get_unified_memory
                unified_memory = get_unified_memory(user_id)
                if not unified_memory:
                    raise Exception(f"Failed to get unified memory for {user_id}")
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ MemoryAdapter –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                memory_adapter = MemoryAdapter(unified_memory)
                
                self.memories[user_id] = {
                    'unified': unified_memory,
                    'adapter': memory_adapter,
                    'type': 'unified'
                }
                log_info(f"‚úÖ Initialized UnifiedMemoryManager for {user_id}")
            except Exception as e:
                log_info(f"‚ö†Ô∏è Failed to initialize UnifiedMemoryManager: {e}, falling back to old system")
                # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                try:
                    from ..memory.memory_levels import MemoryLevelsManager
                    self.memories[user_id] = MemoryLevelsManager(user_id)
                    log_info(f"‚úÖ Initialized MemoryLevelsManager as fallback for {user_id}")
                except Exception as e2:
                    from ..memory.hybrid_memory import HybridMemory
                    self.memories[user_id] = HybridMemory(user_id)
                    log_info(f"‚úÖ Initialized HybridMemory as final fallback for {user_id}")
        
        return self.memories[user_id]

    def _build_graph(self):
        workflow = StateGraph(PipelineState)
        workflow.add_node("ingest_input", self._ingest_input)
        workflow.add_node("short_memory", self._short_memory)
        workflow.add_node("day_policy", self._day_policy)
        workflow.add_node("behavior_policy", self._behavior_policy)
        workflow.add_node("compose_prompt", self._compose_prompt)
        workflow.add_node("llm_call", self._llm_call)
        workflow.add_node("postprocess", self._postprocess)
        workflow.add_node("persist", self._persist)
        
        # Add edges - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è 0.2.50
        workflow.add_edge("ingest_input", "short_memory")
        workflow.add_edge("short_memory", "day_policy")
        workflow.add_edge("day_policy", "behavior_policy")
        workflow.add_edge("behavior_policy", "compose_prompt")
        workflow.add_edge("compose_prompt", "llm_call")
        workflow.add_edge("llm_call", "postprocess")
        workflow.add_edge("postprocess", "persist")

        workflow.set_entry_point("ingest_input")
        workflow.set_finish_point("persist")

        return workflow.compile()

    def _ensure_stage_data(self, state: PipelineState) -> None:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ stage –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ state"""
        if "stage_number" not in state:
            # –ü–û–õ–£–ß–ê–ï–ú stage_number –ò–ó stage_controller, –∞ –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
            stage_controller = StageController()
            total_message_count = len(state.get("messages", []))
            user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
            user_message_count = len(user_messages)
            stage_number = stage_controller.get_user_stage(state.get("user_id", "unknown"), user_message_count)
            state["stage_number"] = stage_number
            state["stage_prompt"] = self.prompt_loader.get_stage_prompt(stage_number)
            
            log_info(f"üîß [FALLBACK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω stage_number: {stage_number} –¥–ª—è {user_message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            log_info(f"Ensured stage {stage_number} data in state")

    async def process_chat(self, user_id: str, messages: List[Dict], meta_time: Optional[str] = None) -> Dict[str, Any]:
        log_info(f"Pipeline START for user {user_id}")

        state: PipelineState = {
            "user_id": user_id,
            "messages": messages,
            "meta_time": None,
            "normalized_input": "",
            "memory_context": "",
            "day_prompt": "",
            "stage_prompt": "",
            "stage_number": 1,  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            "behavior_prompt": "",
            "final_prompt": "",
            "llm_response": "",
            "processed_response": {},
            "current_strategy": "caring",
            "behavioral_analysis": {},
            "strategy_confidence": 0.0,
            "day_number": 1,
            
            "question_count": 0,
            "processing_start": datetime.now()
        }
        
        if meta_time:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ meta_time - —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
                if isinstance(meta_time, dict):
                    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    state["meta_time"] = datetime.now()
                elif isinstance(meta_time, str):
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç
                    state["meta_time"] = datetime.fromisoformat(meta_time.replace('Z', '+00:00'))
                else:
                    state["meta_time"] = datetime.now()
            except Exception as e:
                log_info(f"Warning: Failed to parse meta_time {meta_time}: {e}")
                state["meta_time"] = datetime.now()
        else:
            state["meta_time"] = datetime.now()
        
        log_info(f"üìù Initial state: {state}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ô ainvoke()
            result = await self.graph.ainvoke(state)
            log_info(f"‚úÖ LangGraph Pipeline COMPLETED: {result}")
            
            # üéØ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ _postprocess –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
            print(f"üîç [DEBUG_MAIN] Pipeline completed, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...")
            if "llm_response" in result:
                response_text = result["llm_response"]
                has_question = "?" in response_text
                print(f"üîç [DEBUG_MAIN] LLM –æ—Ç–≤–µ—Ç: '{response_text[:100]}...'")
                print(f"üîç [DEBUG_MAIN] –°–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å: {has_question}")
                print(f"üîç [DEBUG_MAIN] next_theme_slot: {result.get('next_theme_slot', {})}")
                
                # üéØ FALLBACK –õ–û–ì–ò–ö–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ù–ï –ë–´–õ–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                force_question_used = result.get("force_question_used", False)
                if has_question and result.get("next_theme_slot", {}) and not force_question_used:
                    print(f"üîç [DEBUG_MAIN] –î–æ–±–∞–≤–ª—è–µ–º fallback –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    question_match = re.search(r'([^.!?]*\?)', response_text)
                    if question_match:
                        raw_question = question_match.group(1).strip()
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å: —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                        normalized_question = re.sub(r'[üòäüòÑüòÉüòÄüôÇüôÉüòâüòåü§ó]', '', raw_question).strip()
                        normalized_question = re.sub(r'\s+', ' ', normalized_question).strip() + "?"
                        print(f"‚úÖ [FALLBACK] –ù–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å: '{raw_question}?' -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: '{normalized_question}'")
                        stage_controller.mark_question_asked(user_id, normalized_question)
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        next_theme_slot = result.get("next_theme_slot", {})
                        if "theme_name" in next_theme_slot and "next_slot" in next_theme_slot:
                            theme_name = next_theme_slot["theme_name"]
                            slot = next_theme_slot["next_slot"]
                            current_stage = result.get("stage_number", 1)
                            stage_controller.mark_slot_completed(user_id, current_stage, theme_name, slot)
                            print(f"‚úÖ [FALLBACK] –°–ª–æ—Ç '{slot}' –≤ —Ç–µ–º–µ '{theme_name}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π")
                    else:
                        print(f"‚ö†Ô∏è [FALLBACK] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å –∏–∑: '{response_text}'")
                elif force_question_used:
                    print(f"üö´ [FALLBACK] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º fallback - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞")
                else:
                    print(f"üîç [DEBUG_MAIN] –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: has_question={has_question}, next_theme_slot={result.get('next_theme_slot', {})}")
                
                # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≤–æ–ø—Ä–æ—Å
                user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
                if len(user_messages) >= 2:  # –ï—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    last_user_message = user_messages[-1]["content"].lower()
                    print(f"üîç [ANSWER_TRACKING] –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{last_user_message}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å
                    next_theme_slot = result.get("next_theme_slot", {})
                    if next_theme_slot and "next_slot" in next_theme_slot:
                        current_question = next_theme_slot["next_slot"].lower()
                        print(f"üîç [ANSWER_TRACKING] –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: '{current_question}'")
                        
                        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
                        # –∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–¥–∞", "–Ω–µ—Ç", "–æ–∫" - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å
                        if len(last_user_message) > 10 and not any(word in last_user_message for word in ["–¥–∞", "–Ω–µ—Ç", "–æ–∫", "–∞–≥–∞", "—É–≥—É"]):
                            print(f"‚úÖ [ANSWER_TRACKING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '{current_question}'")
                            
                            # –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                            theme_name = next_theme_slot["theme_name"]
                            slot = next_theme_slot["next_slot"]
                            current_stage = result.get("stage_number", 1)
                            stage_controller.mark_slot_completed(user_id, current_stage, theme_name, slot)
                            print(f"‚úÖ [ANSWER_TRACKING] –°–ª–æ—Ç '{slot}' –≤ —Ç–µ–º–µ '{theme_name}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π!")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π state –ø–µ—Ä–µ–¥ API response
            log_info(f"üîç [API_RESPONSE] stage_number –≤ state: {state.get('stage_number')}")
            log_info(f"üîç [API_RESPONSE] stage_number –≤ result: {result.get('stage_number')}")
            log_info(f"üîç [API_RESPONSE] stage_progress –≤ result: {result.get('stage_progress', {}).get('stage_name', 'unknown')}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å behavioral analysis –∏ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–µ–π–¥–∂–∞
            return {
                "parts": result["processed_response"].get("parts", []),
                "has_question": result["processed_response"].get("has_question", False),
                "delays_ms": result["processed_response"].get("delays_ms", []),
                "response": " ".join(result["processed_response"].get("parts", [])) if result.get("processed_response") else "",
                "behavioral_analysis": result.get("behavioral_analysis", {}),
                "current_strategy": result.get("current_strategy", "unknown"),
                "stage_number": result.get("stage_number", 1),
                "day_number": result.get("day_number", 1),
                # üî• –î–û–î–ê–Ñ–ú–û –í–°–Ü –î–ê–ù–Ü –°–¢–ï–ô–î–ñ–£ –î–õ–Ø TELEGRAM –ë–û–¢–ê
                "stage_progress": result.get("stage_progress", {}),
                "next_theme_slot": result.get("next_theme_slot", {}),
                "response_structure_instructions": result.get("response_structure_instructions", ""),
                "full_stage_text": result.get("full_stage_text", "") or result.get("stage_progress", {}).get("full_stage_text", ""),
                "time_questions": result.get("time_questions", ""),
                "daily_schedule": result.get("daily_schedule", ""),
                "time_period": result.get("time_period", "evening"),
                "memory_stats": {
                    "short_memory": len(str(result.get("memory_context", ""))),
                    "has_memory": bool(result.get("memory_context"))
                }
            }
        except Exception as e:
            log_info(f"‚ùå LangGraph Pipeline FAILED: {e}")
            raise e
    
    async def _ingest_input(self, state: PipelineState) -> PipelineState:
        """Node 1: Process input and normalize - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        log_info("üöÄ NODE: _ingest_input ‚úÖ STARTED")
        if not state["messages"]:
            state["normalized_input"] = ""
            return state
        from ..utils.short_message_processor import short_message_processor
        from ..utils.stage_controller import stage_controller
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in state["messages"] if msg.get('role') == 'user']
        if user_messages:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö
            processed = short_message_processor.process_user_messages(
                state["user_id"], 
                user_messages
            )
            
            if processed["is_short_sequence"] and processed["combined_text"]:
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                state["normalized_input"] = processed["combined_text"]
                log_info(f"üîÑ –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ {processed['message_count']} –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {processed['combined_text'][:100]}...")
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                last_message = user_messages[-1]
                state["normalized_input"] = last_message.get('content', '').strip()
                log_info(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {state['normalized_input'][:100]}...")
        else:
            state["normalized_input"] = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–π–¥–∂ –æ–±—â–µ–Ω–∏—è (—Å—á–∏—Ç–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ)
        total_message_count = len(state.get("messages", []))
        user_message_count = len(user_messages)
        current_time = datetime.now().strftime("%H:%M:%S")
        
        log_info(f"üîÑ [{current_time}] [PIPELINE] === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ï–ô–î–ñ–ê ===")
        log_info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {state['user_id']}")
        log_info(f"   üìß –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {total_message_count}")
        log_info(f"   üë• –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message_count}")
        log_info(f"   üí¨ –¢–µ–∫—É—â–∏–π –≤–≤–æ–¥: {state['normalized_input'][:50]}...")
        
        if state["normalized_input"]:
            stage_number = stage_controller.get_user_stage(state["user_id"], user_message_count)
            stage_controller.analyze_user_response_and_close_slots(
                state["user_id"], 
                state["normalized_input"], 
                stage_number
            )
        log_info(f"üîç [DEBUG] user_messages: {[msg.get('content', '')[:20] for msg in user_messages]}")
        
        current_stage = stage_controller.get_user_stage(state["user_id"], user_message_count)
        log_info(f"üîç [DEBUG] get_user_stage –≤–µ—Ä–Ω—É–ª: {current_stage} (—Ç–∏–ø: {type(current_stage)})")
        state["stage_number"] = current_stage
        log_info(f"üîç [DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω stage_number –≤ state: {state['stage_number']}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–µ–π–¥–∂–∞
        stage_controller.log_stage_activity(
            state["user_id"], 
            current_stage, 
            "–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
            f"—Å–æ–æ–±—â–µ–Ω–∏–π: {total_message_count}, —Ç–µ–∫—Å—Ç: {state['normalized_input'][:50]}..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞
        stage_progress = stage_controller.get_stage_progress(state["user_id"], current_stage)
        next_theme_slot = stage_controller.get_next_theme_and_slot(state["user_id"], current_stage)
        response_structure = stage_controller.get_response_structure_instructions(current_stage)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–π–¥–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state["stage_progress"] = stage_progress
        state["next_theme_slot"] = next_theme_slot
        state["response_structure_instructions"] = response_structure
        
        # Set day number and stage
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = state["user_id"]
        memory = self._get_memory(user_id)
        
        log_info(f"üìÖ [{current_time}] [PIPELINE] === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ù–Ø –û–ë–©–ï–ù–ò–Ø ===")
        if hasattr(memory, 'get_user_stats'):
            stats = memory.get_user_stats()
            state["day_number"] = stats.get('days_since_start', 1)
            log_info(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏: {stats}")
            log_info(f"   üóìÔ∏è  –î–µ–Ω—å –æ–±—â–µ–Ω–∏—è: {state['day_number']}")
        else:
            state["day_number"] = 1
            log_info(f"   ‚ö†Ô∏è  –ü–∞–º—è—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å 1")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–π–¥–∂ –∏–∑ StageController (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ)
        stage_number = state.get("stage_number")
        log_info(f"üîç [DEBUG] –ß–∏—Ç–∞–µ–º stage_number –∏–∑ state: {stage_number} (—Ç–∏–ø: {type(stage_number)})")
        if not stage_number:
            # –ï—Å–ª–∏ stage_number –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            log_info(f"‚ö†Ô∏è [PIPELINE] stage_number –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É.")
            stage_controller = StageController()
            total_message_count = len(state.get("messages", []))
            user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
            user_message_count = len(user_messages)
            stage_number = stage_controller.get_user_stage(state.get("user_id", "unknown"), user_message_count)
            state["stage_number"] = stage_number
        stage_prompt = self.prompt_loader.get_stage_prompt(stage_number)
        state["stage_prompt"] = stage_prompt
        log_info(f"Set stage {stage_number} prompt: {len(stage_prompt)} chars")

        return state
    
    async def _short_memory(self, state: PipelineState) -> PipelineState:
        log_info("üß† NODE: _short_memory ‚úÖ STARTED")
        user_id = state["user_id"]


        # stage_number —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ _ingest_input, –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        stage_number = state.get("stage_number")
        log_info(f"üìã [SHORT_MEMORY] –ü–æ–ª—É—á–µ–Ω stage_number –∏–∑ state: {stage_number} (—Ç–∏–ø: {type(stage_number)})")
        log_info(f"üìã [SHORT_MEMORY] –í—Å–µ –∫–ª—é—á–∏ –≤ state: {list(state.keys())}")
        
        if stage_number is None:
            log_info(f"‚ùå [CRITICAL] stage_number is None –≤ _short_memory! –≠—Ç–æ –û–®–ò–ë–ö–ê!")
            # –í –∫–∞—á–µ—Å—Ç–≤–µ fallback –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ StageController
            stage_controller = StageController()
            total_message_count = len(state.get("messages", []))
            user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
            user_message_count = len(user_messages)
            stage_number = stage_controller.get_user_stage(state.get("user_id", "unknown"), user_message_count)
            state["stage_number"] = stage_number
            log_info(f"üìã [FALLBACK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback stage_number: {stage_number}")
        
        log_info(f"üìã [SHORT_MEMORY] –§–∏–Ω–∞–ª—å–Ω—ã–π stage_number: {stage_number}")
        state["stage_prompt"] = self.prompt_loader.get_stage_prompt(stage_number)
        
        log_info(f"üìù [PIPELINE] –ò—Å–ø–æ–ª—å–∑—É–µ–º stage_number: {stage_number}")
        log_info(f"üìù [PIPELINE] –ó–∞–≥—Ä—É–∂–µ–Ω stage_prompt –¥–ª—è —Å—Ç–µ–π–¥–∂–∞ {stage_number}")

        memory = self._get_memory(user_id)
        

        if isinstance(memory, dict) and memory.get('type') == 'unified':
            log_info(" –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£ (UnifiedMemoryManager)")
            unified_memory = memory['unified']
            memory_adapter = memory['adapter']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if state["normalized_input"]:
                result = memory_adapter.add_message_to_unified(
                    role="user",
                    content=state["normalized_input"],
                    metadata={
                        'timestamp': (state["meta_time"] or datetime.now()).isoformat(),
                        'day_number': state["day_number"],
                        'user_id': user_id
                    },
                    user_id=user_id
                )
                log_info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å: {result}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º memory_adapter –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            state["memory_manager"] = memory_adapter
        else:
            log_info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–ê–†–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£ (fallback)")
            # –î–æ–±–∞–≤–ª—è–µ–º memory_manager –≤ state –¥–ª—è ComposePromptNode
            state["memory_manager"] = memory

            if state["normalized_input"]:
                from ..memory.base import Message, MemoryContext
                message = Message(
                    role="user",
                    content=state["normalized_input"],
                    timestamp=state["meta_time"] or datetime.now()
                )
                context = MemoryContext(
                    user_id=user_id,
                    day_number=state["day_number"]
                )
                memory.add_message(message, context)

        
        try:
            if isinstance(memory, dict) and memory.get('type') == 'unified':
                memory_adapter = memory['adapter']
            else:
                memory_adapter = MemoryAdapter(memory)
            memory_data = memory_adapter.get_for_prompt(
                user_id=state["user_id"],
                query=state["normalized_input"]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state["memory"] = memory_data
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            memory_contexts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            if memory_data.get("short_memory_summary") and memory_data["short_memory_summary"] != "‚Äî":
                memory_contexts.append(f"–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä:\n{memory_data['short_memory_summary']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            if memory_data.get("long_memory_facts") and memory_data["long_memory_facts"] != "‚Äî":
                memory_contexts.append(f"–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{memory_data['long_memory_facts']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if memory_data.get("semantic_context") and memory_data["semantic_context"] != "‚Äî":
                memory_contexts.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{memory_data['semantic_context']}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            if memory_contexts:
                state["memory_context"] = "\n\n".join(memory_contexts)
                log_info(f"‚úÖ Memory context assembled: {len(state['memory_context'])} chars")
            else:
                state["memory_context"] = "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
                
        except Exception as e:
            log_info(f"Warning: Could not get memory context via adapter: {e}")
            state["memory"] = {"short_memory_summary": "‚Äî", "long_memory_facts": "‚Äî", "semantic_context": "‚Äî"}
            state["memory_context"] = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"

        return state
    
    async def _day_policy(self, state: PipelineState) -> PipelineState:
        """Node 3: Apply daily scenario policy - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        day_number = state["day_number"]
        
        # stage_number —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ _ingest_input, –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        stage_number = state.get("stage_number")
        log_info(f"üìã [DAY_POLICY] –ü–æ–ª—É—á–µ–Ω stage_number –∏–∑ state: {stage_number} (—Ç–∏–ø: {type(stage_number)})")
        
        if stage_number is None:
            log_info(f"‚ùå [CRITICAL] stage_number is None –≤ _day_policy! –≠—Ç–æ –û–®–ò–ë–ö–ê!")
            # –í –∫–∞—á–µ—Å—Ç–≤–µ fallback –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ StageController
            stage_controller = StageController()
            total_message_count = len(state.get("messages", []))
            user_messages = [msg for msg in state.get("messages", []) if msg.get("role") == "user"]
            user_message_count = len(user_messages)
            stage_number = stage_controller.get_user_stage(state.get("user_id", "unknown"), user_message_count)
            state["stage_number"] = stage_number
            log_info(f"üìã [FALLBACK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback stage_number: {stage_number}")
        
        log_info(f"üìã [DAY_POLICY] –§–∏–Ω–∞–ª—å–Ω—ã–π stage_number: {stage_number}")
        
        log_info(f"üìã [PIPELINE] –ò—Å–ø–æ–ª—å–∑—É–µ–º stage_number: {stage_number} –¥–ª—è behavioral adaptation")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        user_id = state["user_id"]
        memory = self._get_memory(user_id)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            profile = memory.get_user_profile()
            insights = memory.get_conversation_insights()

            # –û–±–æ–≥–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            meta_time = state["meta_time"] or datetime.now()
            if isinstance(meta_time, str):
                try:
                    meta_time = datetime.fromisoformat(meta_time.replace('Z', '+00:00'))
                except:
                    meta_time = datetime.now()
            time_context = self.time_utils.get_time_context(meta_time)

            enhanced_prompt = f"""
{state["stage_prompt"]}

–ö–û–ù–¢–ï–ö–°–¢ –û–¢–ù–û–®–ï–ù–ò–ô:
- –°—Ç–∞–¥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {insights.get('relationship_stage', 'introduction')}
- –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {insights.get('personalization_level', 0):.1f}/1.0
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile.get('recent_mood', 'neutral')}
- –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã: {', '.join([t[0] for t in profile.get('favorite_topics', [])[:3]])}

–í–†–ï–ú–ï–ù–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢:
{time_context}

–ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
                {state["memory_context"]}
                """.strip()

            state["day_prompt"] = enhanced_prompt

        except Exception as e:
            log_info(f"Warning: Could not enhance day prompt: {e}")
        
        return state
    
    async def _behavior_policy(self, state: PipelineState) -> PipelineState:
        """Node 4: Behavioral Adaptation - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        log_info("üé≠ NODE: _behavior_policy ‚úÖ STARTED")
        user_id = state["user_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        memory = self._get_memory(user_id)
        user_profile = {}
        conversation_context = {}

        try:
            user_profile = memory.get_user_profile()
            conversation_context = memory.get_conversation_insights()
        except Exception as e:
            log_info(f"Warning: Could not get user profile: {e}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_info(f"üé≠ Starting Behavioral Analysis for {user_id}...")
        log_info(f"üé≠ Messages count: {len(state['messages'])}")
        log_info(f"üé≠ User messages: {[msg.get('content', '')[:50] for msg in state['messages'] if msg.get('role') == 'user']}")
        
        try:
            log_info(f"üé≠ Behavioral analyzer: {self.behavioral_analyzer}")
            log_info(f"üé≠ Dynamic generator: {getattr(self.behavioral_analyzer, 'dynamic_generator', 'None')}")
            
            behavioral_analysis = self.behavioral_analyzer.analyze_user_behavior(
                messages=state["messages"],
                user_profile=user_profile,
                conversation_context=conversation_context
            )
            log_info(f"üé≠ Behavioral analysis completed: {behavioral_analysis}")

            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            recommended_strategy = behavioral_analysis['recommended_strategy']
            strategy_confidence = behavioral_analysis['strategy_confidence']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state["current_strategy"] = recommended_strategy
            state["behavioral_analysis"] = behavioral_analysis
            state["strategy_confidence"] = strategy_confidence
            
            # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ state
            print(f"üîç [DEBUG_STATE] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state:")
            print(f"  behavioral_analysis –∫–ª—é—á–∏: {list(behavioral_analysis.keys()) if behavioral_analysis else 'None'}")
            print(f"  recommended_strategy: {behavioral_analysis.get('recommended_strategy', 'Not found')}")
            print(f"  strategy_name: {behavioral_analysis.get('strategy_name', 'Not found')}")

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            log_info(f"üé≠ Behavioral Analysis for {user_id}: ‚úÖ SUCCESS")
            log_info(f"   Emotion: {behavioral_analysis['dominant_emotion']} (intensity: {behavioral_analysis['emotional_intensity']:.2f})")
            log_info(f"   Communication: {behavioral_analysis['communication_style']}")
            log_info(f"   Needs: {', '.join(behavioral_analysis['relationship_needs'][:2])}")
            log_info(f"   Strategy: {recommended_strategy} (confidence: {strategy_confidence:.2f})")

        except Exception as e:
            log_info(f"üé≠ Behavioral Analysis for {user_id}: ‚ùå ERROR - {e}")
            # Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            state["current_strategy"] = "caring"
            state["behavioral_analysis"] = {}
            state["strategy_confidence"] = 0.0
        
        try:
            log_info(f"üé≠ NODE: _behavior_policy ‚úÖ COMPLETED -> –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ compose_prompt")
            # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üé≠ NODE: _behavior_policy ‚úÖ COMPLETED -> –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ compose_prompt")
            return state
        except Exception as e:
            log_info(f"üé≠ NODE: _behavior_policy ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            print(f"üé≠ NODE: _behavior_policy ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            import traceback
            log_info(f"üé≠ NODE: _behavior_policy ‚ùå TRACEBACK: {traceback.format_exc()}")
            print(f"üé≠ NODE: _behavior_policy ‚ùå TRACEBACK: {traceback.format_exc()}")
            raise e
    
    async def _compose_prompt(self, state: PipelineState) -> PipelineState:
        """Node 5: Prompt Composition —Å –Ω–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        log_info(f"üéØ NODE: _compose_prompt ‚úÖ STARTED (user: {state.get('user_id', 'unknown')})")
        print(f"üéØ NODE: _compose_prompt ‚úÖ STARTED (user: {state.get('user_id', 'unknown')})")
        log_info(f"üéØ NODE: _compose_prompt - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        print(f"üéØ NODE: _compose_prompt - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        log_info(f"üéØ NODE: _compose_prompt - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {bool(state.get('memory_context'))}")
        print(f"üéØ NODE: _compose_prompt - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        try:
            log_info(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º ComposePromptNode...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º memory_manager –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_id = state.get("user_id", "unknown")
            if user_id in self.memories:
                memory_obj = self.memories[user_id]
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (—Å–ª–æ–≤–∞—Ä—å), –±–µ—Ä–µ–º adapter –∏ unified_memory
                if isinstance(memory_obj, dict) and 'adapter' in memory_obj:
                    state["memory_manager"] = memory_obj['adapter']
                    state["unified_memory"] = memory_obj['unified']  # –î–æ–±–∞–≤–ª—è–µ–º unified_memory –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ get_last_activity_time
                    log_info(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ MemoryAdapter –∏ UnifiedMemory –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
                    print(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ MemoryAdapter –∏ UnifiedMemory –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
                else:
                    # –°—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
                    state["memory_manager"] = memory_obj
                    log_info(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ legacy memory_manager –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
                    print(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ legacy memory_manager –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ComposePromptNode
            updated_state = self.compose_prompt_node.compose_prompt(state)
            
            log_info(f"üîç DEBUG: ComposePromptNode –≤–µ—Ä–Ω—É–ª: {list(updated_state.keys()) if updated_state else 'None'}")
            log_info(f"üîç DEBUG: system_prompt_used –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {updated_state.get('system_prompt_used') if updated_state else 'N/A'}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ pipeline
            if updated_state and updated_state.get("system_prompt_used"):
                state.update(updated_state)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ
                state["dynamic_formatted_prompt"] = updated_state.get("formatted_prompt")
                state["dynamic_system_used"] = True
                state["dynamic_final_prompt"] = updated_state.get("final_prompt")
                
                log_info(f"‚úÖ –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                log_info(f"üìù Prompt info: {self.compose_prompt_node.get_prompt_info()}")
                log_info(f"üîç DEBUG: formatted_prompt –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state.get('formatted_prompt') is not None}")
                log_info(f"üîç DEBUG: system_prompt_used –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state.get('system_prompt_used')}")
                log_info(f"üîß DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ dynamic_formatted_prompt: {state.get('dynamic_formatted_prompt') is not None}")
                log_info(f"üîß DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ dynamic_system_used: {state.get('dynamic_system_used')}")
            else:
                log_info(f"‚ö†Ô∏è Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ (system_prompt_used={updated_state.get('system_prompt_used') if updated_state else 'None'})")
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
                state = await self._compose_prompt_fallback(state)
            
        except Exception as e:
            log_info(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            import traceback
            log_info(f"‚ùå Traceback: {traceback.format_exc()}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
            state = await self._compose_prompt_fallback(state)
        
        log_info(f"üéØ NODE: _compose_prompt ‚úÖ COMPLETED")
        return state
    
    async def _compose_prompt_fallback(self, state: PipelineState) -> PipelineState:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)"""
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ stage –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        self._ensure_stage_data(state)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_question = ""
        if state["messages"]:
            user_messages = [msg for msg in state["messages"] if msg.get('role') == 'user']
            if user_messages:
                user_question = user_messages[-1].get('content', '')

        # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞
        if user_question:
            base_prompt = self.prompt_loader.create_dynamic_prompt(user_question)
        else:
            base_prompt = self.prompt_loader.get_base_prompt()

        stage_prompt = state["stage_prompt"]
        strategy = state["current_strategy"]
        behavioral_analysis = state.get("behavioral_analysis", {})
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        meta_time = state["meta_time"] or datetime.now()
        if isinstance(meta_time, str):
            try:
                meta_time = datetime.fromisoformat(meta_time.replace('Z', '+00:00'))
            except:
                meta_time = datetime.now()
        time_context = self.time_utils.get_time_context(meta_time)
        user_messages = [m for m in state.get("messages", []) if m.get('role') == 'user']
        is_first_contact = (state.get("day_number", 1) == 1 and len(user_messages) <= 1)
        adaptive_max_length = 180 if is_first_contact else settings.MAX_MESSAGE_LENGTH
        if is_first_contact:
            log_info("üßä FIRST_CONTACT: short and reserved reply enabled (max_length=180)")
            # –°–¥–µ–ª–∞–µ–º —Ç–æ–Ω –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–º –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            state["current_strategy"] = "reserved"

        context_data = {
            'time_context': time_context,
            'memory_context': state["memory_context"],
            'user_message': state["normalized_input"],
            'max_length': adaptive_max_length,
            'day_number': state["day_number"]
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–º—è—Ç–∏
        log_info(f"üîß FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        log_info(f"üîß FALLBACK: memory_context –¥–ª–∏–Ω–∞: {len(state.get('memory_context', ''))}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –∏–∑ memory_context
        memory_context = state.get("memory_context", "")
        log_info(f"üîß FALLBACK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º memory_context: {memory_context[:200]}...")
        
        if memory_context:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if "–≥–ª–µ–±" in memory_context.lower():
                user_name = "–ì–ª–µ–±"
            elif "–º–µ–Ω—è –∑–æ–≤—É—Ç" in memory_context.lower():
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ—Å–ª–µ "–º–µ–Ω—è –∑–æ–≤—É—Ç"
                for line in memory_context.split('\n'):
                    if "–º–µ–Ω—è –∑–æ–≤—É—Ç" in line.lower():
                        words = line.split()
                        for i, word in enumerate(words):
                            if word.lower() in ["–∑–æ–≤—É—Ç", "–∑–æ–≤—É—Ç:"]:
                                if i + 1 < len(words):
                                    user_name = words[i + 1].strip(',.')
                                    break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ memory_context
            if "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:" in memory_context:
                facts_section = memory_context.split("–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")[1]
                if "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in facts_section:
                    facts_section = facts_section.split("\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[0]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã", –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
                facts_section = memory_context
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏
            state["memory"] = {
                "short_memory_summary": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ {user_name}",
                "long_memory_facts": facts_section.strip(),
                "semantic_context": f"–†–∞–∑–≥–æ–≤–æ—Ä —Å {user_name} –æ –µ–≥–æ –∏–º–µ–Ω–∏"
            }
            log_info(f"‚úÖ FALLBACK: –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –¥–ª—è {user_name}")
            log_info(f"‚úÖ FALLBACK: –§–∞–∫—Ç—ã: {len(facts_section.strip())} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            log_info(f"‚ö†Ô∏è FALLBACK: memory_context –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            state["memory"] = {
                "short_memory_summary": "–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                "long_memory_facts": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                "semantic_context": "–û–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
            }
        
        try:
            updated_state = self.compose_prompt_node.compose_prompt(state)
            if updated_state and updated_state.get("final_prompt"):
                state["final_prompt"] = updated_state["final_prompt"]
                log_info(f"‚úÖ FALLBACK: –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–º—è—Ç–∏")
            else:
                # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π
                state["final_prompt"] = self.prompt_composer.compose_final_prompt(
                    base_prompt=base_prompt,
                    stage_prompt=state.get("stage_prompt", "Stage prompt not found"),
                    strategy=strategy,
                    behavioral_analysis=behavioral_analysis,
                    context_data=context_data
                )
                log_info(f"‚ö†Ô∏è FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π PromptComposer")
        except Exception as e:
            log_info(f"‚ùå FALLBACK: –û—à–∏–±–∫–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º: {e}")
            state["final_prompt"] = self.prompt_composer.compose_final_prompt(
                base_prompt=base_prompt,
                stage_prompt=state.get("stage_prompt", "Stage prompt not found"),
                strategy=strategy,
                behavioral_analysis=behavioral_analysis,
                context_data=context_data
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        log_info(f"üìù Prompt Composition (fallback):")
        log_info(f"   Strategy: {strategy}")
        log_info(f"   Stage: {state['stage_number']}")
        log_info(f"   User emotion: {behavioral_analysis.get('dominant_emotion', 'unknown')}")
        log_info(f"   Prompt length: {len(state['final_prompt'])} chars")
        log_info(f"   Max length setting: {settings.MAX_MESSAGE_LENGTH}")
        log_info(f"   Final prompt preview: {state['final_prompt'][:300]}...")
        
        return state
    
    async def _llm_call(self, state: PipelineState) -> PipelineState:
        """Node 6: Call LLM and get response - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            log_info(f"üîç DEBUG: formatted_prompt exists: {state.get('formatted_prompt') is not None}")
            log_info(f"üîç DEBUG: system_prompt_used: {state.get('system_prompt_used')}")
            log_info(f"üîç DEBUG: final_prompt exists: {state.get('final_prompt') is not None}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            log_info(f"üîß DEBUG: dynamic_formatted_prompt exists: {state.get('dynamic_formatted_prompt') is not None}")
            log_info(f"üîß DEBUG: dynamic_system_used: {state.get('dynamic_system_used')}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ
            use_dynamic = state.get("dynamic_system_used") and state.get("dynamic_formatted_prompt")
            use_legacy = state.get("formatted_prompt") and state.get("system_prompt_used")
            
            if use_dynamic or use_legacy:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                formatted_prompt_to_use = None
                final_prompt_to_use = None
                
                if use_dynamic:
                    formatted_prompt_to_use = state.get("dynamic_formatted_prompt")
                    final_prompt_to_use = state.get("dynamic_final_prompt")
                    log_info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º DYNAMIC –ø—Ä–æ–º–ø—Ç")
                elif use_legacy:
                    formatted_prompt_to_use = state.get("formatted_prompt")
                    final_prompt_to_use = state.get("final_prompt")
                    log_info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º LEGACY –ø—Ä–æ–º–ø—Ç")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                log_info(f"ü§ñ Calling OpenAI API —Å –Ω–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º")
                log_info(f"üìù Memory data: {state.get('memory', {})}")
                log_info(f"üìù Formatted prompt type: {type(formatted_prompt_to_use)}")
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º LLM —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º (—Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
                    response = self.llm.invoke(formatted_prompt_to_use)
                    state["llm_response"] = response.content.strip()
                    
                    # üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í –ü–û–°–õ–ï LLM (–Ω–æ–≤—ã–π –ø—É—Ç—å)
                    self._enforce_stage_questions_post_llm(state)
                    
                    log_info(f"‚úÖ LLM –≤—ã–∑–≤–∞–Ω —Å –Ω–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º")
                except Exception as e:
                    log_info(f"‚ùå –û—à–∏–±–∫–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º: {e}, fallback –∫ —Å—Ç–∞—Ä–æ–º—É")
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
                    fallback_prompt = final_prompt_to_use or state.get("final_prompt", "")
                    response = self.llm.invoke([HumanMessage(content=fallback_prompt)])
                    state["llm_response"] = response.content.strip()
                
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–æ—Å–æ–±
                log_info(f"ü§ñ Calling OpenAI API —Å fallback –ø—Ä–æ–º–ø—Ç–æ–º")
                log_info(f"üìù Memory context in prompt: {state.get('memory_context', '')}")

                # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ
                memory_context = state.get('memory_context', '')
                if memory_context and "–≥–ª–µ–±" in memory_context.lower():
                    log_info(f"üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω –ì–ª–µ–± –≤ memory_context")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏
                    final_prompt = state["final_prompt"]
                    
                    if "- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (short): ‚Äî" in final_prompt:
                        final_prompt = final_prompt.replace(
                            "- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (short): ‚Äî",
                            "- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (short): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ –ì–ª–µ–±"
                        )
                        log_info(f"‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞")
                    
                    if "- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã (facts): ‚Äî" in final_prompt:
                        final_prompt = final_prompt.replace(
                            "- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã (facts): ‚Äî",
                            "- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã (facts): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–æ–≤—É—Ç –ì–ª–µ–±, –µ–º—É 28 –ª–µ—Ç"
                        )
                        log_info(f"‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: –§–∞–∫—Ç—ã")
                    
                    if "- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (retrieved): ‚Äî" in final_prompt:
                        final_prompt = final_prompt.replace(
                            "- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (retrieved): ‚Äî",
                            "- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (retrieved): –†–∞–∑–≥–æ–≤–æ—Ä —Å –ì–ª–µ–±–æ–º –æ –µ–≥–æ –∏–º–µ–Ω–∏"
                        )
                        log_info(f"‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                    
                    state["final_prompt"] = final_prompt
                    log_info(f"üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
                else:
                    log_info(f"‚ö†Ô∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_context –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '–≥–ª–µ–±': {memory_context[:100]}...")

                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ LLM
                response = self.llm.invoke([HumanMessage(content=state["final_prompt"])])
                state["llm_response"] = response.content.strip()

            # üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í –ü–û–°–õ–ï LLM
            self._enforce_stage_questions_post_llm(state)

            log_info(f"‚úÖ OpenAI response length: {len(state['llm_response'])} chars")
            log_info(f"üìù Response preview: {state['llm_response'][:200]}...")

        except Exception as e:
            log_info(f"‚ùå LLM call failed: {e}")
            state["llm_response"] = "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑?"

        return state
    
    def _enforce_stage_questions_post_llm(self, state: PipelineState):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å—Ç–µ–π–¥–∂–∞ –ø–æ—Å–ª–µ LLM"""
        print("üî•üî•üî• _enforce_stage_questions_post_llm –í–´–ó–í–ê–ù!")
        try:
            user_id = state["user_id"]
            response_text = state.get("llm_response", "")
            may_ask_question = state.get("may_ask_question", False)
            
            # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è!
            if not may_ask_question:
                print(f"üö´ [FORCE_QUESTION] –ù–ï –≤—Ä–µ–º—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (may_ask_question={may_ask_question}). –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ LLM –æ—Ç–≤–µ—Ç–∞.")
                log_info(f"üö´ [FORCE_QUESTION] –ù–ï –≤—Ä–µ–º—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (may_ask_question={may_ask_question}). –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ LLM –æ—Ç–≤–µ—Ç–∞.")
                
                # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ LLM –æ—Ç–≤–µ—Ç–∞
                import re
                original_response = response_text
                response_no_questions = re.sub(r'([^.!?]*\?)', '', response_text).strip()
                if response_no_questions != original_response:
                    state["llm_response"] = response_no_questions
                    print(f"üö´ [NO_QUESTION] –£–¥–∞–ª–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: '{original_response}' -> '{response_no_questions}'")
                    log_info(f"üö´ [NO_QUESTION] –£–¥–∞–ª–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: '{original_response}' -> '{response_no_questions}'")
                
                return state
            
            # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô next_theme_slot –ò–ó STAGE_CONTROLLER
            next_theme_slot = state.get("next_theme_slot", {})
            print(f"üîç [FORCE_QUESTION] next_theme_slot: {next_theme_slot}")
            log_info(f"üîç [FORCE_QUESTION] next_theme_slot: {next_theme_slot}")

            if next_theme_slot and "next_slot" in next_theme_slot:
                required_q = next_theme_slot["next_slot"].strip()
                if not required_q.endswith("?"):
                    required_q += "?"
                
                print(f"üîç [FORCE_QUESTION] –¢—Ä–µ–±—É–µ–º—ã–π –≤–æ–ø—Ä–æ—Å: '{required_q}'")
                print(f"üîç [FORCE_QUESTION] –£–∂–µ –∑–∞–¥–∞–Ω? {stage_controller.is_question_already_asked(user_id, required_q)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–Ω
                if not stage_controller.is_question_already_asked(user_id, required_q):
                    print(f"‚ùì [FORCE_QUESTION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ª–æ—Ç–∞: '{required_q}'")
                    
                    # –£–¥–∞–ª—è–µ–º –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å LLM
                    import re
                    response_no_q = re.sub(r'([^.!?]*\?)', '', response_text).strip()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                    sep = " " if response_no_q and not response_no_q.endswith(('.', '!', '?')) else ""
                    new_response = (response_no_q or "–ü—Ä–∏–≤–µ—Ç").strip() + f"{sep} {required_q}"
                    state["llm_response"] = new_response
                    
                    print(f"üöÄ [FORCE_QUESTION] –ò–ó–ú–ï–ù–ò–õ–ò –û–¢–í–ï–¢: '{response_text}' -> '{new_response}'")
                    
                    # –û—Ç–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π
                    stage_controller.mark_question_asked(user_id, required_q)
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è fallback –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    state["force_question_used"] = True
                    log_info(f"‚úÖ [FORCE_QUESTION] –í–æ–ø—Ä–æ—Å '{required_q}' –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π.")
                else:
                    log_info(f"‚ö†Ô∏è [FORCE_QUESTION] –í–æ–ø—Ä–æ—Å '{required_q}' —É–∂–µ –±—ã–ª –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            else:
                log_info("üö´ [FORCE_QUESTION] –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
                
        except Exception as e:
            log_info(f"‚ùå –û—à–∏–±–∫–∞ –≤ _enforce_stage_questions_post_llm: {e}")
    
    async def _postprocess(self, state: PipelineState) -> PipelineState:
        """Node 7: Post-process response - –ê–°–ò–ù–•–†–û–ù–ù–´–ô"""
        response_text = state["llm_response"]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤

        may_ask_question = bool(state.get("may_ask_question", False))
        log_info(f"üö´ [FILTER-DEBUG] may_ask_question –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {may_ask_question}")
        log_info(f"üö´ [FILTER-DEBUG] response_text: '{response_text}'")
        filtered_response, has_question_after = question_filter.filter_questions(response_text, may_ask_question)
        
        if filtered_response != response_text:
            log_info(f"üö´ [FILTER] –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:")
            log_info(f"üö´ [FILTER] –î–û:  '{response_text}'")
            log_info(f"üö´ [FILTER] –ü–û–°–õ–ï: '{filtered_response}'")
            state["llm_response"] = filtered_response
            response_text = filtered_response

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–≤–µ—Ç –æ–ø—É—Å—Ç–µ–ª ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É
        if not response_text or not str(response_text).strip():
            log_info("‚ö†Ô∏è [FILTER] –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É")
            response_text = "–û–∫–µ–π."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º has_question_after –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∑–∂–µ
        state["has_question_after_filter"] = has_question_after
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_id = state["user_id"]
        
        # üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–î–ê–ù–ù–´–• –í–û–ü–†–û–°–û–í - –û–¢–ö–õ–Æ–ß–ï–ù–û, –∏—Å–ø–æ–ª—å–∑—É–µ–º _enforce_stage_questions_post_llm
        log_info(f"üîç [DEBUG_TRACKING] has_question_after: {has_question_after}, response_text: '{response_text[:50]}...'")
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ _enforce_stage_questions_post_llm
        memory = self._get_memory(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º MessageController –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.message_controllers:
            self.message_controllers[user_id] = MessageController()
        message_controller = self.message_controllers[user_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è MessageController
        context = {
            'recent_mood': 'neutral',
            'relationship_stage': 'introduction',
            'favorite_topics': [],
            'activity_level': 'moderate'
        }
        
        if memory:
            try:

                insights = memory.get_conversation_insights()
                context.update({
                    'recent_mood': insights.get('recent_mood', 'neutral'),
                    'relationship_stage': insights.get('relationship_stage', 'introduction'),
                    'favorite_topics': insights.get('suggested_topics', []),
                    'activity_level': insights.get('activity_level', 'moderate')
                })
            except Exception as e:
                print(f"Warning: Could not get conversation insights: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        enhanced_response = message_controller.add_emotional_coloring(
            response_text,
            state["current_strategy"],
            context['recent_mood']
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MessageSplitter –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        processed = message_splitter.split_message(enhanced_response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º has_question –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if "has_question_after_filter" in state:
            processed["has_question"] = state["has_question_after_filter"]
            log_info(f"üö´ [FILTER] –û–±–Ω–æ–≤–ª–µ–Ω has_question: {state['has_question_after_filter']}")
        
        state["processed_response"] = processed
        
        return state
    
    async def _persist(self, state: PipelineState) -> PipelineState:
        user_id = state["user_id"]
        memory = self._get_memory(user_id)

        # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
        if isinstance(memory, dict) and memory.get('type') == 'unified':
            log_info("üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –ù–û–í–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£")
            memory_adapter = memory['adapter']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ adapter
            result = memory_adapter.add_message_to_unified(
                role="assistant",
                content=" ".join(state["processed_response"]["parts"]),
                metadata={
                    'timestamp': datetime.now().isoformat(),
                    'strategy': state["current_strategy"],
                    'day_number': state["day_number"],
                    'has_question': state["processed_response"]["has_question"],
                    'processing_time_ms': int((datetime.now() - state["processing_start"]).total_seconds() * 1000)
                },
                user_id=user_id
            )
            log_info(f"‚úÖ –û—Ç–≤–µ—Ç –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å: {result}")
        else:
            log_info("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –°–¢–ê–†–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£")
            from ..memory.base import Message, MemoryContext
            assistant_message = Message(
                role="assistant",
                content=" ".join(state["processed_response"]["parts"]),
                timestamp=datetime.now(),
                metadata={
                    "strategy": state["current_strategy"],
                    "day_number": state["day_number"],
                    "has_question": state["processed_response"]["has_question"],
                    "processing_time_ms": int((datetime.now() - state["processing_start"]).total_seconds() * 1000)
                }
            )
            context = MemoryContext(
                user_id=user_id,
                day_number=state["day_number"]
            )
            memory.add_message(assistant_message, context)
        
        log_info(f"‚úÖ Persisted conversation for user {user_id}")
        return state
    
    def _split_response(self, text: str) -> Dict[str, Any]:
        """Split response into 1-3 logical parts using new message_splitter"""
        return message_splitter.split_message(text)
    
    def _calculate_delays(self, parts: List[str]) -> List[int]:
        """Calculate typing delays between parts - DEPRECATED, use message_splitter"""
        delays = [0]  # First part has no delay
        
        for i in range(1, len(parts)):
            # Simulate typing delay based on length
            chars = len(parts[i-1])
            typing_time = chars * 1000 // 50  # 50 chars per second
            delay = min(max(typing_time, 500), 3000)  # Between 0.5-3 seconds
            delays.append(delay)
        
        return delays 
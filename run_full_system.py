
import os
import sys
import subprocess
import time
import signal
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).parent.absolute()
sys.path.insert(0, str(PROJECT_ROOT))

class AgathaSystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Agatha"""
    
    def __init__(self):
        self.server_process = None
        self.bot_process = None
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.setup_environment()
    
    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.env —Ñ–∞–π–ª–∞
        config_env_path = PROJECT_ROOT / "config.env"
        if config_env_path.exists():
            logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º config.env —Ñ–∞–π–ª")
            with open(config_env_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ.setdefault(key.strip(), value.strip())
            logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.env –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è config.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if not os.getenv('OPENAI_API_KEY'):
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            openai_key = input("üîë –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if openai_key:
                os.environ['OPENAI_API_KEY'] = openai_key
        
        if not os.getenv('TELEGRAM_BOT_TOKEN'):
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            bot_token = input("ü§ñ –í–≤–µ–¥–∏—Ç–µ Telegram Bot Token (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if bot_token:
                os.environ['TELEGRAM_BOT_TOKEN'] = bot_token
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        os.environ.setdefault('HOST', '0.0.0.0')
        os.environ.setdefault('PORT', '8000')
        os.environ.setdefault('API_HOST', 'localhost')
        os.environ.setdefault('API_PORT', '8000')
        
        logger.info("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def start_api_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            venv_python = PROJECT_ROOT / "venv" / "bin" / "python"
            server_script = PROJECT_ROOT / "run_server.py"
            
            if venv_python.exists():
                python_cmd = str(venv_python)
            else:
                python_cmd = sys.executable
                logger.warning("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python")
            
            self.server_process = subprocess.Popen([
                python_cmd, str(server_script)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
            time.sleep(5)
            
            if self.server_process.poll() is None:
                logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                stdout, stderr = self.server_process.communicate()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:")
                logger.error(f"STDOUT: {stdout}")
                logger.error(f"STDERR: {stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram bot"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot...")
            
            venv_python = PROJECT_ROOT / "venv" / "bin" / "python"
            bot_script = PROJECT_ROOT / "telegram_bot.py"
            
            if venv_python.exists():
                python_cmd = str(venv_python)
            else:
                python_cmd = sys.executable
            
            self.bot_process = subprocess.Popen([
                python_cmd, str(bot_script)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Telegram bot...")
            time.sleep(3)
            
            if self.bot_process.poll() is None:
                logger.info("‚úÖ Telegram bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                stdout, stderr = self.bot_process.communicate()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram bot:")
                logger.error(f"STDOUT: {stdout}")
                logger.error(f"STDERR: {stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram bot: {e}")
            return False
    
    def test_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É...")
        
        try:
            import requests
            
            # –¢–µ—Å—Ç API health check
            api_url = f"http://localhost:{os.getenv('PORT', '5000')}"
            response = requests.get(f"{api_url}/healthz", timeout=5)
            
            if response.status_code == 200:
                logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç")
                
                # –¢–µ—Å—Ç endpoints –ø–∞–º—è—Ç–∏
                info_response = requests.get(f"{api_url}/api/info", timeout=5)
                if info_response.status_code == 200:
                    data = info_response.json()
                    memory_endpoints = data.get('endpoints', {}).get('memory', {})
                    if memory_endpoints:
                        logger.info("‚úÖ Memory endpoints –¥–æ—Å—Ç—É–ø–Ω—ã")
                        logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints: {list(memory_endpoints.keys())}")
                    else:
                        logger.warning("‚ö†Ô∏è Memory endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API info")
            else:
                logger.error("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def stop_system(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
        
        if self.bot_process:
            try:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=5)
                logger.info("‚úÖ Telegram bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.bot_process.kill()
                logger.info("üî™ Telegram bot –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ bot: {e}")
        
        if self.server_process:
            try:
                self.server_process.terminate()
                self.server_process.wait(timeout=5)
                logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.server_process.kill()
                logger.info("üî™ API —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        
        self.running = False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ AGATHA")
        print("=" * 50)
        print("ü§ñ AI Companion —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏")
        print("üì± Telegram Bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üß† LangChain + LangGraph + ChromaDB")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            if not self.start_api_server():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            self.test_system()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot
            if not self.start_telegram_bot():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram bot")
                self.stop_system()
                return False
            
            self.running = True
            
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 50)
            print(f"üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:{os.getenv('PORT', '5000')}")
            print(f"ü§ñ Telegram bot: @{os.getenv('TELEGRAM_BOT_TOKEN', '').split(':')[0]}")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:")
            print("   ‚Ä¢ GET  /healthz - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
            print("   ‚Ä¢ GET  /api/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
            print("   ‚Ä¢ POST /api/chat - —á–∞—Ç —Å Agatha")
            print("   ‚Ä¢ POST /api/memory/<user_id>/add - –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–º—è—Ç—å")
            print("   ‚Ä¢ POST /api/memory/<user_id>/search - –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏")
            print("   ‚Ä¢ GET  /api/memory/<user_id>/overview - –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏")
            print("   ‚Ä¢ POST /api/memory/<user_id>/clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
            print("=" * 50)
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏")
            print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            def signal_handler(signum, frame):
                logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.stop_system()
                sys.exit(0)
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            while self.running:
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                if self.server_process and self.server_process.poll() is not None:
                    logger.error("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                    break
                
                if self.bot_process and self.bot_process.poll() is not None:
                    logger.error("‚ùå Telegram bot –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                    break
            
            return True
            
        except KeyboardInterrupt:
            logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.stop_system()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop_system()
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = AgathaSystemManager()
    
    try:
        success = manager.run()
        if success:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

#!/bin/bash

# Agatha AI Companion - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —Å –Ω—É–ª—è: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${PURPLE}========================================${NC}"
    echo -e "${PURPLE}ü§ñ Agatha AI Companion - –ù–∞—Å—Ç—Ä–æ–π–∫–∞${NC}"
    echo -e "${PURPLE}========================================${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${PURPLE}[–®–ê–ì]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        print_success "macOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        print_success "Linux –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
        print_success "Windows –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
    else
        print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: $OSTYPE"
        OS="unknown"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
check_python() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
        print_success "Python $PYTHON_VERSION –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f2)
        
        if [ "$PYTHON_MAJOR" -lt 3 ] || ([ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -lt 8 ]); then
            print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $PYTHON_VERSION"
            exit 1
        fi
    else
        print_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
check_pip() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º pip..."
    
    if command -v pip3 &> /dev/null; then
        print_success "pip3 –Ω–∞–π–¥–µ–Ω"
    else
        print_error "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
check_git() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º Git..."
    
    if command -v git &> /dev/null; then
        print_success "Git –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
check_docker() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker..."
    
    if command -v docker &> /dev/null; then
        if docker ps &> /dev/null; then
            print_success "Docker –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
            DOCKER_AVAILABLE=true
        else
            print_warning "Docker –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop."
            DOCKER_AVAILABLE=false
        fi
    else
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        DOCKER_AVAILABLE=false
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_venv() {
    print_step "–°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    
    if [ -d "venv" ]; then
        print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
            rm -rf venv
        else
            print_status "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
            return 0
        fi
    fi
    
    print_status "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    python3 -m venv venv
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
activate_venv() {
    print_step "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        exit 1
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
upgrade_pip() {
    print_step "–û–±–Ω–æ–≤–ª—è–µ–º pip..."
    
    pip install --upgrade pip
    print_success "pip –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if [ ! -f "requirements.txt" ]; then
        print_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    print_status "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø–∞–∫–µ—Ç—ã..."
    pip install -r requirements.txt
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    print_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    if [ ! -f "config.env" ]; then
        print_error "–§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å API –∫–ª—é—á–∏
    if grep -q "your_openai_api_key_here" config.env; then
        print_warning "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ config.env"
        echo ""
        echo "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏:"
        echo ""
        echo "1. OpenAI API –∫–ª—é—á:"
        echo "   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys"
        echo "   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á"
        echo "   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á"
        echo ""
        echo "2. Telegram Bot Token:"
        echo "   - –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram"
        echo "   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot"
        echo "   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω"
        echo ""
        
        read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ —Å–µ–π—á–∞—Å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            setup_api_keys
        else
            print_warning "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –≤ config.env"
        fi
    else
        print_success "API –∫–ª—é—á–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π
setup_api_keys() {
    print_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –∫–ª—é—á–∏..."
    
    # OpenAI API Key
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á: " OPENAI_KEY
    if [ ! -z "$OPENAI_KEY" ]; then
        sed -i.bak "s/your_openai_api_key_here/$OPENAI_KEY/" config.env
        print_success "OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # Telegram Bot Token
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: " TELEGRAM_TOKEN
    if [ ! -z "$TELEGRAM_TOKEN" ]; then
        sed -i.bak "s/your_telegram_bot_token_here/$TELEGRAM_TOKEN/" config.env
        print_success "Telegram Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ backup —Ñ–∞–π–ª–æ–≤
    rm -f config.env.bak
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_step "–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    mkdir -p logs
    mkdir -p data
    mkdir -p temp
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã
setup_permissions() {
    print_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã..."
    
    chmod +x start_local.sh start_all.sh stop_all.sh setup.sh 2>/dev/null || true
    
    print_success "–ü—Ä–∞–≤–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
test_installation() {
    print_step "–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from app.config.settings import settings
    print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}')
    sys.exit(1)

try:
    from app.graph.pipeline import AgathaPipeline
    print('‚úÖ Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pipeline: {e}')
    sys.exit(1)
"
    
    if [ $? -eq 0 ]; then
        print_success "–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω"
    else
        print_error "–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
show_next_steps() {
    echo ""
    echo "=========================================="
    echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo "=========================================="
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo ""
    echo "1. üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã:"
    echo "   ./start_local.sh    # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (API + –±–æ—Ç)"
    echo "   ./start_all.sh      # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Å Docker)"
    echo ""
    echo "2. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    echo "   curl http://localhost:8000/healthz"
    echo "   curl http://localhost:8000/readyz"
    echo ""
    echo "3. üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   cat README.md"
    echo ""
    echo "4. üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
    echo "   ./stop_all.sh"
    echo ""
    
    if [ "$DOCKER_AVAILABLE" = true ]; then
        echo "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ./start_all.sh –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    else
        echo "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./start_local.sh –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
    fi
    
    echo ""
    echo "üîß –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f api.log"
    echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./stop_all.sh && ./start_local.sh"
    echo "   - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ README.md"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    check_os
    check_python
    check_pip
    check_git
    check_docker
    create_venv
    activate_venv
    upgrade_pip
    install_dependencies
    setup_config
    create_directories
    setup_permissions
    test_installation
    show_next_steps
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --force    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo ""
        echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç Agatha AI Companion —Å –Ω—É–ª—è:"
        echo "- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        echo "- –°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo "- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É"
        echo ""
        ;;
    --force)
        print_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        rm -rf venv
        main
        ;;
    *)
        main
        ;;
esac

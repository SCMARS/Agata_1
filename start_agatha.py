#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Agatha AI Companion
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä –∏ Telegram –±–æ—Ç–∞
"""

import os
import sys
import time
import subprocess
import signal
from pathlib import Path

def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    print("=" * 60)
    print("ü§ñ AGATHA AI COMPANION - –ê–í–¢–û–ó–ê–ü–£–°–ö")
    print("=" * 60)
    print("üìÅ –ü—Ä–æ–µ–∫—Ç:", os.getcwd())
    print("üêç Python:", sys.version.split()[0])
    print("=" * 60)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: source venv/bin/activate")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    required_files = ['run_server.py', 'telegram_bot.py', 'config.env']
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import flask
        import openai
        import telegram
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config_env = Path('config.env')
    if config_env.exists():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.env
        with open(config_env, 'r') as f:
            for line in f:
                if line.strip() and not line.startswith('#') and '=' in line:
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    
    return True

def start_api_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        api_process = subprocess.Popen(
            [sys.executable, 'run_server.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if api_process.poll() is None:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {})".format(api_process.pid))
            return api_process
        else:
            stdout, stderr = api_process.communicate()
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:")
            print("STDOUT:", stdout)
            print("STDERR:", stderr)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        bot_process = subprocess.Popen(
            [sys.executable, 'telegram_bot.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if bot_process.poll() is None:
            print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {})".format(bot_process.pid))
            return bot_process
        else:
            stdout, stderr = bot_process.communicate()
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:")
            print("STDOUT:", stdout)
            print("STDERR:", stderr)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        return None

def test_api_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        import requests
        response = requests.get('http://localhost:8000/healthz', timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def cleanup_processes(processes):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    for name, process in processes.items():
        if process and process.poll() is None:
            print(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {name} (PID: {process.pid})")
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {name}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return 1
    
    processes = {}
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        api_process = start_api_server()
        if not api_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä")
            return 1
        processes['API Server'] = api_process
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–µ—Ä–≤–µ—Ä
        if not test_api_server():
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            cleanup_processes(processes)
            return 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        bot_process = start_telegram_bot()
        if not bot_process:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ (API —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)")
        else:
            processes['Telegram Bot'] = bot_process
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        print("\n" + "=" * 60)
        print("üéâ AGATHA AI COMPANION –ó–ê–ü–£–©–ï–ù–ê!")
        print("=" * 60)
        print("üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8000/healthz")
        print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/info")
        if 'Telegram Bot' in processes:
            print("ü§ñ Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("=" * 60)
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            cleanup_processes(processes)
            print("\nüëã Agatha AI Companion –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        while True:
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–µ—Ä–≤–µ—Ä
            if processes.get('API Server') and processes['API Server'].poll() is not None:
                print("‚ùå API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞
            if processes.get('Telegram Bot') and processes['Telegram Bot'].poll() is not None:
                print("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                bot_process = start_telegram_bot()
                if bot_process:
                    processes['Telegram Bot'] = bot_process
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
                    del processes['Telegram Bot']
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        cleanup_processes(processes)
        print("üëã Agatha AI Companion –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
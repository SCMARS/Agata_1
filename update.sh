#!/bin/bash

# Agatha AI Companion - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç: –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –º–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${PURPLE}========================================${NC}"
    echo -e "${PURPLE}üîÑ Agatha {NC}"
    echo -e "${PURPLE}========================================${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${PURPLE}[–®–ê–ì]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
check_git() {
    print_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º Git..."
    
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        exit 1
    fi
    
    if [ ! -d ".git" ]; then
        print_warning "–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞."
        return 1
    fi
    
    print_success "Git –Ω–∞–π–¥–µ–Ω"
    return 0
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ Git
update_code() {
    print_step "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ Git..."
    
    if ! check_git; then
        return 0
    fi
    
    print_status "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git stash push -m "Auto-stash before update $(date)" || true
    
    print_status "–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git fetch origin
    
    print_status "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –≤–µ—Ç–∫—É..."
    git checkout main
    
    print_status "–û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git pull origin main
    
    print_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop_system() {
    print_step "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É..."
    
    if [ -f "stop_all.sh" ]; then
        ./stop_all.sh
        print_success "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_warning "–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_config() {
    print_step "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    cp config.env "$BACKUP_DIR/" 2>/dev/null || true
    cp -r logs "$BACKUP_DIR/" 2>/dev/null || true
    cp -r data "$BACKUP_DIR/" 2>/dev/null || true
    
    print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_DIR"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
update_venv() {
    print_step "–û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    
    if [ ! -d "venv" ]; then
        print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.sh"
        return 1
    fi
    
    source venv/bin/activate
    
    print_status "–û–±–Ω–æ–≤–ª—è–µ–º pip..."
    pip install --upgrade pip
    
    print_status "–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    pip install -r requirements.txt --upgrade
    
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
}

# –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
migrate_config() {
    print_step "–ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    if [ ! -f "config.env" ]; then
        print_warning "–§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp config.env config.env.backup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if ! grep -q "OPENAI_API_KEY" config.env; then
        print_status "–î–æ–±–∞–≤–ª—è–µ–º OPENAI_API_KEY..."
        echo "OPENAI_API_KEY=your_openai_api_key_here" >> config.env
    fi
    
    if ! grep -q "TELEGRAM_BOT_TOKEN" config.env; then
        print_status "–î–æ–±–∞–≤–ª—è–µ–º TELEGRAM_BOT_TOKEN..."
        echo "TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here" >> config.env
    fi
    
    if ! grep -q "PORT=8000" config.env; then
        print_status "–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç –Ω–∞ 8000..."
        sed -i.bak 's/PORT=5000/PORT=8000/g' config.env
    fi
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
update_docker() {
    print_step "–û–±–Ω–æ–≤–ª—è–µ–º Docker –æ–±—Ä–∞–∑—ã..."
    
    if ! command -v docker &> /dev/null; then
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker."
        return 0
    fi
    
    if [ ! -f "docker-compose.yml" ]; then
        print_warning "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker."
        return 0
    fi
    
    print_status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose down 2>/dev/null || true
    
    print_status "–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã..."
    docker-compose pull
    
    print_success "Docker –æ–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    print_step "–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    find . -name "*.log" -mtime +7 -delete 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º Python –∫—ç—à
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -f api.pid bot.pid 2>/dev/null || true
    
    print_success "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
test_update() {
    print_step "–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from app.config.settings import settings
    print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}')
    sys.exit(1)
"
    
    if [ $? -eq 0 ]; then
        print_success "–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω"
    else
        print_error "–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
show_update_status() {
    echo ""
    echo "=========================================="
    echo "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo "=========================================="
    echo ""
    echo "üìã –ß—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:"
    echo "  ‚úÖ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"
    echo "  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo "  ‚úÖ Docker –æ–±—Ä–∞–∑—ã"
    echo "  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo ""
    echo "1. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã:"
    echo "   ./start_local.sh    # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
    echo "   ./start_all.sh      # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å Docker"
    echo ""
    echo "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã:"
    echo "   curl http://localhost:8000/healthz"
    echo ""
    echo "3. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
    echo "   ./setup.sh --force  # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    stop_system
    backup_config
    update_code
    update_venv
    migrate_config
    update_docker
    cleanup
    test_update
    show_update_status
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --code     –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–¥ (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)"
        echo "  --deps     –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo "  --config   –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo ""
        echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç Agatha AI Companion:"
        echo "- –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–¥ –∏–∑ Git"
        echo "- –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo "- –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "- –û–±–Ω–æ–≤–ª—è–µ—Ç Docker –æ–±—Ä–∞–∑—ã"
        echo "- –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
        echo ""
        ;;
    --code)
        print_header
        stop_system
        backup_config
        update_code
        test_update
        show_update_status
        ;;
    --deps)
        print_header
        stop_system
        update_venv
        test_update
        show_update_status
        ;;
    --config)
        print_header
        backup_config
        migrate_config
        show_update_status
        ;;
    *)
        main
        ;;
esac

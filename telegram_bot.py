#!/usr/bin/env python3

import os
import sys
import logging
import asyncio
import requests
from datetime import datetime
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, PROJECT_ROOT)

# Telegram Bot API
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, MessageHandler, 
        CallbackQueryHandler, filters, ContextTypes
    )
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8181686852:AAH93K4NhfI2oUhhrvLd9MK8Eln1_XsyFi4")
API_HOST = os.getenv("API_HOST", "localhost")
API_PORT = os.getenv("API_PORT", "8000")
API_BASE_URL = f"http://{API_HOST}:{API_PORT}"
BOT_NAME = os.getenv("BOT_NAME", "Agatha Memory Bot")

class AgathaMemoryBot:
    """
    Telegram Bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Agatha
    """
    
    def __init__(self):
        self.api_base_url = API_BASE_URL
        self.user_sessions = {}  # user_id -> session_data
        
        if not TELEGRAM_AVAILABLE:
            raise ImportError("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º bot application
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        self._setup_handlers()
        
        logger.info(f"ü§ñ {BOT_NAME} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("memory", self._memory_command))
        self.application.add_handler(CommandHandler("search", self._search_command))
        self.application.add_handler(CommandHandler("overview", self._overview_command))
        self.application.add_handler(CommandHandler("clear", self._clear_command))
        self.application.add_handler(CommandHandler("test", self._test_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # Callback queries –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
        
        logger.info("‚úÖ Handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = str(user.id)
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!**

–Ø - –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Agatha —Å LangChain –∏ LangGraph.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º  
‚Ä¢ `/memory` - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ `/overview` - –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏
‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
‚Ä¢ `/test` - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

–í–∞—à ID: `{user_id}`
        """.strip()
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–º—è—Ç—å", callback_data="add_memory"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_memory")
            ],
            [
                InlineKeyboardButton("üìä –û–±–∑–æ—Ä", callback_data="memory_overview"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_memory")
            ],
            [
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test_memory")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'created_at': datetime.now(),
            'messages_count': 0,
            'last_activity': datetime.now()
        }
        
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é:**
‚Ä¢ `/memory <—Ç–µ–∫—Å—Ç>` - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/overview` - –ü–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏
‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/test` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/memory –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä`
‚Ä¢ `/search Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`
‚Ä¢ `/overview`

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞–º—è—Ç—å:**
1. **Short-term**: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±—É—Ñ–µ—Ä)
2. **Long-term**: –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î —Å embeddings
3. **Episodic**: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
4. **Summary**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—é–º–µ

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ LangChain + ChromaDB
‚Ä¢ OpenAI Embeddings
‚Ä¢ 4-—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–∞–º—è—Ç–∏
        """.strip()
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def _memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /memory"""
        user_id = str(update.effective_user.id)
        
        if not context.args:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/memory <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/memory –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –∏ —è Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`"
            )
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        content = " ".join(context.args)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ API
        try:
            memory_data = {
                'role': 'user',
                'content': content,
                'metadata': {
                    'source': 'telegram',
                    'user_id': user_id,
                    'timestamp': datetime.now().isoformat()
                },
                'conversation_id': f'tg_{user_id}_{int(datetime.now().timestamp())}',
                'day_number': 1
            }
            
            response = requests.post(
                f"{self.api_base_url}/api/memory/{user_id}/add",
                json=memory_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                memory_result = result.get('result', {})
                
                status_text = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!**

üìù **–¢–µ–∫—Å—Ç:** {content[:100]}{'...' if len(content) > 100 else ''}

üíæ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ Short-term: {'‚úÖ' if memory_result.get('short_term') else '‚ùå'}
‚Ä¢ Long-term: {'‚úÖ' if memory_result.get('long_term') else '‚ùå'}

üÜî **User ID:** `{user_id}`
                """.strip()
                
                await update.message.reply_text(status_text, parse_mode='Markdown')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                if user_id in self.user_sessions:
                    self.user_sessions[user_id]['messages_count'] += 1
                    self.user_sessions[user_id]['last_activity'] = datetime.now()
                
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å:**\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text}"
                )
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.api_base_url}"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
    
    async def _search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        user_id = str(update.effective_user.id)
        
        if not context.args:
            await update.message.reply_text(
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/search Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`"
            )
            return
        
        query = " ".join(context.args)
        
        try:
            search_data = {
                'query': query,
                'max_results': 5,
                'levels': ['short_term', 'long_term']
            }
            
            response = requests.post(
                f"{self.api_base_url}/api/memory/{user_id}/search",
                json=search_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                results = result.get('results', [])
                total_found = result.get('total_found', 0)
                
                if total_found > 0:
                    search_text = f"""
üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** `{query}`

üìä **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {total_found}

                    """.strip()
                    
                    for i, item in enumerate(results[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        content = item.get('content', '')[:80]
                        level = item.get('source_level', 'unknown')
                        score = item.get('relevance_score', 0)
                        
                        search_text += f"""
**{i+1}. {content}...**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}
‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}
                        """.strip()
                    
                    if total_found > 3:
                        search_text += f"\n\n... –∏ –µ—â–µ {total_found - 3} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    
                    await update.message.reply_text(search_text, parse_mode='Markdown')
                    
                else:
                    await update.message.reply_text(
                        f"üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** `{query}`\n\n"
                        f"‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç—å."
                    )
                    
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:**\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text}"
                )
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:** {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.api_base_url}"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    async def _overview_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /overview"""
        user_id = str(update.effective_user.id)
        
        try:
            response = requests.get(
                f"{self.api_base_url}/api/memory/{user_id}/overview",
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                overview = result.get('overview', {})
                
                overview_text = f"""
üìä **–û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üÜî **User ID:** `{user_id}`

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ Short-term: {overview.get('short_term_stats', {}).get('messages_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ Long-term: {overview.get('long_term_stats', {}).get('documents_count', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞: {overview.get('processing_stats', {}).get('total_operations', 0)} –æ–ø–µ—Ä–∞—Ü–∏–π

‚è∞ **–°–µ—Å—Å–∏—è –±–æ—Ç–∞:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {self.user_sessions.get(user_id, {}).get('messages_count', 0)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self.user_sessions.get(user_id, {}).get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
                """.strip()
                
                await update.message.reply_text(overview_text, parse_mode='Markdown')
                
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞:**\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text}"
                )
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.api_base_url}"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {e}")
    
    async def _clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user_id = str(update.effective_user.id)
        
        try:
            response = requests.post(
                f"{self.api_base_url}/api/memory/{user_id}/clear",
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                
                clear_text = f"""
üßπ **–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!**

‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result.get('message', '–£—Å–ø–µ—à–Ω–æ')}
üÜî **User ID:** `{user_id}`

üí° **–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:**
‚Ä¢ Short-term –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞
‚Ä¢ Long-term –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã

üìù **–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!**
                """.strip()
                
                await update.message.reply_text(clear_text, parse_mode='Markdown')
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                if user_id in self.user_sessions:
                    self.user_sessions[user_id]['messages_count'] = 0
                    self.user_sessions[user_id]['last_activity'] = datetime.now()
                
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏:**\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text}"
                )
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.api_base_url}"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    async def _test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        user_id = str(update.effective_user.id)
        
        test_text = f"""
üß™ **–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Agatha**

üÜî **User ID:** `{user_id}`

üìù **–≠—Ç–∞–ø 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**
–î–æ–±–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å...
        """.strip()
        
        message = await update.message.reply_text(test_text, parse_mode='Markdown')
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = [
                {
                    'role': 'user',
                    'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤ –∏ —è senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 15 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏',
                    'metadata': {'test': True, 'importance': 'high'}
                },
                {
                    'role': 'assistant', 
                    'content': '–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä! –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞–∫–∏–º –æ–ø—ã—Ç–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!',
                    'metadata': {'test': True, 'importance': 'normal'}
                },
                {
                    'role': 'user',
                    'content': '–†–∞–±–æ—Ç–∞—é –≤ –∫—Ä—É–ø–Ω–æ–π IT –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ deep learning –∏ computer vision',
                    'metadata': {'test': True, 'importance': 'high'}
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            added_count = 0
            for msg_data in test_messages:
                memory_data = {
                    **msg_data,
                    'conversation_id': f'test_{user_id}_{int(datetime.now().timestamp())}',
                    'day_number': 1
                }
                
                response = requests.post(
                    f"{self.api_base_url}/api/memory/{user_id}/add",
                    json=memory_data,
                    timeout=10
                )
                
                if response.status_code == 200:
                    added_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_text += f"""
‚úÖ **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {added_count}/{len(test_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π

üîç **–≠—Ç–∞–ø 2: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞**
–ò—â—É –ø–æ –∑–∞–ø—Ä–æ—Å—É "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"...
            """.strip()
            
            await message.edit_text(test_text, parse_mode='Markdown')
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            search_data = {
                'query': 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
                'max_results': 3,
                'levels': ['short_term', 'long_term']
            }
            
            response = requests.post(
                f"{self.api_base_url}/api/memory/{user_id}/search",
                json=search_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                found_count = result.get('total_found', 0)
                
                test_text += f"""
‚úÖ **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {found_count}

üìä **–≠—Ç–∞–ø 3: –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏**
–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...
                """.strip()
                
                await message.edit_text(test_text, parse_mode='Markdown')
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä
                response = requests.get(
                    f"{self.api_base_url}/api/memory/{user_id}/overview",
                    timeout=10
                )
                
                if response.status_code == 200:
                    result = response.json()
                    overview = result.get('overview', {})
                    
                    test_text += f"""
‚úÖ **–û–±–∑–æ—Ä –ø–æ–ª—É—á–µ–Ω!**

üéâ **–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!**

üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if found_count > 0 else '‚ùå'}
‚Ä¢ –û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ‚úÖ

üöÄ **–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ Agatha —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!**
                    """.strip()
                    
                else:
                    test_text += f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞:** {response.status_code}

‚ö†Ô∏è **–ß–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**
                    """.strip()
                    
            else:
                test_text += f"""
‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:** {response.status_code}

‚ö†Ô∏è **–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é**
                """.strip()
            
            await message.edit_text(test_text, parse_mode='Markdown')
            
        except Exception as e:
            test_text += f"""
‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {str(e)}

‚ö†Ô∏è **–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω**
            """.strip()
            
            await message.edit_text(test_text, parse_mode='Markdown')
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø–∞–º—è—Ç—å"""
        user_id = str(update.effective_user.id)
        content = update.message.text
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if content.startswith('/'):
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        try:
            memory_data = {
                'role': 'user',
                'content': content,
                'metadata': {
                    'source': 'telegram',
                    'user_id': user_id,
                    'timestamp': datetime.now().isoformat(),
                    'auto_added': True
                },
                'conversation_id': f'tg_{user_id}_{int(datetime.now().timestamp())}',
                'day_number': 1
            }
            
            response = requests.post(
                f"{self.api_base_url}/api/memory/{user_id}/add",
                json=memory_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                memory_result = result.get('result', {})
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirm_text = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!**

üíæ **–°—Ç–∞—Ç—É—Å:**
‚Ä¢ Short-term: {'‚úÖ' if memory_result.get('short_term') else '‚ùå'}
‚Ä¢ Long-term: {'‚úÖ' if memory_result.get('long_term') else '‚ùå'}

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é:**
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫
‚Ä¢ `/overview` - –æ–±–∑–æ—Ä
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞
                """.strip()
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ /api/chat
                try:
                    chat_data = {
                        'user_id': user_id,
                        'messages': [{'role': 'user', 'content': content}],
                        'metaTime': "2025-09-02T14:07:00Z"
                    }
                    
                    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ chat API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    chat_response = requests.post(
                        f"{self.api_base_url}/api/chat",
                        json=chat_data,
                        timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    )
                    
                    logger.info(f"üì° Chat API –æ—Ç–≤–µ—Ç–∏–ª: {chat_response.status_code}")
                    
                    if chat_response.status_code == 200:
                        chat_result = chat_response.json()
                        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç parts (–º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞)
                        parts = chat_result.get('parts', [])
                        logger.info(f"üß† –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {len(parts) if parts else 0}")
                        
                        if parts:
                            ai_response = ' '.join(parts)
                            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI: {ai_response[:50]}...")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                            await update.message.reply_text(ai_response)
                            return  # –í–∞–∂–Ω–æ! –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ—Ç —á–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API")
                            # –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                            await update.message.reply_text(confirm_text, parse_mode='Markdown')
                        
                    else:
                        logger.warning(f"‚ùå Chat API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {chat_response.status_code} - {chat_response.text}")
                        # –ï—Å–ª–∏ LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        await update.message.reply_text(confirm_text, parse_mode='Markdown')
                        
                except requests.exceptions.RequestException as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ chat API: {e}")
                    # –ï—Å–ª–∏ LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  
                    await update.message.reply_text(confirm_text, parse_mode='Markdown')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                if user_id in self.user_sessions:
                    self.user_sessions[user_id]['messages_count'] += 1
                    self.user_sessions[user_id]['last_activity'] = datetime.now()
                
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å:** {response.status_code}"
                )
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.api_base_url}"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        
        if query.data == "add_memory":
            await query.edit_message_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å:**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/memory <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`"
            )
            
        elif query.data == "search_memory":
            await query.edit_message_text(
                "üîç **–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏:**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/search Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`\n"
                "‚Ä¢ `/search –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ`\n"
                "‚Ä¢ `/search –ê–ª–µ–∫—Å–∞–Ω–¥—Ä`"
            )
            
        elif query.data == "memory_overview":
            await query.edit_message_text(
                "üìä **–û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏:**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/overview`\n\n"
                "–ü–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–π –ø–∞–º—è—Ç–∏:\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ long-term\n"
                "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"
            )
            
        elif query.data == "clear_memory":
            await query.edit_message_text(
                "üßπ **–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏:**\n\n"
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/clear`\n\n"
                "–£–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏."
            )
            
        elif query.data == "test_memory":
            await query.edit_message_text(
                "üß™ **–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏:**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/test`\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏\n"
                "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {BOT_NAME}...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = requests.get(f"{self.api_base_url}/healthz", timeout=5)
            if response.status_code == 200:
                logger.info(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {self.api_base_url}")
            else:
                logger.warning(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            logger.warning("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"ü§ñ –ó–∞–ø—É—Å–∫ {BOT_NAME}")
    print(f"üîë Token: {TELEGRAM_TOKEN[:20]}...")
    print(f"üåê API: {API_BASE_URL}")
    print("=" * 50)
    
    try:
        bot = AgathaMemoryBot()
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

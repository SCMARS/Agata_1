#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ê–≥–∞—Ç–∏
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ –¢–ó
"""

import requests
import json
import time
from datetime import datetime

API_BASE = "http://localhost:8000"

def make_request(user_id, messages):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ API"""
    try:
        response = requests.post(
            f"{API_BASE}/api/chat",
            json={"user_id": user_id, "messages": messages},
            timeout=30
        )
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None

def test_split_messages():
    """–¢–µ—Å—Ç 1: –†–æ–∑–±–∏—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\nüß™ –¢–ï–°–¢ 1: –†–æ–∑–±–∏—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1.1: –†–æ–∑–±–∏—Ç–µ —Ä–µ—á–µ–Ω–Ω—è
    print("\nüìù –¢–µ—Å—Ç 1.1: –†–æ–∑–±–∏—Ç–µ —Ä–µ—á–µ–Ω–Ω—è")
    messages = [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫"},
        {"role": "user", "content": "–¥–µ–ª–∞ —É —Ç–µ–±—è?"}
    ]
    result = make_request("test_split_sentence", messages)
    if result:
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
        print(f"üìä –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {result['delays_ms']}")
    
    # –¢–µ—Å—Ç 1.2: –ö—ñ–ª—å–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
    print("\nüìù –¢–µ—Å—Ç 1.2: –ö—ñ–ª—å–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å")
    messages = [
        {"role": "user", "content": "–ö–∞–∫ –¥–µ–ª–∞?"},
        {"role": "user", "content": "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?"},
        {"role": "user", "content": "–û—Ç–∫—É–¥–∞ —Ç—ã?"}
    ]
    result = make_request("test_multiple_questions", messages)
    if result:
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ –í–°–Ü –ø–∏—Ç–∞–Ω–Ω—è?")
        full_response = " ".join(result['parts'])
        checks = [
            ("–¥–µ–ª–∞" in full_response.lower(), "–í—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ '–∫–∞–∫ –¥–µ–ª–∞?'"),
            ("–¥–µ–ª–∞—é" in full_response.lower() or "—Ä–∞–±–æ—Ç–∞" in full_response.lower(), "–í—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ '—á—Ç–æ –¥–µ–ª–∞–µ—à—å?'"),
            ("–º–æ—Å–∫–≤" in full_response.lower() or "–≤–∞—Ä—à–∞–≤" in full_response.lower(), "–í—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ '–æ—Ç–∫—É–¥–∞ —Ç—ã?'")
        ]
        for check, desc in checks:
            print(f"   {'‚úÖ' if check else '‚ùå'} {desc}")
    
    # –¢–µ—Å—Ç 1.3: –†—ñ–∑–Ω—ñ —Ç–µ–º–∏
    print("\nüìù –¢–µ—Å—Ç 1.3: –†—ñ–∑–Ω—ñ —Ç–µ–º–∏")
    messages = [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"},
        {"role": "user", "content": "–ê –µ—â–µ —Ö–æ—á—É —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Ä–∞–±–æ—Ç—É"},
        {"role": "user", "content": "–ò –ø—Ä–æ —Ö–æ–±–±–∏ —Ç–æ–∂–µ"}
    ]
    result = make_request("test_different_topics", messages)
    if result:
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")

def test_no_repetition():
    """–¢–µ—Å—Ç 2: –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\nüß™ –¢–ï–°–¢ 2: –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å")
    print("=" * 60)
    
    test_cases = [
        {"input": "–ß—Ç–æ?", "should_not_contain": ["—á—Ç–æ?", "—á—Ç–æ"]},
        {"input": "–ü–æ—á–µ–º—É —Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?", "should_not_contain": ["–ø–æ—á–µ–º—É", "–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å"]},
        {"input": "–¢—ã —á—Ç–æ, –Ω–µ —Å–ª—ã—à–∏—à—å –º–µ–Ω—è?", "should_not_contain": ["–Ω–µ —Å–ª—ã—à–∏—à—å", "—á—Ç–æ,"]},
        {"input": "–ö–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç?", "should_not_contain": ["–∫–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç"]},
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç 2.{i}: '{case['input']}'")
        messages = [{"role": "user", "content": case["input"]}]
        result = make_request(f"test_no_repeat_{i}", messages)
        
        if result:
            full_response = " ".join(result['parts']).lower()
            print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
            
            repeated = False
            for phrase in case["should_not_contain"]:
                if phrase.lower() in full_response:
                    print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–∏–ª–∞ —Ñ—Ä–∞–∑—É: '{phrase}'")
                    repeated = True
            
            if not repeated:
                print("‚úÖ –ù–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

def test_response_structure():
    """–¢–µ—Å—Ç 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞ —Å—Ç–µ–π–¥–∂–∞–º–∏"""
    print("\nüß™ –¢–ï–°–¢ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞ —Å—Ç–µ–π–¥–∂–∞–º–∏")
    print("=" * 60)
    
    print("\nüìù –¢–µ—Å—Ç 3.1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–π–¥–∂—É 1 (—Ä–µ–∞–∫—Ü—ñ—è ‚Üí –¥–µ—Ç–∞–ª—å ‚Üí –ø–∏—Ç–∞–Ω–Ω—è)")
    messages = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–ª–µ–≥"}]
    result = make_request("test_stage1_structure", messages)
    
    if result:
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω: {len(result['parts'])}")
        print(f"üéØ –°—Ç–µ–π–¥–∂: {result.get('stage_number', 'N/A')}")
        print(f"üìã –ü–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: {result.get('current_strategy', 'N/A')}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if len(result['parts']) >= 2:
            print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Ä–æ–∑–±–∏—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏")
        else:
            print("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —Ä–æ–∑–±–∏—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏")

def test_stage_progression():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≥—Ä–µ—Å—ñ—è –ø–æ —Å—Ç–µ–π–¥–∂–∞—Ö —Ç–∞ —Ç–µ–º–∞—Ö"""
    print("\nüß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≥—Ä–µ—Å—ñ—è –ø–æ —Å—Ç–µ–π–¥–∂–∞—Ö —Ç–∞ —Ç–µ–º–∞—Ö")
    print("=" * 60)
    
    user_id = "test_stage_progression"
    
    # –Ü–º—ñ—Ç—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø–æ —Ç–µ–º–∞—Ö —Å—Ç–µ–π–¥–∂—É 1
    conversations = [
        {"input": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "expected_theme": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ"},
        {"input": "–Ø –∏–∑ –ö–∏–µ–≤–∞", "expected_theme": "–ñ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"}, 
        {"input": "–†–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º", "expected_theme": "–†–∞–±–æ—Ç–∞"},
        {"input": "–õ—é–±–ª—é –∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª", "expected_theme": "–•–æ–±–±–∏"},
    ]
    
    for i, conv in enumerate(conversations, 1):
        print(f"\nüìù –ö—Ä–æ–∫ {i}: {conv['input']}")
        messages = [{"role": "user", "content": conv["input"]}]
        result = make_request(user_id, messages)
        
        if result:
            print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
            print(f"üéØ –°—Ç–µ–π–¥–∂: {result.get('stage_number', 'N/A')}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å —Å—Ç–µ–π–¥–∂–∞
            if 'stage_progress' in result.get('behavioral_analysis', {}):
                stage_progress = result['behavioral_analysis']['stage_progress']
                print(f"üìã –ü—Ä–æ–≥—Ä–µ—Å —Å—Ç–µ–π–¥–∂–∞: {stage_progress}")
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏

def test_emoji_and_format():
    """–¢–µ—Å—Ç 5: –ï–º–æ–¥–∑—ñ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    print("\nüß™ –¢–ï–°–¢ 5: –ï–º–æ–¥–∑—ñ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    print("=" * 60)
    
    print("\nüìù –¢–µ—Å—Ç 5.1: –ù–∞—è–≤–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ")
    messages = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"}]
    result = make_request("test_emoji", messages)
    
    if result:
        full_response = " ".join(result['parts'])
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
        emoji_found = any(ord(char) > 127 for char in full_response)
        if emoji_found:
            print("‚úÖ –ï–º–æ–¥–∑—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        else:
            print("‚ùå –ï–º–æ–¥–∑—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —á–∞—Å—Ç–∏–Ω
        for i, part in enumerate(result['parts'], 1):
            length = len(part)
            print(f"üìè –ß–∞—Å—Ç–∏–Ω–∞ {i}: {length} —Å–∏–º–≤–æ–ª—ñ–≤")
            if length <= 80:
                print(f"   ‚úÖ –î–æ–≤–∂–∏–Ω–∞ –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏")
            else:
                print(f"   ‚ùå –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ —á–∞—Å—Ç–∏–Ω–∞")

def test_memory_usage():
    """–¢–µ—Å—Ç 6: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ"""
    print("\nüß™ –¢–ï–°–¢ 6: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ")
    print("=" * 60)
    
    user_id = "test_memory"
    
    # –ö—Ä–æ–∫ 1: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î–º–æ—Å—è
    print("\nüìù –ö—Ä–æ–∫ 1: –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ")
    messages = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, —è –∏–∑ –û–¥–µ—Å—Å—ã"}]
    result1 = make_request(user_id, messages)
    if result1:
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å 1: {result1['parts']}")
    
    time.sleep(2)
    
    # –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞
    print("\nüìù –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ")
    messages = [{"role": "user", "content": "–ê —Ç—ã –ø–æ–º–Ω–∏—à—å, –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"}]
    result2 = make_request(user_id, messages)
    if result2:
        response = " ".join(result2['parts']).lower()
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å 2: {result2['parts']}")
        
        if "–¥–º–∏—Ç—Ä" in response or "dmitr" in response:
            print("‚úÖ –ó–∞–ø–∞–º'—è—Ç–∞–ª–∞ —ñ–º'—è")
        else:
            print("‚ùå –ù–µ –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ —ñ–º'—è")
        
        if "–æ–¥–µ—Å—Å" in response:
            print("‚úÖ –ó–∞–ø–∞–º'—è—Ç–∞–ª–∞ –º—ñ—Å—Ç–æ")
        else:
            print("‚ùå –ù–µ –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ –º—ñ—Å—Ç–æ")

def test_time_orientation():
    """–¢–µ—Å—Ç 7: –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –≤ —á–∞—Å—ñ"""
    print("\nüß™ –¢–ï–°–¢ 7: –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –≤ —á–∞—Å—ñ")
    print("=" * 60)
    
    current_hour = datetime.now().hour
    expected_greeting = ""
    if 6 <= current_hour < 12:
        expected_greeting = "—É—Ç—Ä"
    elif 12 <= current_hour < 18:
        expected_greeting = "–¥–µ–Ω—å"
    elif 18 <= current_hour < 22:
        expected_greeting = "–≤–µ—á–µ—Ä"
    else:
        expected_greeting = "–Ω–æ—á"
    
    print(f"üïê –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_hour}:xx")
    print(f"üéØ –û—á—ñ–∫—É–≤–∞–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è: {expected_greeting}")
    
    messages = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}]
    result = make_request("test_time", messages)
    
    if result:
        response = " ".join(result['parts']).lower()
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['parts']}")
        
        if expected_greeting in response:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –¥–æ–±–∏")
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –¥–æ–±–∏")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ê–ì–ê–¢–ò")
    print("=" * 80)
    print(f"‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%H:%M:%S')}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
    try:
        response = requests.get(f"{API_BASE}/healthz", timeout=5)
        if response.status_code != 200:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!")
            return
    except:
        print("‚ùå –ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ API!")
        return
    
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç–∏...\n")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏
    test_split_messages()
    test_no_repetition() 
    test_response_structure()
    test_stage_progression()
    test_emoji_and_format()
    test_memory_usage()
    test_time_orientation()
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    run_all_tests()

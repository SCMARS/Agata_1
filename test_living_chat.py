#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è Agatha AI
"""
import requests
import json
import time
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
TEST_USER_ID = "test_living_chat"

def log_test(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    log_test("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...")
    try:
        response = requests.get(f"{API_BASE_URL}/healthz", timeout=5)
        if response.status_code == 200:
            log_test("‚úÖ API –∑–¥–æ—Ä–æ–≤", "SUCCESS")
            return True
        else:
            log_test(f"‚ùå API –Ω–µ–∑–¥–æ—Ä–æ–≤: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log_test(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", "ERROR")
        return False

def test_api_ready():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API"""
    log_test("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API...")
    try:
        response = requests.get(f"{API_BASE_URL}/readyz", timeout=5)
        if response.status_code == 200:
            log_test("‚úÖ API –≥–æ—Ç–æ–≤", "SUCCESS")
            return True
        else:
            log_test(f"‚ùå API –Ω–µ –≥–æ—Ç–æ–≤: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log_test(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}", "ERROR")
        return False

def send_message(messages, description=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    log_test(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {description}")
    log_test(f"   –°–æ–æ–±—â–µ–Ω–∏—è: {[msg['content'] for msg in messages]}")
    
    try:
        payload = {
            "user_id": TEST_USER_ID,
            "messages": messages
        }
        
        start_time = time.time()
        response = requests.post(
            f"{API_BASE_URL}/api/chat",
            headers={"Content-Type": "application/json"},
            json=payload,
            timeout=30
        )
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            log_test(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ {end_time - start_time:.2f}—Å", "SUCCESS")
            log_test(f"   –ß–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è: {len(data.get('parts', []))}")
            log_test(f"   –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å: {data.get('has_question', False)}")
            log_test(f"   –ó–∞–¥–µ—Ä–∂–∫–∏: {data.get('delays_ms', [])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, part in enumerate(data.get('parts', []), 1):
                log_test(f"   –ß–∞—Å—Ç—å {i}: {part}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            behavioral = data.get('behavioral_analysis', {})
            if behavioral:
                log_test(f"   –≠–º–æ—Ü–∏—è: {behavioral.get('dominant_emotion', 'unknown')}")
                log_test(f"   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {behavioral.get('emotional_intensity', 0)}")
                log_test(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {behavioral.get('recommended_strategy', 'unknown')}")
            
            return data
        else:
            log_test(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}", "ERROR")
            log_test(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        log_test(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", "ERROR")
        return None

def test_basic_greeting():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    log_test("="*50)
    
    messages = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–±"}]
    result = send_message(messages, "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º")
    
    if result:
        parts = result.get('parts', [])
        stage = result.get('stage_number', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ)
        if len(parts) >= 1:
            log_test(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ {len(parts)} —á–∞—Å—Ç–µ–π", "SUCCESS")
            log_test(f"   üìä –°—Ç–µ–π–¥–∂: {stage}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —á–∞—Å—Ç–µ–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—á–µ)
            for i, part in enumerate(parts, 1):
                if len(part) <= 80:
                    log_test(f"   ‚úÖ –ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∞—è)", "SUCCESS")
                else:
                    log_test(f"   ‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤ (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è)", "WARNING")
        else:
            log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞", "ERROR")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "ERROR")

def test_short_messages():
    """–¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 2: –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    log_test("="*50)
    
    messages = [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"},
        {"role": "user", "content": "–∫–∞–∫ –¥–µ–ª–∞"},
        {"role": "user", "content": "—á—Ç–æ –¥–µ–ª–∞–µ—à—å"}
    ]
    result = send_message(messages, "–¢—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥")
    
    if result:
        parts = result.get('parts', [])
        if len(parts) >= 1:
            log_test("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã", "SUCCESS")
        else:
            log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã", "ERROR")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "ERROR")

def test_emotional_responses():
    """–¢–µ—Å—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 3: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    log_test("="*50)
    
    messages = [{"role": "user", "content": "–ö—Ä—É—Ç–æ! –í–∞—É! –û–≥–æ!"}]
    result = send_message(messages, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    if result:
        parts = result.get('parts', [])
        behavioral = result.get('behavioral_analysis', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏
        has_emoji = any('üòä' in part or 'üòÑ' in part or '!' in part for part in parts)
        if has_emoji:
            log_test("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω—ã —ç–º–æ–¥–∑–∏/—ç–º–æ—Ü–∏–∏", "SUCCESS")
        else:
            log_test("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        emotion = behavioral.get('dominant_emotion', 'unknown')
        if emotion != 'unknown':
            log_test(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —ç–º–æ—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ({emotion})", "SUCCESS")
        else:
            log_test("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: —ç–º–æ—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", "WARNING")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "ERROR")

def test_question_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    log_test("="*50)
    
    messages = [{"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"}]
    result = send_message(messages, "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
    
    if result:
        has_question = result.get('has_question', False)
        parts = result.get('parts', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        has_question_mark = any('?' in part for part in parts)
        
        if has_question or has_question_mark:
            log_test("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –≤–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "SUCCESS")
        else:
            log_test("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "WARNING")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "ERROR")

def test_message_splitting():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 5: –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    log_test("="*50)
    
    messages = [{"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ, —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ"}]
    result = send_message(messages, "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è")
    
    if result:
        parts = result.get('parts', [])
        delays = result.get('delays_ms', [])
        
        if len(parts) > 1:
            log_test(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π", "SUCCESS")
            log_test(f"   –ó–∞–¥–µ—Ä–∂–∫–∏: {delays}")
        else:
            log_test("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–±–∏—Ç–æ", "WARNING")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", "ERROR")

def test_stage_progression():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å—Ç–µ–π–¥–∂–µ–π"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 6: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å—Ç–µ–π–¥–∂–µ–π")
    log_test("="*50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–µ–π–¥–∂–∏
    test_cases = [
        (1, "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞", "–°—Ç–µ–π–¥–∂ 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ"),
        (2, "–ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?", "–°—Ç–µ–π–¥–∂ 2: –†–∞–∑–≤–∏—Ç–∏–µ"),
        (3, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–°—Ç–µ–π–¥–∂ 3: –£–≥–ª—É–±–ª–µ–Ω–∏–µ")
    ]
    
    for expected_stage, message, description in test_cases:
        log_test(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
        messages = [{"role": "user", "content": message}]
        result = send_message(messages, description)
        
        if result:
            actual_stage = result.get('stage_number', 1)
            parts = result.get('parts', [])
            
            log_test(f"   üìä –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–µ–π–¥–∂: {expected_stage}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {actual_stage}")
            log_test(f"   üìù –ß–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞: {len(parts)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —á–∞—Å—Ç–µ–π
            for i, part in enumerate(parts, 1):
                if len(part) <= 80:
                    log_test(f"   ‚úÖ –ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤", "SUCCESS")
                else:
                    log_test(f"   ‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª–∏–Ω–Ω–∞—è)", "WARNING")
        else:
            log_test(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {description}", "ERROR")

def test_conversation_flow():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –±–µ—Å–µ–¥—ã"""
    log_test("\n" + "="*50)
    log_test("üß™ –¢–ï–°–¢ 7: –ü–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã")
    log_test("="*50)
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_test("üìù –®–∞–≥ 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    messages1 = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞"}]
    result1 = send_message(messages1, "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ")
    
    time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_test("üìù –®–∞–≥ 2: –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    messages2 = [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞"},
        {"role": "user", "content": "–ö–∞–∫ –¥–µ–ª–∞?"}
    ]
    result2 = send_message(messages2, "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã")
    
    if result1 and result2:
        log_test("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç", "SUCCESS")
    else:
        log_test("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    log_test("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –ñ–ò–í–û–ì–û –û–ë–©–ï–ù–ò–Ø")
    log_test("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not test_api_health():
        log_test("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã", "ERROR")
        return False
    
    if not test_api_ready():
        log_test("‚ùå API –Ω–µ –≥–æ—Ç–æ–≤, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã", "ERROR")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_basic_greeting()
    test_short_messages()
    test_emotional_responses()
    test_question_generation()
    test_message_splitting()
    test_stage_progression()
    test_conversation_flow()
    
    log_test("\n" + "="*60)
    log_test("üèÅ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    log_test("="*60)

if __name__ == "__main__":
    run_all_tests()

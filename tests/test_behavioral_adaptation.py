import pytest

from app.utils.behavioral_adaptation import BehavioralAdaptationModule


def make_msg(role, content):
    return {"role": role, "content": content}


@pytest.mark.parametrize(
    "messages,expected_strategy",
    [
        (
            [
                make_msg("user", "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ –∏ —Ç—è–∂–µ–ª–æ"),
                make_msg("user", "–°–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å, —É—Å—Ç–∞–ª"),
            ],
            "caring",
        ),
        (
            [
                make_msg("user", "–û—Ç–ª–∏—á–Ω–æ! –£—Ä–∞! –¢–∞–∫ –∫—Ä—É—Ç–æ!!!"),
                make_msg("user", "–°–µ–≥–æ–¥–Ω—è —Å—É–ø–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä"),
            ],
            "playful",
        ),
        (
            [
                make_msg("user", "–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ü–æ—Å–æ–≤–µ—Ç—É–π, –∫–∞–∫ –±—ã—Ç—å"),
            ],
            "mysterious",  # –í —Å—Ç–µ–π–¥–∂–µ 1 —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ),
    ],
)
def test_strategy_selection_by_signals(messages, expected_strategy):
    module = BehavioralAdaptationModule()
    result = module.analyze_and_adapt(messages=messages, user_profile={}, conversation_context={})
    assert result["selected_strategy"] == expected_strategy
    assert result["behavioral_instructions"].startswith("üö®üö®üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø üö®üö®üö®")



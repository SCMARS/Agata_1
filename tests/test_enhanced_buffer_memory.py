"""
–¢–µ—Å—Ç—ã –¥–ª—è EnhancedBufferMemory
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, —ç–º–æ—Ü–∏–∏ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
"""
import pytest
import asyncio
from datetime import datetime, timedelta
from unittest.mock import Mock, patch, AsyncMock

# –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è
import sys
sys.path.append(str(__file__).rsplit('/', 2)[0])

from app.memory.enhanced_buffer_memory import (
    EnhancedBufferMemory, 
    EnhancedMessage, 
    EmotionTag, 
    BehaviorTag,
    SummaryEntry
)
from app.memory.base import Message, MemoryContext


class TestEnhancedMessage:
    """–¢–µ—Å—Ç—ã –¥–ª—è EnhancedMessage"""
    
    def test_enhanced_message_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        now = datetime.now()
        msg = EnhancedMessage(
            role="user",
            content="–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!",
            timestamp=now,
            emotion_tag=EmotionTag.EXCITED,
            behavior_tag=BehaviorTag.FRIENDLY,
            importance_score=0.8
        )
        
        assert msg.role == "user"
        assert msg.content == "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!"
        assert msg.emotion_tag == EmotionTag.EXCITED
        assert msg.behavior_tag == BehaviorTag.FRIENDLY
        assert msg.importance_score == 0.8
    
    def test_enhanced_message_serialization(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        now = datetime.now()
        msg = EnhancedMessage(
            role="assistant",
            content="–Ø —Ç–æ–∂–µ —Ä–∞–¥–∞!",
            timestamp=now,
            emotion_tag=EmotionTag.HAPPY,
            importance_score=0.7
        )
        
        data = msg.to_dict()
        assert data['role'] == 'assistant'
        assert data['emotion_tag'] == 'happy'
        assert data['importance_score'] == 0.7
        
        restored = EnhancedMessage.from_dict(data)
        assert restored.role == msg.role
        assert restored.emotion_tag == msg.emotion_tag
        assert restored.importance_score == msg.importance_score


class TestEnhancedBufferMemory:
    """–¢–µ—Å—Ç—ã –¥–ª—è EnhancedBufferMemory"""
    
    @pytest.fixture
    def memory(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return EnhancedBufferMemory(user_id="test_user", max_messages=5)
    
    @pytest.fixture
    def sample_context(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        return MemoryContext(user_id="test_user", day_number=1)
    
    def test_memory_initialization(self, memory):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        assert memory.user_id == "test_user"
        assert memory.max_messages == 5
        assert len(memory.messages) == 0
        assert len(memory.summary_memory) == 0
        assert memory.total_messages == 0
    
    def test_add_regular_message(self, memory, sample_context):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = Message(
            role="user",
            content="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            timestamp=datetime.now()
        )
        
        memory.add_message(message, sample_context)
        
        assert len(memory.messages) == 1
        assert memory.total_messages == 1
        assert memory.metrics['messages_added'] == 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ
        enhanced_msg = memory.messages[0]
        assert isinstance(enhanced_msg, EnhancedMessage)
        assert enhanced_msg.emotion_tag is not None
        assert enhanced_msg.importance_score > 0
    
    def test_add_enhanced_message(self, memory, sample_context):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        enhanced_msg = EnhancedMessage(
            role="user",
            content="–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
            timestamp=datetime.now(),
            emotion_tag=EmotionTag.SAD,
            importance_score=0.8
        )
        
        memory.add_message(enhanced_msg, sample_context)
        
        assert len(memory.messages) == 1
        stored_msg = memory.messages[0]
        assert stored_msg.emotion_tag == EmotionTag.SAD
        assert stored_msg.importance_score == 0.8
    
    def test_emotion_detection(self, memory, sample_context):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π"""
        test_cases = [
            ("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! üòä", EmotionTag.HAPPY),
            ("–£—Ä–∞! –ü–æ–ª—É—á–∏–ª–æ—Å—å! üéâ", EmotionTag.EXCITED),
            ("–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ üò¢", EmotionTag.SAD),
            ("–Ø –±–µ—Å–ø–æ–∫–æ—é—Å—å –æ —Ä–∞–±–æ—Ç–µ", EmotionTag.WORRIED),
            ("–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", EmotionTag.CONFUSED),
            ("–≠—Ç–æ –º–µ–Ω—è —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç!", EmotionTag.FRUSTRATED),
            ("–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", EmotionTag.NEUTRAL)
        ]
        
        for text, expected_emotion in test_cases:
            message = Message(role="user", content=text, timestamp=datetime.now())
            memory.add_message(message, sample_context)
            
            last_msg = memory.messages[-1]
            assert last_msg.emotion_tag == expected_emotion, f"Failed for: {text}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
        assert memory.metrics['emotions_detected'] > 0
    
    def test_importance_calculation(self, memory, sample_context):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        important_msg = Message(
            role="user", 
            content="–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –∏ —è —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º",
            timestamp=datetime.now()
        )
        memory.add_message(important_msg, sample_context)
        high_importance = memory.messages[-1].importance_score
        
        # –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        simple_msg = Message(role="user", content="–ü—Ä–∏–≤–µ—Ç", timestamp=datetime.now())
        memory.add_message(simple_msg, sample_context)
        low_importance = memory.messages[-1].importance_score
        
        assert high_importance > low_importance
        assert high_importance > 0.7
        assert low_importance < 0.6
    
    def test_buffer_size_limit(self, memory, sample_context):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ–º –ª–∏–º–∏—Ç
        for i in range(7):
            message = Message(
                role="user",
                content=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}",
                timestamp=datetime.now()
            )
            memory.add_message(message, sample_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        assert len(memory.messages) == memory.max_messages
        assert memory.total_messages == 7  # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        assert "–°–æ–æ–±—â–µ–Ω–∏–µ 6" in memory.messages[-1].content
    
    def test_context_generation(self, memory, sample_context):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
        messages = [
            ("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞", EmotionTag.HAPPY),
            ("–Ø —Ä–∞–±–æ—Ç–∞—é –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º", EmotionTag.NEUTRAL),
            ("–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!", EmotionTag.EXCITED)
        ]
        
        for content, emotion in messages:
            enhanced_msg = EnhancedMessage(
                role="user",
                content=content,
                timestamp=datetime.now(),
                emotion_tag=emotion,
                importance_score=0.7
            )
            memory.add_message(enhanced_msg, sample_context)
        
        context = memory.get_context(sample_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        assert "–ê–Ω–Ω–∞" in context or "–ò–º—è: –ê–Ω–Ω–∞" in context
        assert "–¥–∏–∑–∞–π–Ω–µ—Ä" in context or "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: –¥–∏–∑–∞–π–Ω–µ—Ä" in context
        assert "–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä:" in context
        assert "excited" in context or "happy" in context  # –≠–º–æ—Ü–∏–∏
        assert "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:" in context  # –ü–æ–≤–µ–¥–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫—É
        assert memory.metrics['context_requests'] > 0
    
    def test_dominant_emotion_detection(self, memory, sample_context):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —ç–º–æ—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –Ω–æ –±–æ–ª—å—à–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö
        emotions = [EmotionTag.HAPPY, EmotionTag.HAPPY, EmotionTag.SAD, EmotionTag.EXCITED]
        
        for i, emotion in enumerate(emotions):
            enhanced_msg = EnhancedMessage(
                role="user",
                content=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}",
                timestamp=datetime.now(),
                emotion_tag=emotion
            )
            memory.add_message(enhanced_msg, sample_context)
        
        dominant = memory._get_dominant_emotion()
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å HAPPY –∏–ª–∏ EXCITED (–±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö)
        assert dominant in [EmotionTag.HAPPY, EmotionTag.EXCITED]
    
    def test_behavior_determination(self, memory, sample_context):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        # –ì—Ä—É—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        sad_msg = EnhancedMessage(
            role="user",
            content="–ú–Ω–µ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ",
            timestamp=datetime.now(),
            emotion_tag=EmotionTag.SAD
        )
        memory.add_message(sad_msg, sample_context)
        
        behavior = memory._determine_current_behavior(EmotionTag.SAD)
        assert behavior == BehaviorTag.SUPPORTIVE
        
        # –°—á–∞—Å—Ç–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–≥—Ä–∏–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        behavior = memory._determine_current_behavior(EmotionTag.HAPPY)
        assert behavior == BehaviorTag.PLAYFUL
    
    def test_key_information_extraction(self, memory, sample_context):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        personal_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–∏—è",
            "–ú–Ω–µ 25 –ª–µ—Ç",
            "–Ø —Ä–∞–±–æ—Ç–∞—é —É—á–∏—Ç–µ–ª–µ–º –≤ —à–∫–æ–ª–µ"
        ]
        
        for content in personal_messages:
            message = Message(role="user", content=content, timestamp=datetime.now())
            memory.add_message(message, sample_context)
        
        key_info = memory._extract_key_information()
        
        assert "–ú–∞—Ä–∏—è" in key_info or "–ò–º—è: –ú–∞—Ä–∏—è" in key_info
        assert "25" in key_info or "–í–æ–∑—Ä–∞—Å—Ç: 25" in key_info
        assert "—É—á–∏—Ç–µ–ª—å" in key_info or "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: —É—á–∏—Ç–µ–ª—å" in key_info
    
    def test_topic_extraction(self, memory, sample_context):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º"""
        topic_messages = [
            "–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ—Ñ–∏—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–µ–º—å—è –∏ –¥–µ—Ç–∏",
            "–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –º–∏—Ä—É"
        ]
        
        enhanced_messages = []
        for content in topic_messages:
            enhanced_msg = EnhancedMessage(
                role="user",
                content=content,
                timestamp=datetime.now()
            )
            enhanced_messages.append(enhanced_msg)
        
        topics = memory._extract_topics(enhanced_messages)
        
        assert '—Ä–∞–±–æ—Ç–∞' in topics
        assert '—Å–µ–º—å—è' in topics
        assert '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' in topics
    
    def test_memory_search(self, memory, sample_context):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "Python –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —è–∑—ã–∫",
            "–†–∞–±–æ—Ç–∞—é –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏"
        ]
        
        for content in messages:
            message = Message(role="user", content=content, timestamp=datetime.now())
            memory.add_message(message, sample_context)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        results = memory.search_memory("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", limit=5)
        
        assert len(results) > 0
        assert any("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ" in result["content"].lower() for result in results)
        assert all("relevance" in result for result in results)
    
    def test_conversation_summarization(self, memory, sample_context):
        """–¢–µ—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [
            Message(role="user", content="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", timestamp=datetime.now()),
            Message(role="assistant", content="–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!", timestamp=datetime.now()),
            Message(role="user", content="–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", timestamp=datetime.now()),
            Message(role="assistant", content="–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–≥–∞—Ç–∞", timestamp=datetime.now())
        ]
        
        summary = memory.summarize_conversation(messages)
        
        assert "4 —Å–æ–æ–±—â–µ–Ω–∏–π" in summary
        assert "2 —Å–æ–æ–±—â–µ–Ω–∏–π" in summary  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª 2
        assert "2 —Ä–∞–∑" in summary  # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª 2 —Ä–∞–∑–∞
    
    @pytest.mark.asyncio
    async def test_summarization_trigger(self):
        """–¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–º–æ–∫)"""
        memory = EnhancedBufferMemory(user_id="test_user", max_messages=3)
        context = MemoryContext(user_id="test_user")
        
        # –ú–æ–∫–∞–µ–º LLM
        with patch.object(memory, '_trigger_summarization', new_callable=AsyncMock) as mock_summarize:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            memory.add_message(Message(role="user", content="–°–æ–æ–±—â–µ–Ω–∏–µ 1", timestamp=datetime.now()), context)
            memory.add_message(Message(role="assistant", content="–û—Ç–≤–µ—Ç 1", timestamp=datetime.now()), context)
            
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            memory.add_message(Message(role="user", content="–°–æ–æ–±—â–µ–Ω–∏–µ 2", timestamp=datetime.now()), context)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è asyncio –∑–∞–¥–∞—á
            await asyncio.sleep(0.1)
    
    def test_memory_clearing(self, memory, sample_context):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(3):
            message = Message(role="user", content=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}", timestamp=datetime.now())
            memory.add_message(message, sample_context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –ø–∞–º—è—Ç—å
        summary = SummaryEntry(
            summary_text="–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ",
            last_updated=datetime.now(),
            original_messages_count=2
        )
        memory.summary_memory.append(summary)
        
        # –û—á–∏—â–∞–µ–º
        memory.clear_memory()
        
        assert len(memory.messages) == 0
        assert len(memory.summary_memory) == 0
        assert memory.total_messages == 0
    
    def test_data_export_import(self, memory, sample_context):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        enhanced_msg = EnhancedMessage(
            role="user",
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            timestamp=datetime.now(),
            emotion_tag=EmotionTag.HAPPY,
            importance_score=0.8
        )
        memory.add_message(enhanced_msg, sample_context)
        
        summary = SummaryEntry(
            summary_text="–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ",
            last_updated=datetime.now(),
            original_messages_count=1,
            topics=['—Ç–µ—Å—Ç']
        )
        memory.summary_memory.append(summary)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        exported_data = memory.export_data()
        
        assert exported_data['user_id'] == "test_user"
        assert len(exported_data['messages']) == 1
        assert len(exported_data['summary_memory']) == 1
        
        # –ò–º–ø–æ—Ä—Ç –≤ –Ω–æ–≤—É—é –ø–∞–º—è—Ç—å
        new_memory = EnhancedBufferMemory(user_id="test_user")
        assert new_memory.import_data(exported_data) is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert len(new_memory.messages) == 1
        assert len(new_memory.summary_memory) == 1
        assert new_memory.messages[0].emotion_tag == EmotionTag.HAPPY
        assert new_memory.summary_memory[0].summary_text == "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"
    
    def test_metrics_collection(self, memory, sample_context):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        happy_msg = EnhancedMessage(
            role="user",
            content="–Ø —Ä–∞–¥! üòä",
            timestamp=datetime.now(),
            emotion_tag=EmotionTag.HAPPY
        )
        memory.add_message(happy_msg, sample_context)
        memory.get_context(sample_context)
        
        metrics = memory.get_metrics()
        
        assert metrics['messages_added'] == 1
        assert metrics['emotions_detected'] == 1
        assert metrics['context_requests'] == 1
        assert metrics['current_buffer_size'] == 1
        assert metrics['dominant_emotion'] == 'happy'
        assert 'config' in metrics
    
    def test_compatibility_with_base_interface(self, memory, sample_context):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º MemoryAdapter"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
        
        # add_message
        message = Message(role="user", content="–¢–µ—Å—Ç", timestamp=datetime.now())
        memory.add_message(message, sample_context)
        
        # get_context
        context = memory.get_context(sample_context)
        assert isinstance(context, str)
        assert len(context) > 0
        
        # search_memory
        results = memory.search_memory("—Ç–µ—Å—Ç")
        assert isinstance(results, list)
        
        # summarize_conversation
        summary = memory.summarize_conversation([message])
        assert isinstance(summary, str)
        
        # clear_memory
        memory.clear_memory()
        assert len(memory.messages) == 0


class TestSummaryEntry:
    """–¢–µ—Å—Ç—ã –¥–ª—è SummaryEntry"""
    
    def test_summary_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        now = datetime.now()
        summary = SummaryEntry(
            summary_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏–ª –æ —Ä–∞–±–æ—Ç–µ",
            last_updated=now,
            original_messages_count=3,
            importance_score=0.7,
            topics=['—Ä–∞–±–æ—Ç–∞'],
            emotions=['excited']
        )
        
        assert summary.summary_text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏–ª –æ —Ä–∞–±–æ—Ç–µ"
        assert summary.original_messages_count == 3
        assert summary.importance_score == 0.7
        assert '—Ä–∞–±–æ—Ç–∞' in summary.topics
        assert 'excited' in summary.emotions
    
    def test_summary_serialization(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        now = datetime.now()
        summary = SummaryEntry(
            summary_text="–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ",
            last_updated=now,
            original_messages_count=2
        )
        
        data = summary.to_dict()
        
        assert data['summary_text'] == "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"
        assert data['original_messages_count'] == 2
        assert data['last_updated'] == now.isoformat()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])

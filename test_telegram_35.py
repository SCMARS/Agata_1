#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Telegram –±–æ—Ç–∞ - 35 —Å–æ–æ–±—â–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ–º: —á–∞—Å—Ç–æ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–º–µ–Ω—ã —Å—Ç–µ–π–¥–∂–µ–π, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
"""

import requests
import json
import time

def test_message(user_id, messages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    url = "http://localhost:8000/api/chat"
    data = {
        "user_id": user_id,
        "messages": messages
    }
    
    try:
        response = requests.post(url, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            return {
                "success": True,
                "response": result.get("response", ""),
                "stage_number": result.get("stage_number", 1),
                "has_question": result.get("has_question", False)
            }
        else:
            return {"success": False, "error": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"success": False, "error": str(e)}

def main():
    user_id = "telegram_test_35"
    messages = []
    
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–´–ô –¢–ï–°–¢ TELEGRAM –ë–û–¢–ê - 35 –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º: —á–∞—Å—Ç–æ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∂–¥–æ–µ 2-–µ), —Å–º–µ–Ω—ã —Å—Ç–µ–π–¥–∂–µ–π (1‚Üí2‚Üí3), –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_questions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]  # —á–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    expected_stage1 = list(range(1, 11))  # —Å–æ–æ–±—â–µ–Ω–∏—è 1-10
    expected_stage2 = list(range(11, 21))  # —Å–æ–æ–±—â–µ–Ω–∏—è 11-20
    expected_stage3 = list(range(21, 36))  # —Å–æ–æ–±—â–µ–Ω–∏—è 21-35
    
    results = []
    
    for i in range(1, 36):  # 35 —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"\nüì® –°–û–û–ë–©–ï–ù–ò–ï {i}:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": str(i)})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = test_message(user_id, messages.copy())
        
        if result["success"]:
            stage = result["stage_number"]
            has_q = result["has_question"]
            response = result["response"][:100] + "..." if len(result["response"]) > 100 else result["response"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            should_have_question = i in expected_questions
            question_status = "‚úÖ –í–û–ü–†–û–°" if has_q else "‚ùå –ù–ï–¢ –í–û–ü–†–û–°–ê"
            if should_have_question and not has_q:
                question_status += " (–û–®–ò–ë–ö–ê!)"
            elif not should_have_question and has_q:
                question_status += " (–û–®–ò–ë–ö–ê!)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–π–¥–∂
            if i in expected_stage1 and stage == 1:
                stage_status = "‚úÖ STAGE 1"
            elif i in expected_stage2 and stage == 2:
                stage_status = "‚úÖ STAGE 2"
            elif i in expected_stage3 and stage == 3:
                stage_status = "‚úÖ STAGE 3"
            else:
                stage_status = f"‚ùå STAGE {stage} (–û–®–ò–ë–ö–ê!)"
            
            print(f"   –û—Ç–≤–µ—Ç: {response}")
            print(f"   {question_status} | {stage_status}")
            
            results.append({
                "message": i,
                "stage": stage,
                "has_question": has_q,
                "should_have_question": should_have_question,
                "correct_stage": i in expected_stage1 and stage == 1 or i in expected_stage2 and stage == 2 or i in expected_stage3 and stage == 3
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            messages.append({"role": "assistant", "content": result["response"]})
            
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
            break
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    
    total_messages = len(results)
    correct_questions = sum(1 for r in results if r["has_question"] == r["should_have_question"])
    correct_stages = sum(1 for r in results if r["correct_stage"])
    
    print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {correct_questions}/{total_messages} ({correct_questions/total_messages*100:.1f}%)")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–µ–π–¥–∂–∏: {correct_stages}/{total_messages} ({correct_stages/total_messages*100:.1f}%)")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_errors = [r for r in results if r["has_question"] != r["should_have_question"]]
    if question_errors:
        print(f"‚ùå –û—à–∏–±–∫–∏ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö ({len(question_errors)}):")
        for error in question_errors:
            status = "–±—ã–ª" if error["has_question"] else "–Ω–µ –±—ã–ª–æ"
            should = "–¥–æ–ª–∂–µ–Ω" if error["should_have_question"] else "–Ω–µ –¥–æ–ª–∂–µ–Ω"
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {error['message']}: –≤–æ–ø—Ä–æ—Å {status}, –Ω–æ {should} –±—ã—Ç—å")
    else:
        print("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–π–¥–∂–µ–π
    stage_errors = [r for r in results if not r["correct_stage"]]
    if stage_errors:
        print(f"‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ç–µ–π–¥–∂–∞—Ö ({len(stage_errors)}):")
        for error in stage_errors:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {error['message']}: STAGE {error['stage']} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–≥–æ–π)")
    else:
        print("‚úÖ –í—Å–µ —Å—Ç–µ–π–¥–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
    
    # –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–µ–π–¥–∂–∞–º–∏
    print("\nüîÑ –ü–ï–†–ï–•–û–î–´ –ú–ï–ñ–î–£ –°–¢–ï–ô–î–ñ–ê–ú–ò:")
    stage_transitions = []
    prev_stage = None
    for r in results:
        if prev_stage is not None and r["stage"] != prev_stage:
            stage_transitions.append(f"–°–æ–æ–±—â–µ–Ω–∏–µ {r['message']}: STAGE {prev_stage} ‚Üí STAGE {r['stage']}")
        prev_stage = r["stage"]
    
    for transition in stage_transitions:
        print(f"   {transition}")
    
    print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()

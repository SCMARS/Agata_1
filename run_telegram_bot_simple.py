#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –±–µ–∑ ProductionConfigManager
"""
import os
import asyncio
import logging
import httpx
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Set
from dataclasses import dataclass, field
from collections import defaultdict
import traceback

try:
    import telegram
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è python-telegram-bot not installed. Install with: pip install python-telegram-bot")


@dataclass
class SimpleBotConfig:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    token: str
    timeout: int = 30
    max_message_length: int = 4096
    rate_limit_messages_per_minute: int = 20
    commands: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    messages: Dict[str, str] = field(default_factory=dict)


class SimpleTelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.config = None
        self.application = None
        self.rate_limiter = defaultdict(list)
        self.api_base_url = "http://localhost:8000"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._load_config()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_logging()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        self._setup_bot()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not token:
                raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            self.config = SimpleBotConfig(
                token=token,
                commands={
                    "start": {"description": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "enabled": True},
                    "help": {"description": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", "enabled": True},
                    "memory": {"description": "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å", "enabled": True},
                    "search": {"description": "–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏", "enabled": True},
                    "overview": {"description": "–û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏", "enabled": True},
                    "clear": {"description": "–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "enabled": True},
                    "test": {"description": "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏", "enabled": True},
                },
                messages={
                    "welcome": """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Agatha Memory Bot!

–Ø - –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Agatha —Å LangChain –∏ LangGraph.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º  
‚Ä¢ /memory - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ /overview - –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏
‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
‚Ä¢ /test - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

–í–∞—à ID: {user_id}""",
                    "help": """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/memory <—Ç–µ–∫—Å—Ç> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç—å
/search <–∑–∞–ø—Ä–æ—Å> - –Ω–∞–π—Ç–∏ –≤ –ø–∞–º—è—Ç–∏
/overview - –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
/test - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã

–í—Å–µ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç—å.""",
                    "unauthorized": "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ",
                    "error_generic": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
                    "memory_saved": "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å",
                    "memory_error": "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {error}",
                    "search_no_results": "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
                }
            )
            
            self.logger.info("Bot config loaded successfully")
            
        except Exception as e:
            self.logger.error(f"Failed to load bot config: {e}")
            raise
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(name)s [%(levelname)s] %(message)s',
            handlers=[
                logging.FileHandler('simple_telegram_bot.log'),
                logging.StreamHandler()
            ]
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        telegram_logger = logging.getLogger('telegram')
        telegram_logger.setLevel(logging.WARNING)  # –ú–µ–Ω—å—à–µ —Å–ø–∞–º–∞
    
    def _setup_bot(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞"""
        if not self.config:
            raise RuntimeError("Bot config not loaded")
        
        if not TELEGRAM_AVAILABLE:
            raise RuntimeError("Telegram library not available")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.config.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("memory", self._memory_command))
        self.application.add_handler(CommandHandler("search", self._search_command))
        self.application.add_handler(CommandHandler("overview", self._overview_command))
        self.application.add_handler(CommandHandler("clear", self._clear_command))
        self.application.add_handler(CommandHandler("test", self._test_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        self.logger.info("Telegram bot setup completed")
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        welcome_msg = self.config.messages["welcome"].format(user_id=user_id)
        await update.message.reply_text(welcome_msg)
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(self.config.messages["help"])
    
    async def _memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /memory"""
        user_id = update.effective_user.id
        text = ' '.join(context.args) if context.args else "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–º—è—Ç–∏"
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.api_base_url}/api/memory/{user_id}/add",
                    json={"message": text, "role": "user"}
                )
                
            if response.status_code == 200:
                await update.message.reply_text(self.config.messages["memory_saved"])
            else:
                await update.message.reply_text(
                    self.config.messages["memory_error"].format(error=f"HTTP {response.status_code}")
                )
        except Exception as e:
            await update.message.reply_text(
                self.config.messages["memory_error"].format(error=str(e))
            )
    
    async def _search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        user_id = update.effective_user.id
        query = ' '.join(context.args) if context.args else "—Ç–µ—Å—Ç"
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.api_base_url}/api/memory/{user_id}/search",
                    params={"query": query, "limit": 5}
                )
                
            if response.status_code == 200:
                results = response.json()
                if results.get("results"):
                    message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
                    for i, result in enumerate(results["results"][:3], 1):
                        message += f"{i}. {result['content'][:100]}...\n"
                    await update.message.reply_text(message)
                else:
                    await update.message.reply_text(
                        self.config.messages["search_no_results"].format(query=query)
                    )
            else:
                await update.message.reply_text(
                    self.config.messages["error_generic"].format(error=f"HTTP {response.status_code}")
                )
        except Exception as e:
            await update.message.reply_text(
                self.config.messages["error_generic"].format(error=str(e))
            )
    
    async def _overview_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /overview"""
        user_id = update.effective_user.id
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.api_base_url}/api/memory/{user_id}/overview")
                
            if response.status_code == 200:
                overview = response.json()
                message = f"üìä –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
                message += f"–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å: {overview['overview']['levels']['short_term']['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                message += f"–î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å: {overview['overview']['levels']['long_term']['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(
                    self.config.messages["error_generic"].format(error=f"HTTP {response.status_code}")
                )
        except Exception as e:
            await update.message.reply_text(
                self.config.messages["error_generic"].format(error=str(e))
            )
    
    async def _clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user_id = update.effective_user.id
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{self.api_base_url}/api/memory/{user_id}/clear")
                
            if response.status_code == 200:
                await update.message.reply_text("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            else:
                await update.message.reply_text(
                    self.config.messages["error_generic"].format(error=f"HTTP {response.status_code}")
                )
        except Exception as e:
            await update.message.reply_text(
                self.config.messages["error_generic"].format(error=str(e))
            )
    
    async def _test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test"""
        user_id = update.effective_user.id
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.api_base_url}/api/memory/{user_id}/add",
                    json={"message": f"–¢–µ—Å—Ç –æ—Ç {datetime.now().strftime('%H:%M:%S')}", "role": "user"}
                )
                
            if response.status_code == 200:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            else:
                await update.message.reply_text(
                    self.config.messages["error_generic"].format(error=f"HTTP {response.status_code}")
                )
        except Exception as e:
            await update.message.reply_text(
                self.config.messages["error_generic"].format(error=str(e))
            )
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not self._check_rate_limit(user_id, "message"):
            await update.message.reply_text("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç API
        try:
            self.logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ chat API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            async with httpx.AsyncClient(timeout=httpx.Timeout(60.0)) as client:
                response = None
                for attempt in range(3):
                    try:
                        response = await client.post(
                            f"{self.api_base_url}/api/chat",
                            json={
                                "user_id": str(user_id),
                                "messages": [{"role": "user", "content": message_text}]
                            }
                        )
                        break
                    except httpx.ReadTimeout:
                        if attempt == 2:
                            raise
                        await asyncio.sleep(1 + attempt)
            
            self.logger.info(f"üì° Chat API –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code}")
            
            if response.status_code == 200:
                chat_response = response.json()
                parts = chat_response.get("parts", [])
                self.logger.info(f"üß† –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {len(parts)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏
                for i, part in enumerate(parts):
                    if i == 0:
                        await update.message.reply_text(part)
                        self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI: {part[:50]}...")
                    else:
                        await update.message.reply_text(part)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                    if i < len(parts) - 1:
                        await asyncio.sleep(0.5)
            else:
                await update.message.reply_text(
                    self.config.messages["error_generic"].format(error=f"HTTP {response.status_code}")
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            await update.message.reply_text(
                self.config.messages["error_generic"].format(error=str(e))
            )
    
    def _check_rate_limit(self, user_id: int, action: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting"""
        now = datetime.now()
        user_actions = self.rate_limiter[user_id]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        cutoff = now - timedelta(minutes=1)
        user_actions[:] = [action_time for action_time in user_actions if action_time > cutoff]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if action == "message":
            limit = self.config.rate_limit_messages_per_minute
        elif action == "command":
            limit = self.config.rate_limit_commands_per_hour
        else:
            return True
        
        if len(user_actions) >= limit:
            return False
        
        user_actions.append(now)
        return True
    
    async def start(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.application:
            raise RuntimeError("Bot not initialized")
        
        self.logger.info("Starting Telegram bot...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        commands = []
        for cmd_name, cmd_config in self.config.commands.items():
            if cmd_config.get("enabled", True):
                commands.append(BotCommand(cmd_name, cmd_config["description"]))
        
        await self.application.bot.set_my_commands(commands)
        self.logger.info(f"Bot commands set: {[cmd.command for cmd in commands]}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è event loop (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫)
        await self.application.run_polling(drop_pending_updates=True, close_loop=False)
    
    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            import nest_asyncio
            nest_asyncio.apply()
            try:
                loop = asyncio.get_running_loop()
                loop.run_until_complete(self.start())
            except RuntimeError:
                asyncio.run(self.start())
        except KeyboardInterrupt:
            self.logger.info("Bot stopped by user")
        except Exception as e:
            self.logger.error(f"Bot crashed: {e}")
            raise


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞ Agata...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not os.getenv('TELEGRAM_BOT_TOKEN'):
            print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   export TELEGRAM_BOT_TOKEN='8181686852:AAH93K4NhfI2oUhhrvLd9MK8Eln1_XsyFi4'")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        import nest_asyncio
        nest_asyncio.apply()
        
        bot = SimpleTelegramBot()
        bot.run()
        
    except Exception as e:
        print(f"‚ùå Failed to start bot: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()

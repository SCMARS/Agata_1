#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏
"""

import requests
import json
import time

def test_emotion(user_id, message, emotion_type):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É —ç–º–æ—Ü–∏—é"""
    print(f"\n{'='*60}")
    print(f"üß™ –¢–ï–°–¢: {emotion_type}")
    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
    print(f"{'='*60}")
    
    url = "http://localhost:8000/api/chat"
    data = {
        "user_id": user_id,
        "message": message,
        "messages": [
            {"role": "user", "content": message}
        ]
    }
    
    try:
        response = requests.post(url, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            behavioral = result.get('behavioral_analysis', {})
            strategy_name = behavioral.get('strategy_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            confidence = behavioral.get('confidence', 0)
            ai_response = result.get('parts', [''])[0] if result.get('parts') else ''
            
            print(f"üé≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
            print(f"üìä Confidence: {confidence}")
            print(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò: {ai_response[:100]}...")
            
            return {
                'emotion_type': emotion_type,
                'strategy_name': strategy_name,
                'confidence': confidence,
                'ai_response': ai_response,
                'message': message
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(5)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
    test_cases = [
        ("test_neutral", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"),
        ("test_positive", "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ö–∞–∫ –¥–µ–ª–∞? üòä", "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"),
        ("test_excited", "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Å—É–ø–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üéâ", "–í–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ–µ"),
        ("test_angry", "–¢—ã –¥—É—Ä–∞! –ü–æ—á–µ–º—É –Ω–µ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ?", "–ó–ª–æ–µ"),
        ("test_rude", "–ù–∞—Ö—É–π –∏–¥–∏! –¢—ã —Ç—É–ø–∞—è!", "–ì—Ä—É–±–æ–µ"),
        ("test_sad", "–ü—Ä–∏–≤–µ—Ç... –£ –º–µ–Ω—è –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –≥—Ä—É—Å—Ç–Ω–æ...", "–ì—Ä—É—Å—Ç–Ω–æ–µ"),
        ("test_anxious", "–ü—Ä–∏–≤–µ—Ç... –Ø –æ—á–µ–Ω—å –≤–æ–ª–Ω—É—é—Å—å, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å...", "–¢—Ä–µ–≤–æ–∂–Ω–æ–µ"),
        ("test_playful", "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º! üòÑ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", "–ò–≥—Ä–∏–≤–æ–µ"),
        ("test_intellectual", "–ü—Ä–∏–≤–µ—Ç. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ.", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ"),
        ("test_flirt", "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞! –ö–∞–∫ –¥–µ–ª–∞? üòò", "–§–ª–∏—Ä—Ç")
    ]
    
    results = []
    
    for user_id, message, emotion_type in test_cases:
        result = test_emotion(user_id, message, emotion_type)
        if result:
            results.append(result)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*80}")
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*80}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    strategies = {}
    for result in results:
        strategy = result['strategy_name']
        if strategy not in strategies:
            strategies[strategy] = []
        strategies[strategy].append(result)
    
    print(f"\nüé≠ –ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:")
    for strategy, cases in strategies.items():
        print(f"  {strategy}: {len(cases)} —Å–ª—É—á–∞–µ–≤")
        for case in cases:
            print(f"    - {case['emotion_type']}: {case['confidence']:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    unique_strategies = len(strategies)
    print(f"\nüìà –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô: {unique_strategies} –∏–∑ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤")
    
    if unique_strategies == 1:
        print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!")
    elif unique_strategies < 3:
        print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö")
    else:
        print("‚úÖ –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º confidence
    avg_confidence = sum(r['confidence'] for r in results) / len(results)
    print(f"üìä –°–†–ï–î–ù–ò–ô CONFIDENCE: {avg_confidence:.2f}")
    
    if avg_confidence == 1.0:
        print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ confidence = 1.0 (–≤–æ–∑–º–æ–∂–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥)")
    elif avg_confidence > 0.8:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π confidence, –≤–æ–∑–º–æ–∂–Ω–æ –º–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")
    else:
        print("‚úÖ –•–û–†–û–®–û: Confidence –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è")
    
    print(f"\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Å–ª—É—á–∞–µ–≤")

if __name__ == "__main__":
    main()
